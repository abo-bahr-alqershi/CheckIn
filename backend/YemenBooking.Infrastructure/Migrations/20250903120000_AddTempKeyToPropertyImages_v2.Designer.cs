// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YemenBooking.Infrastructure.Data.Context;

#nullable disable

namespace YemenBooking.Infrastructure.Migrations
{
    [DbContext(typeof(YemenBookingDbContext))]
    [Migration("20250903120000_AddTempKeyToPropertyImages_v2")]
    partial class AddTempKeyToPropertyImages_v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatConversationParticipant", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatConversationParticipant");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.AdminAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActionId");

                    b.Property<int>("ActionType")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasComment("نوع الإجراء");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف المدير");

                    b.Property<Guid>("AdminId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasComment("تغييرات الإجراء");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الهدف");

                    b.Property<int>("TargetType")
                        .HasMaxLength(100)
                        .HasColumnType("int")
                        .HasComment("نوع الهدف");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasComment("وقت الإجراء");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_AdminActions_ActionType");

                    b.HasIndex("AdminId")
                        .HasDatabaseName("IX_AdminActions_AdminId");

                    b.HasIndex("AdminId1");

                    b.HasIndex("TargetType")
                        .HasDatabaseName("IX_AdminActions_TargetType");

                    b.HasIndex("AdminId", "Timestamp")
                        .HasDatabaseName("IX_AdminActions_AdminId_Timestamp");

                    b.HasIndex("TargetId", "TargetType")
                        .HasDatabaseName("IX_AdminActions_TargetId_TargetType");

                    b.ToTable("AdminActions", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AmenityId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Amenities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5505),
                            Description = "إنترنت لاسلكي مجاني",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "واي فاي",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5506)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5518),
                            Description = "مسبح للسباحة",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "مسبح",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5518)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5522),
                            Description = "صالة رياضية",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "جيم",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5522)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5525),
                            Description = "خدمة المطعم",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "مطعم",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5526)
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5527),
                            Description = "موقف سيارات مجاني",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "موقف سيارات",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5528)
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5530),
                            Description = "تكييف الهواء",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "تكييف",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5542)
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5544),
                            Description = "تلفزيون بشاشة مسطحة",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "تلفزيون",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5544)
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5547),
                            Description = "وجبة إفطار مجانية",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "إفطار",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 81, DateTimeKind.Utc).AddTicks(5547)
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuditLogId");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccessful")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Metadata")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("NewValues")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Notes")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("OldValues")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid?>("PerformedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PerformedBy");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingId")
                        .HasComment("معرف الحجز الفريد");

                    b.Property<DateTime?>("ActualCheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualCheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("تاريخ الحجز");

                    b.Property<string>("BookingSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ الوصول");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ المغادرة");

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CustomerRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("int")
                        .HasComment("عدد الضيوف");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<bool>("IsWalkIn")
                        .HasColumnType("bit");

                    b.Property<decimal>("PlatformCommissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasComment("حالة الحجز");

                    b.Property<string>("TotalPrice_Currency")
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الوحدة");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف المستخدم");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Bookings_IsDeleted");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Bookings_Status");

                    b.HasIndex("TotalPrice_Currency");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_Bookings_UnitId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Bookings_UserId");

                    b.HasIndex("CheckIn", "CheckOut")
                        .HasDatabaseName("IX_Bookings_CheckInOut");

                    b.HasIndex("UserId", "BookedAt");

                    b.HasIndex("UnitId", "CheckIn", "CheckOut");

                    b.ToTable("Bookings", null, t =>
                        {
                            t.Property("TotalPrice_Currency")
                                .HasColumnName("Booking_TotalPrice_Currency");
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.BookingService", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الحجز");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الخدمة");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingServiceId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("الكمية");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId", "ServiceId");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_BookingServices_BookingId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_BookingServices_IsDeleted");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("IX_BookingServices_ServiceId");

                    b.ToTable("BookingServices", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChatMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("نوع المحتوى");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف المحادثة");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int")
                        .HasComment("Attachment duration in seconds (audio/video)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("اسم الملف الأصلي");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("مسار الملف على الخادم");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasComment("حجم الملف بالبايت");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasComment("Additional metadata as JSON string (optional)");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("URL of the thumbnail image (optional)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("المستخدم الذي رفع الملف");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.HasIndex("ConversationId");

                    b.ToTable("ChatAttachments", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatConversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("مسار الصورة الرمزية");

                    b.Property<string>("ConversationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("نوع المحادثة: direct أو group");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("وصف المحادثة");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("هل المحادثة مؤرشفة");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("هل المحادثة صامتة");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الفندق المرتبط بالمحادثة");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("عنوان المحادثة للمجموعات");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_ChatConversations_PropertyId");

                    b.ToTable("ChatConversations", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("محتوى الرسالة");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف المحادثة");

                    b.Property<Guid?>("ConversationId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<string>("LocationJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location")
                        .HasComment("بيانات الموقع بصيغة JSON");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("نوع الرسالة");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplyToMessageId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الرسالة المرد عليها");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف المستخدم المرسل");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ConversationId1");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoDownloadMedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("التحميل التلقائي للوسائط");

                    b.Property<bool>("BackupMessages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("نسخ احتياطي للرسائل");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FontSize")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("حجم الخط: small, medium, large");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("تنبيهات مفعلة");

                    b.Property<bool>("ShowReadReceipts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("عرض إيصالات القراءة");

                    b.Property<bool>("ShowTypingIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("عرض مؤشر الكتابة");

                    b.Property<bool>("SoundEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("صوت مفعّل");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("المظهر: light, dark, auto");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف المستخدم");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_ChatSettings_UserId");

                    b.ToTable("ChatSettings", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.City", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagesJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasDefaultValue("[]");

                    b.HasKey("Name");

                    b.HasIndex("Name", "Country")
                        .IsUnique();

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "صنعاء",
                            Country = "اليمن",
                            ImagesJson = "[]"
                        },
                        new
                        {
                            Name = "عدن",
                            Country = "اليمن",
                            ImagesJson = "[]"
                        },
                        new
                        {
                            Name = "تعز",
                            Country = "اليمن",
                            ImagesJson = "[]"
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ArabicCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("IsDefault")
                        .HasDatabaseName("IX_Currencies_IsDefault");

                    b.ToTable("Currencies", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "YER",
                            ArabicCode = "ريال",
                            ArabicName = "الريال اليمني",
                            IsDefault = true,
                            Name = "Yemeni Rial"
                        },
                        new
                        {
                            Code = "USD",
                            ArabicCode = "دولار",
                            ArabicName = "الدولار الأمريكي",
                            ExchangeRate = 0.004m,
                            IsDefault = false,
                            LastUpdated = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6817),
                            Name = "US Dollar"
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollapsible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsExpandedByDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitTypeId", "SortOrder")
                        .HasDatabaseName("IX_FieldGroups_PropertyTypeId_SortOrder");

                    b.ToTable("FieldGroups", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroupField", b =>
                {
                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FieldId", "GroupId");

                    b.HasIndex("FieldId")
                        .HasDatabaseName("IX_FieldGroupFields_FieldId");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("IX_FieldGroupFields_GroupId");

                    b.ToTable("FieldGroupFields", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.IndexMetadata", b =>
                {
                    b.Property<string>("IndexType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("نوع الفهرس - Index type identifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("تاريخ الإنشاء - Creation timestamp");

                    b.Property<long>("FileSizeBytes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasComment("حجم ملف الفهرس بالبايت - Index file size in bytes");

                    b.Property<string>("LastErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("رسالة الخطأ الأخيرة - Last error message");

                    b.Property<DateTime?>("LastOptimizationTime")
                        .HasColumnType("datetime2")
                        .HasComment("آخر وقت تحسين - Last optimization time");

                    b.Property<Guid?>("LastProcessedId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("آخر معرف تم معالجته - Last processed entity ID");

                    b.Property<DateTime>("LastUpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("آخر وقت تحديث للفهرس - Last index update time");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("معلومات إضافية بصيغة JSON - Additional metadata in JSON");

                    b.Property<int>("OperationsSinceOptimization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("عدد العمليات منذ آخر تحسين - Operations since last optimization");

                    b.Property<int>("RebuildAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("عدد محاولات إعادة البناء - Rebuild attempts count");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active")
                        .HasComment("حالة الفهرس - Index status");

                    b.Property<int>("TotalRecords")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("عدد السجلات في الفهرس - Total records in index");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("تاريخ آخر تعديل - Last update timestamp");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasComment("رقم الإصدار للتحكم في التزامن - Version for concurrency control");

                    b.HasKey("IndexType");

                    b.HasIndex("LastUpdateTime")
                        .HasDatabaseName("IX_IndexMetadata_LastUpdateTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_IndexMetadata_Status")
                        .HasFilter("[Status] = 'Active'");

                    b.HasIndex("Status", "LastUpdateTime")
                        .HasDatabaseName("IX_IndexMetadata_Status_LastUpdate")
                        .HasFilter("[Status] = 'Active'");

                    b.ToTable("IndexMetadata", null, t =>
                        {
                            t.HasCheckConstraint("CK_IndexMetadata_FileSizeBytes", "[FileSizeBytes] >= 0");

                            t.HasCheckConstraint("CK_IndexMetadata_RebuildAttempts", "[RebuildAttempts] >= 0");

                            t.HasCheckConstraint("CK_IndexMetadata_Status", "[Status] IN ('Active', 'Building', 'Error', 'Disabled', 'Optimizing')");

                            t.HasCheckConstraint("CK_IndexMetadata_TotalRecords", "[TotalRecords] >= 0");

                            t.HasCheckConstraint("CK_IndexMetadata_Version", "[Version] > 0");
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الرسالة");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("نوع التفاعل");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف المستخدم");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageReactions", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NotificationId");

                    b.Property<string>("ActionText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BatchId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("CanDismiss")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Channels")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDismissed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MessageAr")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SentChannels")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TitleAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentId")
                        .HasComment("معرف الدفع الفريد");

                    b.Property<string>("Amount_Currency")
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الحجز");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GatewayTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ الدفع");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProcessedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasComment("حالة الدفع");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("معرف المعاملة");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Amount_Currency");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_Payments_BookingId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Payments_IsDeleted");

                    b.HasIndex("MethodId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payments_Status");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Payments_TransactionId")
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("Payments", null, t =>
                        {
                            t.Property("Amount_Currency")
                                .HasColumnName("Payment_Amount_Currency");
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("FeePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FixedFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableForClients")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresVerification")
                        .HasColumnType("bit");

                    b.Property<string>("SupportedCountries")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SupportedCurrencies")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PricingRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PricingRuleId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PercentageChange")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PriceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PricingTier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Currency");

                    b.HasIndex("UnitId", "StartDate", "EndDate");

                    b.ToTable("PricingRules", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PropertyId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("BasePricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("Currency");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.HasIndex("Name", "City");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("هل المرفق متاح");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الكيان");

                    b.Property<Guid>("PtaId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف مرفق نوع الكيان");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PropertyAmenities_IsDeleted");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_PropertyAmenities_PropertyId");

                    b.HasIndex("PtaId")
                        .HasDatabaseName("IX_PropertyAmenities_PtaId");

                    b.HasIndex("PropertyId", "PtaId")
                        .IsUnique()
                        .HasDatabaseName("IX_PropertyAmenities_PropertyId_PtaId");

                    b.ToTable("PropertyAmenities", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageId")
                        .HasComment("معرف الصورة الفريد");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("وصف الصورة");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Downloads")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("هل هي الصورة الرئيسية");

                    b.Property<bool>("IsMainImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الكيان");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("TempKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("مفتاح مؤقت لرفع الصور قبل الربط");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("مسار الصورة");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TempKey");

                    b.HasIndex("UnitId");

                    b.ToTable("PropertyImages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PolicyId");

                    b.Property<int>("CancellationWindowDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("وصف السياسة");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MinHoursBeforeCheckIn")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumDepositPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الكيان");

                    b.Property<bool>("RequireFullPaymentBeforeConfirmation")
                        .HasColumnType("bit");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasComment("قواعد السياسة (JSON)");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasComment("نوع السياسة");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PropertyPolicies_IsDeleted");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_PropertyPolicies_PropertyId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_PropertyPolicies_PolicyType");

                    b.HasIndex("PropertyId", "Type")
                        .HasDatabaseName("IX_PropertyPolicies_PropertyId_PolicyType");

                    b.ToTable("PropertyPolicies", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServiceId")
                        .HasComment("معرف الخدمة الفريد");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("اسم الخدمة");

                    b.Property<int>("PricingModel")
                        .HasColumnType("int")
                        .HasComment("نموذج التسعير");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الكيان");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PropertyServices_IsDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_PropertyServices_Name");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_PropertyServices_PropertyId");

                    b.ToTable("PropertyServices", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultAmenities")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PropertyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4890),
                            DefaultAmenities = "[]",
                            Description = "فندق تقليدي بغرف وخدمات فندقية",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "فندق",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4890)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4903),
                            DefaultAmenities = "[]",
                            Description = "شاليه للعائلات والمجموعات",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "شاليه",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4903)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4906),
                            DefaultAmenities = "[]",
                            Description = "استراحة للإقامة المؤقتة",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "استراحة",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4907)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4912),
                            DefaultAmenities = "[]",
                            Description = "فيلا خاصة للإقامة الفاخرة",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "فيلا",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4912)
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4914),
                            DefaultAmenities = "[]",
                            Description = "شقة مفروشة للإقامة قصيرة أو طويلة المدى",
                            Icon = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "شقة",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 3, DateTimeKind.Utc).AddTicks(4914)
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyTypeAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PtaId");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PropertyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId")
                        .HasDatabaseName("IX_PropertyTypeAmenities_AmenityId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PropertyTypeAmenities_IsDeleted");

                    b.HasIndex("PropertyTypeId")
                        .HasDatabaseName("IX_PropertyTypeAmenities_PropertyTypeId");

                    b.HasIndex("PropertyTypeId", "AmenityId")
                        .IsUnique()
                        .HasDatabaseName("IX_PropertyTypeAmenities_PropertyTypeId_AmenityId");

                    b.ToTable("PropertyTypeAmenities", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionNote")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("ReportedPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReportedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReporterUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReportedPropertyId");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterUserId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف التقييم الفريد");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasComment("متوسط التقييم");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الحجز");

                    b.Property<int>("Cleanliness")
                        .HasColumnType("int")
                        .HasComment("تقييم النظافة");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasComment("تعليق التقييم");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ إنشاء التقييم");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<bool>("IsPendingApproval")
                        .HasColumnType("bit");

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasComment("تقييم الموقع");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الكيان");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Service")
                        .HasColumnType("int")
                        .HasComment("تقييم الخدمة");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasComment("تقييم القيمة");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("IX_Reviews_BookingId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Reviews_IsDeleted");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reviews", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reviews_Cleanliness", "[Cleanliness] >= 1 AND [Cleanliness] <= 5");

                            t.HasCheckConstraint("CK_Reviews_Location", "[Location] >= 1 AND [Location] <= 5");

                            t.HasCheckConstraint("CK_Reviews_Service", "[Service] >= 1 AND [Service] <= 5");

                            t.HasCheckConstraint("CK_Reviews_Value", "[Value] >= 1 AND [Value] <= 5");
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ReviewImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف الصورة الفريدة");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("نص بديل للصورة");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("تعليق توضيحي للصورة");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasComment("فئة الصورة");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("تاريخ الحذف");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("ترتيب العرض");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("حالة الحذف الناعم");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("هل هي الصورة الرئيسية");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("اسم الملف");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف التقييم المرتبط");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasComment("حجم الملف بالبايت");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("حالة الموافقة للصورة");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasComment("وسوم الصورة");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("نوع المحتوى");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ الرفع");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("مسار الصورة");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewImages", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ReviewResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("RespondedAt")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ إنشاء الرد");

                    b.Property<Guid>("RespondedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("المستخدم الذي قام بالرد");

                    b.Property<string>("RespondedByName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("اسم المجيب (منسوخ)");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasComment("نص الرد على التقييم");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("IX_ReviewResponses_ReviewId");

                    b.ToTable("ReviewResponses", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 57, 999, DateTimeKind.Utc).AddTicks(9358),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 57, 999, DateTimeKind.Utc).AddTicks(9359)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 57, 999, DateTimeKind.Utc).AddTicks(9371),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Owner",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 57, 999, DateTimeKind.Utc).AddTicks(9372)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 57, 999, DateTimeKind.Utc).AddTicks(9374),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Manager",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 57, 999, DateTimeKind.Utc).AddTicks(9374)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 57, 999, DateTimeKind.Utc).AddTicks(9394),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Customer",
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 57, 999, DateTimeKind.Utc).AddTicks(9394)
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SearchFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FilterId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilterOptions")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("FilterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FieldId")
                        .HasDatabaseName("IX_SearchFilters_FieldId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("SearchFilters", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SearchLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CriteriaJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int>("PageSize")
                        .HasColumnType("int");

                    b.Property<int>("ResultCount")
                        .HasColumnType("int");

                    b.Property<string>("SearchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SearchLogs", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SectionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UnitId");

                    b.HasIndex("SectionId", "PropertyId", "UnitId")
                        .IsUnique()
                        .HasFilter("[PropertyId] IS NOT NULL AND [UnitId] IS NOT NULL");

                    b.ToTable("SectionItems", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("int")
                        .HasComment("منصب الموظف");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Staff_IsDeleted");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_Staff_PropertyId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Staff_UserId");

                    b.HasIndex("UserId", "PropertyId")
                        .IsUnique()
                        .HasDatabaseName("IX_Staff_UserId_PropertyId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UnitId");

                    b.Property<int?>("AdultsCapacity")
                        .HasColumnType("int");

                    b.Property<int>("BookingCount")
                        .HasColumnType("int");

                    b.Property<int?>("ChildrenCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomFeatures")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PricingMethod")
                        .HasColumnType("int")
                        .HasComment("طريقة حساب السعر");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsAvailable")
                        .HasDatabaseName("IX_Units_IsAvailable");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Units_IsDeleted");

                    b.HasIndex("PricingMethod")
                        .HasDatabaseName("IX_Units_PricingMethod");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("IX_Units_PropertyId");

                    b.HasIndex("UnitTypeId")
                        .HasDatabaseName("IX_Units_UnitTypeId");

                    b.HasIndex("PropertyId", "Name")
                        .IsUnique();

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UnitId", "StartDate", "EndDate");

                    b.ToTable("UnitAvailability", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ValueId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitTypeFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_UnitFieldValues_UnitId");

                    b.HasIndex("UnitTypeFieldId")
                        .HasDatabaseName("IX_UnitFieldValues_FieldId");

                    b.ToTable("UnitFieldValues", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UnitTypeId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultPricingRules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHasAdults")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHasChildren")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiDays")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequiredToDetermineTheHour")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int")
                        .HasComment("الحد الأقصى للسعة");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("اسم نوع الوحدة");

                    b.Property<Guid>("PropertyTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("معرف نوع الكيان");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("Name", "PropertyTypeId")
                        .IsUnique();

                    b.ToTable("UnitTypes", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitTypeField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FieldId");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FieldOptions")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("FieldTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsForUnits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimaryFilter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSearchable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("ShowInCards")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ValidationRules")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("UnitTypeId", "FieldName")
                        .IsUnique()
                        .HasDatabaseName("IX_UnitTypeFields_PropertyTypeId_FieldName");

                    b.ToTable("UnitTypeFields", (string)null);
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("رمز تأكيد البريد الإلكتروني");

                    b.Property<DateTime?>("EmailConfirmationTokenExpires")
                        .HasColumnType("datetime")
                        .HasComment("انتهاء صلاحية رمز تأكيد البريد الإلكتروني");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("حالة تأكيد البريد الإلكتروني");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FavoritesJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasDefaultValue("[]")
                        .HasComment("قائمة مفضلة المستخدم بصيغة JSON");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasComment("تاريخ آخر تسجيل دخول");

                    b.Property<string>("LoyaltyTier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("رمز إعادة تعيين كلمة المرور");

                    b.Property<DateTime?>("PasswordResetTokenExpires")
                        .HasColumnType("datetime")
                        .HasComment("انتهاء صلاحية رمز إعادة تعيين كلمة المرور");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasDefaultValue("{}")
                        .HasComment("إعدادات المستخدم بصيغة JSON");

                    b.Property<decimal>("TotalSpent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Users_IsDeleted");

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_Users_Phone");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6723),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FavoritesJson = "[]",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailVerified = false,
                            LastLoginDate = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6725),
                            LoyaltyTier = "Gold",
                            Name = "Admin User",
                            Password = "Admin@123",
                            Phone = "1234567890",
                            ProfileImage = "",
                            ProfileImageUrl = "",
                            SettingsJson = "{}",
                            TotalSpent = 0m,
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6712)
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6738),
                            Email = "owner@example.com",
                            EmailConfirmed = true,
                            FavoritesJson = "[]",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailVerified = false,
                            LastLoginDate = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6739),
                            LoyaltyTier = "Silver",
                            Name = "Property Owner User",
                            Password = "Owner@123",
                            Phone = "0987654321",
                            ProfileImage = "",
                            ProfileImageUrl = "",
                            SettingsJson = "{}",
                            TotalSpent = 0m,
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6735)
                        });
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRoleId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_UserRoles_IsDeleted");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            AssignedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6904),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6904),
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6905)
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222"),
                            AssignedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6909),
                            CreatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6909),
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2025, 9, 3, 11, 59, 58, 127, DateTimeKind.Utc).AddTicks(6909)
                        });
                });

            modelBuilder.Entity("ChatConversationParticipant", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChatConversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.AdminAction", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.AuditLog", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Booking", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("TotalPrice_Currency")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("Bookings")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPrice_Amount")
                                .HasComment("مبلغ السعر الإجمالي");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalPrice_Currency")
                                .HasComment("عملة السعر الإجمالي");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("BookingId");

                            b1.ToTable("Bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId");
                        });

                    b.Navigation("TotalPrice")
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.BookingService", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PropertyService", "Service")
                        .WithMany("BookingServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("BookingServiceBookingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("BookingServiceServiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPrice_Amount")
                                .HasComment("مبلغ السعر الإجمالي للخدمة");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalPrice_Currency")
                                .HasComment("عملة السعر الإجمالي للخدمة");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("BookingServiceBookingId", "BookingServiceServiceId");

                            b1.ToTable("BookingServices");

                            b1.WithOwner()
                                .HasForeignKey("BookingServiceBookingId", "BookingServiceServiceId");
                        });

                    b.Navigation("Booking");

                    b.Navigation("Service");

                    b.Navigation("TotalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatAttachment", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChatMessage", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ChatMessageId");

                    b.HasOne("YemenBooking.Core.Entities.ChatConversation", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatConversation", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatMessage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChatConversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.ChatConversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId1");

                    b.HasOne("YemenBooking.Core.Entities.ChatMessage", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId");

                    b.HasOne("YemenBooking.Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroup", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitType", "UnitType")
                        .WithMany("FieldGroups")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroupField", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitTypeField", "UnitTypeField")
                        .WithMany("FieldGroupFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.FieldGroup", "FieldGroup")
                        .WithMany("FieldGroupFields")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldGroup");

                    b.Navigation("UnitTypeField");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.MessageReaction", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.ChatMessage", null)
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Notification", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Payment", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("Amount_Currency")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PaymentMethod", "Method")
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Payments_PaymentMethods_MethodId");

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount_Amount")
                                .HasComment("مبلغ الدفع");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Amount_Currency")
                                .HasComment("عملة الدفع");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PricingRule", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Currency", "CurrencyRef")
                        .WithMany()
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("PricingRules")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyRef");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Property", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.City", "CityRef")
                        .WithMany("Properties")
                        .HasForeignKey("City")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Currency", null)
                        .WithMany("Properties")
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CityRef");

                    b.Navigation("Owner");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyAmenity", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Amenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PropertyTypeAmenity", "PropertyTypeAmenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PtaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "ExtraCost", b1 =>
                        {
                            b1.Property<Guid>("PropertyAmenityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ExtraCost_Amount")
                                .HasComment("مبلغ التكلفة الإضافية");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("ExtraCost_Currency")
                                .HasComment("عملة التكلفة الإضافية");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PropertyAmenityId");

                            b1.ToTable("PropertyAmenities");

                            b1.WithOwner()
                                .HasForeignKey("PropertyAmenityId");
                        });

                    b.Navigation("ExtraCost")
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("PropertyTypeAmenity");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyImage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("Images")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyPolicy", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Policies")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyService", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Services")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("PropertyServiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price_Amount")
                                .HasComment("مبلغ سعر الخدمة");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Price_Currency")
                                .HasComment("عملة سعر الخدمة");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PropertyServiceId");

                            b1.ToTable("PropertyServices");

                            b1.WithOwner()
                                .HasForeignKey("PropertyServiceId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyTypeAmenity", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Amenity", "Amenity")
                        .WithMany("PropertyTypeAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.PropertyType", "PropertyType")
                        .WithMany("PropertyTypeAmenities")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Report", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "ReportedProperty")
                        .WithMany("Reports")
                        .HasForeignKey("ReportedPropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.User", "ReportedUser")
                        .WithMany("ReportsAgainstUser")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.User", "ReporterUser")
                        .WithMany("ReportsMade")
                        .HasForeignKey("ReporterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReportedProperty");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReporterUser");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Review", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ReviewImage", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Review", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ReviewResponse", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Review", "Review")
                        .WithMany("Responses")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SearchFilter", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitTypeField", "UnitTypeField")
                        .WithMany("SearchFilters")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.UnitType", null)
                        .WithMany("SearchFilters")
                        .HasForeignKey("UnitTypeId");

                    b.Navigation("UnitTypeField");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.SectionItem", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("SectionItems")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("YemenBooking.Core.Entities.Section", "Section")
                        .WithMany("Items")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("SectionItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Property");

                    b.Navigation("Section");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Staff", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Staff")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany("StaffPositions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Unit", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Property", "Property")
                        .WithMany("Units")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.UnitType", "UnitType")
                        .WithMany("Units")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("YemenBooking.Core.ValueObjects.Money", "BasePrice", b1 =>
                        {
                            b1.Property<Guid>("UnitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("BasePrice_Amount")
                                .HasComment("مبلغ السعر الأساسي");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("BasePrice_Currency")
                                .HasComment("عملة السعر الأساسي");

                            b1.Property<decimal>("ExchangeRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("UnitId");

                            b1.ToTable("Units");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");
                        });

                    b.Navigation("BasePrice")
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitAvailability", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Booking", "Booking")
                        .WithMany("Availabilities")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("UnitAvailabilities")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitFieldValue", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Unit", "Unit")
                        .WithMany("FieldValues")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.UnitTypeField", "UnitTypeField")
                        .WithMany("UnitFieldValues")
                        .HasForeignKey("UnitTypeFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("UnitTypeField");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitType", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.PropertyType", "PropertyType")
                        .WithMany("UnitTypes")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitTypeField", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.UnitType", "UnitType")
                        .WithMany("UnitTypeFields")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UserRole", b =>
                {
                    b.HasOne("YemenBooking.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemenBooking.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Amenity", b =>
                {
                    b.Navigation("PropertyTypeAmenities");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Booking", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("BookingServices");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatConversation", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.ChatMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.City", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Currency", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.FieldGroup", b =>
                {
                    b.Navigation("FieldGroupFields");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Property", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Images");

                    b.Navigation("Policies");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("SectionItems");

                    b.Navigation("Services");

                    b.Navigation("Staff");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyService", b =>
                {
                    b.Navigation("BookingServices");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyType", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("PropertyTypeAmenities");

                    b.Navigation("UnitTypes");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.PropertyTypeAmenity", b =>
                {
                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Review", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Section", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.Unit", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FieldValues");

                    b.Navigation("Images");

                    b.Navigation("PricingRules");

                    b.Navigation("SectionItems");

                    b.Navigation("UnitAvailabilities");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitType", b =>
                {
                    b.Navigation("FieldGroups");

                    b.Navigation("SearchFilters");

                    b.Navigation("UnitTypeFields");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.UnitTypeField", b =>
                {
                    b.Navigation("FieldGroupFields");

                    b.Navigation("SearchFilters");

                    b.Navigation("UnitFieldValues");
                });

            modelBuilder.Entity("YemenBooking.Core.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Properties");

                    b.Navigation("ReportsAgainstUser");

                    b.Navigation("ReportsMade");

                    b.Navigation("StaffPositions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
