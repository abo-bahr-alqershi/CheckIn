----- FILE: ./attachment_preview_widget.dart -----
import 'dart:math' as math;
import 'dart:ui';

import 'package:cached_network_image/cached_network_image.dart';
import 'package:just_audio/just_audio.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:bookn_cp_app/injection_container.dart';
import 'package:bookn_cp_app/services/local_storage_service.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../../../core/constants/storage_constants.dart';
import '../../../../core/utils/image_utils.dart';
import '../../domain/entities/attachment.dart';

class AttachmentPreviewWidget extends StatefulWidget {
  final Attachment attachment;
  final bool isMe;
  final VoidCallback? onTap;
  final VoidCallback? onDownload;
  // Optional override to force audio UI when server MIME is generic
  final bool forceAudio;

  const AttachmentPreviewWidget({
    super.key,
    required this.attachment,
    required this.isMe,
    this.onTap,
    this.onDownload,
    this.forceAudio = false,
  });

  @override
  State<AttachmentPreviewWidget> createState() =>
      _AttachmentPreviewWidgetState();
}

class _AttachmentPreviewWidgetState extends State<AttachmentPreviewWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _shimmerController;
  late Animation<double> _shimmerAnimation;
  ImageStream? _imageStream;
  ImageStreamListener? _imageStreamListener;
  Size? _displaySize;

  // Audio player for voice messages
  AudioPlayer? _audioPlayer;
  PlayerState? _playerState;
  Duration _position = Duration.zero;
  Duration _duration = Duration.zero;

  @override
  void initState() {
    super.initState();
    _shimmerController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );
    _shimmerAnimation = Tween<double>(
      begin: -1,
      end: 2,
    ).animate(CurvedAnimation(
      parent: _shimmerController,
      curve: Curves.easeInOutSine,
    ));

    if (widget.attachment.downloadProgress != null &&
        widget.attachment.downloadProgress! < 1.0) {
      _shimmerController.repeat();
    }
    _resolveImageDimensions();

    // Lazy init audio only when needed
  }

  @override
  void dispose() {
    _removeImageStreamListener();
    _shimmerController.dispose();
    _audioPlayer?.dispose();
    super.dispose();
  }

  @override
  void didUpdateWidget(covariant AttachmentPreviewWidget oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.attachment.fileUrl != widget.attachment.fileUrl) {
      _resolveImageDimensions();
    }
  }

  void _resolveImageDimensions() {
    _removeImageStreamListener();
    final resolvedUrl = ImageUtils.resolveUrl(widget.attachment.fileUrl);
    if (resolvedUrl.isEmpty) {
      setState(() {
        _displaySize = const Size(180, 180);
      });
      return;
    }

    final headers = _buildAuthHeaders();
    final provider = CachedNetworkImageProvider(resolvedUrl, headers: headers);
    final stream = provider.resolve(const ImageConfiguration());
    final listener = ImageStreamListener((imageInfo, _) {
      final width = imageInfo.image.width / imageInfo.scale;
      final height = imageInfo.image.height / imageInfo.scale;
      final constrained = _constrainSize(Size(width, height));
      if (mounted) {
        setState(() {
          _displaySize = constrained;
        });
      }
      _removeImageStreamListener();
    }, onError: (_, __) {
      _removeImageStreamListener();
    });

    stream.addListener(listener);
    _imageStream = stream;
    _imageStreamListener = listener;
  }

  void _removeImageStreamListener() {
    if (_imageStream != null && _imageStreamListener != null) {
      _imageStream!.removeListener(_imageStreamListener!);
    }
    _imageStream = null;
    _imageStreamListener = null;
  }

  Size _constrainSize(Size original) {
    const maxWidth = 300.0;
    const maxHeight = 300.0;
    double width = original.width;
    double height = original.height;

    if (width <= 0 || height <= 0) {
      return const Size(180, 180);
    }

    if (width > maxWidth || height > maxHeight) {
      final widthScale = maxWidth / width;
      final heightScale = maxHeight / height;
      final scale = math.min(widthScale, heightScale);
      width *= scale;
      height *= scale;
    }

    return Size(width, height);
  }

  Map<String, String>? _buildAuthHeaders() {
    try {
      final local = sl<LocalStorageService>();
      final token = local.getData(StorageConstants.accessToken) as String?;
      if (token != null && token.isNotEmpty) {
        return {'Authorization': 'Bearer $token'};
      }
    } catch (_) {}
    return null;
  }

  @override
  Widget build(BuildContext context) {
    if (widget.attachment.isImage) {
      return _buildImagePreview();
    } else if (widget.attachment.isVideo) {
      return _buildVideoPreview();
    } else if (widget.forceAudio || widget.attachment.isAudio) {
      return _buildAudioPreview();
    } else {
      return _buildDocumentPreview();
    }
  }

  Widget _buildImagePreview() {
    final size = _displaySize ?? const Size(180, 180);
    return GestureDetector(
      onTap: () {
        HapticFeedback.selectionClick();
        widget.onTap?.call();
      },
      child: ClipRRect(
        borderRadius: BorderRadius.circular(10),
        child: SizedBox(
          width: size.width,
          height: size.height,
          child: Stack(
            fit: StackFit.expand,
            children: [
              Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      widget.isMe
                          ? AppTheme.primaryBlue.withValues(alpha: 0.05)
                          : AppTheme.darkCard.withValues(alpha: 0.3),
                      widget.isMe
                          ? AppTheme.primaryPurple.withValues(alpha: 0.03)
                          : AppTheme.darkSurface.withValues(alpha: 0.2),
                    ],
                  ),
                ),
              ),
              CachedImageWidget(
                imageUrl: widget.attachment.fileUrl,
                fit: BoxFit.cover,
                width: size.width,
                height: size.height,
              ),
              if (widget.attachment.downloadProgress != null &&
                  widget.attachment.downloadProgress! < 1.0)
                _buildMinimalProgressOverlay(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildVideoPreview() {
    return GestureDetector(
      onTap: () {
        HapticFeedback.selectionClick();
        widget.onTap?.call();
      },
      child: Container(
        height: 160, // Reduced from 200
        margin: const EdgeInsets.all(6),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(10),
          child: Stack(
            fit: StackFit.expand,
            children: [
              // Thumbnail or placeholder
              if (widget.attachment.thumbnailUrl != null)
                CachedImageWidget(
                  imageUrl: widget.attachment.thumbnailUrl!,
                  fit: BoxFit.cover,
                )
              else
                Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        AppTheme.darkCard.withValues(alpha: 0.8),
                        AppTheme.darkSurface.withValues(alpha: 0.6),
                      ],
                    ),
                  ),
                  child: Icon(
                    Icons.videocam_rounded,
                    size: 32, // Reduced from 48
                    color: AppTheme.textMuted.withValues(alpha: 0.5),
                  ),
                ),

              // Glassmorphism play button
              Center(
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(20),
                  child: BackdropFilter(
                    filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
                    child: Container(
                      width: 44, // Reduced from 56
                      height: 44,
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [
                            Colors.white.withValues(alpha: 0.15),
                            Colors.white.withValues(alpha: 0.05),
                          ],
                        ),
                        borderRadius: BorderRadius.circular(22),
                        border: Border.all(
                          color: Colors.white.withValues(alpha: 0.2),
                          width: 0.5,
                        ),
                      ),
                      child: const Icon(
                        Icons.play_arrow_rounded,
                        color: Colors.white,
                        size: 24, // Reduced from 32
                      ),
                    ),
                  ),
                ),
              ),

              // Duration badge
              Positioned(
                bottom: 6,
                right: 6,
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(6),
                  child: BackdropFilter(
                    filter: ImageFilter.blur(sigmaX: 8, sigmaY: 8),
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 6,
                        vertical: 3,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.black.withValues(alpha: 0.4),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: Text(
                        _formatDuration(widget.attachment.duration),
                        style: AppTextStyles.caption.copyWith(
                          color: Colors.white,
                          fontSize: 10,
                        ),
                      ),
                    ),
                  ),
                ),
              ),

              if (widget.attachment.downloadProgress != null &&
                  widget.attachment.downloadProgress! < 1.0)
                _buildMinimalProgressOverlay(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAudioPreview() {
    _ensureAudioInitialized();
    final totalSeconds = widget.attachment.duration ?? _duration.inSeconds;
    final pos = _position;
    final dur = _duration.inMilliseconds > 0
        ? _duration
        : Duration(seconds: totalSeconds);
    final isPlaying = _playerState?.playing == true;

    return Container(
      margin: const EdgeInsets.all(6),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(10),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: Container(
            padding: const EdgeInsets.all(10), // Reduced from 12
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: widget.isMe
                    ? [
                        Colors.white.withValues(alpha: 0.08),
                        Colors.white.withValues(alpha: 0.04),
                      ]
                    : [
                        AppTheme.darkCard.withValues(alpha: 0.6),
                        AppTheme.darkCard.withValues(alpha: 0.3),
                      ],
              ),
              borderRadius: BorderRadius.circular(10),
              border: Border.all(
                color: widget.isMe
                    ? Colors.white.withValues(alpha: 0.1)
                    : AppTheme.darkBorder.withValues(alpha: 0.3),
                width: 0.5,
              ),
            ),
            child: Row(
              children: [
                // Play button
                GestureDetector(
                  onTap: () async {
                    HapticFeedback.selectionClick();
                    if (isPlaying) {
                      await _audioPlayer?.pause();
                    } else {
                      await _audioPlayer?.play();
                    }
                  },
                  child: Container(
                    width: 32, // Reduced from 40
                    height: 32,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: widget.isMe
                            ? [
                                Colors.white.withValues(alpha: 0.9),
                                Colors.white.withValues(alpha: 0.7)
                              ]
                            : [AppTheme.primaryBlue, AppTheme.primaryPurple],
                      ),
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: (widget.isMe
                                  ? Colors.white
                                  : AppTheme.primaryBlue)
                              .withValues(alpha: 0.2),
                          blurRadius: 8,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Icon(
                      isPlaying
                          ? Icons.pause_rounded
                          : Icons.play_arrow_rounded,
                      color: widget.isMe ? AppTheme.primaryBlue : Colors.white,
                      size: 18, // Reduced from 24
                    ),
                  ),
                ),
                const SizedBox(width: 10),

                // Waveform
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildUploadAwareWaveform(
                          widget.attachment.downloadProgress ?? 1.0),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Text(
                            _formatDuration(pos.inSeconds),
                            style: AppTextStyles.caption.copyWith(
                              color: widget.isMe
                                  ? Colors.white.withValues(alpha: 0.6)
                                  : AppTheme.textMuted.withValues(alpha: 0.7),
                              fontSize: 10,
                            ),
                          ),
                          const SizedBox(width: 6),
                          Expanded(
                            child: Slider(
                              value: (widget.attachment.downloadProgress !=
                                          null &&
                                      (widget.attachment.downloadProgress ??
                                              0) <
                                          1.0)
                                  ? (widget.attachment.downloadProgress!
                                      .clamp(0.0, 1.0))
                                  : (dur.inMilliseconds == 0
                                      ? 0
                                      : (pos.inMilliseconds
                                              .clamp(0, dur.inMilliseconds) /
                                          dur.inMilliseconds)),
                              onChanged: (v) async {
                                // أثناء الرفع نمنع السحب (لأن الملف غير متاح بعد)
                                if ((widget.attachment.downloadProgress ??
                                        1.0) <
                                    1.0) return;
                                if (dur.inMilliseconds > 0) {
                                  final target = Duration(
                                      milliseconds:
                                          (v * dur.inMilliseconds).toInt());
                                  await _audioPlayer?.seek(target);
                                }
                              },
                              min: 0,
                              max: 1,
                            ),
                          ),
                          const SizedBox(width: 6),
                          Text(
                            _formatDuration(dur.inSeconds),
                            style: AppTextStyles.caption.copyWith(
                              color: widget.isMe
                                  ? Colors.white.withValues(alpha: 0.6)
                                  : AppTheme.textMuted.withValues(alpha: 0.7),
                              fontSize: 10,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildUploadAwareWaveform(double progress) {
    return SizedBox(
      height: 24,
      child: AnimatedBuilder(
        animation: _shimmerAnimation,
        builder: (context, child) {
          return CustomPaint(
            painter: _MinimalWaveformPainter(
              color: widget.isMe ? Colors.white : AppTheme.primaryBlue,
              progress: progress,
              shimmerPosition: _shimmerAnimation.value,
            ),
            child: const SizedBox.expand(),
          );
        },
      ),
    );
  }

  void _ensureAudioInitialized() {
    if (_audioPlayer != null) return;
    _audioPlayer = AudioPlayer();

    // Build authenticated URL
    final resolvedUrl = ImageUtils.resolveUrl(widget.attachment.fileUrl);
    final headers = _buildAuthHeaders() ?? {};

    // Set audio source with headers
    _audioPlayer!
        .setAudioSource(AudioSource.uri(Uri.parse(resolvedUrl),
            headers: headers.isEmpty ? null : headers))
        .then((_) async {
      try {
        final d = await _audioPlayer!.durationStream.firstWhere(
          (d) => d != null,
          orElse: () => null,
        );
        if (d != null && mounted) setState(() => _duration = d);
      } catch (_) {}
    }).catchError((_) {});

    _audioPlayer!.playerStateStream.listen((s) {
      if (!mounted) return;
      setState(() => _playerState = s);
    });
    _audioPlayer!.positionStream.listen((p) {
      if (!mounted) return;
      setState(() => _position = p);
    });
    _audioPlayer!.durationStream.listen((d) {
      if (!mounted) return;
      if (d != null) setState(() => _duration = d);
    });
  }

  Widget _buildMinimalWaveform() {
    return SizedBox(
      height: 24, // Reduced from 30
      child: AnimatedBuilder(
        animation: _shimmerAnimation,
        builder: (context, child) {
          return CustomPaint(
            painter: _MinimalWaveformPainter(
              color: widget.isMe ? Colors.white : AppTheme.primaryBlue,
              progress: 0.0,
              shimmerPosition: _shimmerAnimation.value,
            ),
            child: const SizedBox.expand(),
          );
        },
      ),
    );
  }

  Widget _buildDocumentPreview() {
    return GestureDetector(
      onTap: () {
        HapticFeedback.selectionClick();
        widget.onTap?.call();
      },
      child: Container(
        margin: const EdgeInsets.all(6),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(10),
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 15, sigmaY: 15),
            child: Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: widget.isMe
                      ? [
                          Colors.white.withValues(alpha: 0.08),
                          Colors.white.withValues(alpha: 0.04),
                        ]
                      : [
                          AppTheme.darkCard.withValues(alpha: 0.6),
                          AppTheme.darkCard.withValues(alpha: 0.3),
                        ],
                ),
                borderRadius: BorderRadius.circular(10),
                border: Border.all(
                  color: widget.isMe
                      ? Colors.white.withValues(alpha: 0.1)
                      : AppTheme.darkBorder.withValues(alpha: 0.3),
                  width: 0.5,
                ),
              ),
              child: Row(
                children: [
                  // File icon
                  Container(
                    width: 38, // Reduced from 48
                    height: 38,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          _getFileIconColor().withValues(alpha: 0.15),
                          _getFileIconColor().withValues(alpha: 0.05),
                        ],
                      ),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Icon(
                      _getFileIcon(),
                      color: _getFileIconColor(),
                      size: 20, // Reduced from 24
                    ),
                  ),
                  const SizedBox(width: 10),

                  // File info
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          widget.attachment.fileName,
                          style: AppTextStyles.bodySmall.copyWith(
                            color:
                                widget.isMe ? Colors.white : AppTheme.textWhite,
                            fontWeight: FontWeight.w500,
                            fontSize: 12,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                        const SizedBox(height: 2),
                        Text(
                          '${widget.attachment.fileExtension.toUpperCase()} • ${_formatFileSize(widget.attachment.fileSize)}',
                          style: AppTextStyles.caption.copyWith(
                            color: widget.isMe
                                ? Colors.white.withValues(alpha: 0.5)
                                : AppTheme.textMuted.withValues(alpha: 0.6),
                            fontSize: 10,
                          ),
                        ),
                      ],
                    ),
                  ),

                  // Download button
                  if (widget.onDownload != null)
                    GestureDetector(
                      onTap: () {
                        HapticFeedback.selectionClick();
                        widget.onDownload!();
                      },
                      child: Container(
                        width: 28,
                        height: 28,
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [
                              AppTheme.primaryBlue.withValues(alpha: 0.1),
                              AppTheme.primaryPurple.withValues(alpha: 0.05),
                            ],
                          ),
                          shape: BoxShape.circle,
                        ),
                        child: Icon(
                          Icons.download_rounded,
                          color:
                              widget.isMe ? Colors.white : AppTheme.primaryBlue,
                          size: 16,
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildMinimalProgressOverlay() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.black.withValues(alpha: 0.3),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Center(
        child: SizedBox(
          width: 32,
          height: 32,
          child: CircularProgressIndicator(
            value: widget.attachment.downloadProgress,
            strokeWidth: 2,
            valueColor: AlwaysStoppedAnimation<Color>(
              Colors.white.withValues(alpha: 0.9),
            ),
            backgroundColor: Colors.white.withValues(alpha: 0.2),
          ),
        ),
      ),
    );
  }

  IconData _getFileIcon() {
    switch (widget.attachment.fileExtension.toLowerCase()) {
      case 'pdf':
        return Icons.picture_as_pdf_rounded;
      case 'doc':
      case 'docx':
        return Icons.description_rounded;
      case 'xls':
      case 'xlsx':
        return Icons.table_chart_rounded;
      case 'ppt':
      case 'pptx':
        return Icons.slideshow_rounded;
      case 'zip':
      case 'rar':
        return Icons.folder_zip_rounded;
      default:
        return Icons.insert_drive_file_rounded;
    }
  }

  Color _getFileIconColor() {
    switch (widget.attachment.fileExtension.toLowerCase()) {
      case 'pdf':
        return const Color(0xFFE74C3C);
      case 'doc':
      case 'docx':
        return const Color(0xFF2E86DE);
      case 'xls':
      case 'xlsx':
        return const Color(0xFF27AE60);
      case 'ppt':
      case 'pptx':
        return const Color(0xFFF39C12);
      case 'zip':
      case 'rar':
        return const Color(0xFF9B59B6);
      default:
        return AppTheme.textMuted;
    }
  }

  String _formatDuration(int? seconds) {
    if (seconds == null) return '0:00';
    final minutes = seconds ~/ 60;
    final remainingSeconds = seconds % 60;
    return '$minutes:${remainingSeconds.toString().padLeft(2, '0')}';
  }

  String _formatFileSize(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    if (bytes < 1024 * 1024 * 1024) {
      return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
    }
    return '${(bytes / (1024 * 1024 * 1024)).toStringAsFixed(1)} GB';
  }
}

class _MinimalWaveformPainter extends CustomPainter {
  final Color color;
  final double progress;
  final double shimmerPosition;

  _MinimalWaveformPainter({
    required this.color,
    required this.progress,
    this.shimmerPosition = 0,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color.withValues(alpha: 0.2)
      ..strokeWidth = 1.5
      ..strokeCap = StrokeCap.round;

    final progressPaint = Paint()
      ..color = color.withValues(alpha: 0.8)
      ..strokeWidth = 1.5
      ..strokeCap = StrokeCap.round;

    const barCount = 25; // Reduced from 30
    final barWidth = size.width / barCount;

    for (int i = 0; i < barCount; i++) {
      final x = i * barWidth + barWidth / 2;
      final normalizedPosition = (i / barCount - shimmerPosition).abs();
      final shimmerOpacity =
          normalizedPosition < 0.2 ? 1.0 - (normalizedPosition * 5) : 0.0;

      // Create more elegant wave pattern
      final waveHeight = (i % 3 == 0
              ? 0.2
              : i % 2 == 0
                  ? 0.4
                  : 0.6) *
          size.height;
      final y1 = (size.height - waveHeight) / 2;
      final y2 = y1 + waveHeight;

      final isProgressed = i / barCount <= progress;
      final currentPaint = isProgressed ? progressPaint : paint;

      if (shimmerOpacity > 0) {
        final shimmerPaint = Paint()
          ..color = color.withValues(alpha: 0.2 + shimmerOpacity * 0.3)
          ..strokeWidth = 1.5
          ..strokeCap = StrokeCap.round;
        canvas.drawLine(Offset(x, y1), Offset(x, y2), shimmerPaint);
      } else {
        canvas.drawLine(Offset(x, y1), Offset(x, y2), currentPaint);
      }
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}

----- FILE: ./audio_message_widget.dart -----
import 'dart:async';
import 'dart:math' as math;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:just_audio/just_audio.dart';
import 'package:bookn_cp_app/injection_container.dart';
import 'package:bookn_cp_app/services/local_storage_service.dart';
import '../../../../core/constants/storage_constants.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/utils/image_utils.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/attachment.dart';

class AudioMessageWidget extends StatefulWidget {
  final Attachment attachment;
  final bool isMe;
  final Color bubbleColor;
  final Color waveformColor;
  final String? senderName;
  final String? senderAvatar;

  const AudioMessageWidget({
    super.key,
    required this.attachment,
    required this.isMe,
    required this.bubbleColor,
    required this.waveformColor,
    this.senderName,
    this.senderAvatar,
  });

  @override
  State<AudioMessageWidget> createState() => _AudioMessageWidgetState();
}

class _AudioMessageWidgetState extends State<AudioMessageWidget>
    with TickerProviderStateMixin {
  AudioPlayer? _audioPlayer;
  late AnimationController _playPauseAnimationController;
  late AnimationController _waveAnimationController;
  late Animation<double> _playPauseAnimation;

  bool _isPlaying = false;
  bool _isLoading = false;
  bool _hasError = false;
  bool _isPaused = false;
  bool _isPlayerInitialized = false;
  Duration _position = Duration.zero;
  Duration _duration = Duration.zero;
  double _uploadProgress = 0.0;
  double _playbackSpeed = 1.0;
  Timer? _progressTimer;

  // WhatsApp-style waveform data
  List<double> _waveformData = [];
  static const int _waveformBars = 27; // عدد أعمدة الموجة كما في WhatsApp

  @override
  void initState() {
    super.initState();

    _uploadProgress = _resolveUploadProgress(widget.attachment);
    final initialDuration = _extractInitialDuration(widget.attachment);
    if (initialDuration != null) {
      _duration = initialDuration;
    }

    // توليد بيانات الموجة الصوتية
    _generateWaveformData();

    _playPauseAnimationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );

    _waveAnimationController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );

    _playPauseAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _playPauseAnimationController,
      curve: Curves.easeInOut,
    ));

    if (_uploadProgress >= 1.0) {
      _initializeAudio();
    } else if (widget.attachment.downloadProgress != null) {
      _startProgressTimer();
    }
  }

  @override
  void didUpdateWidget(covariant AudioMessageWidget oldWidget) {
    super.didUpdateWidget(oldWidget);

    final hasDifferentAttachment =
        widget.attachment.id != oldWidget.attachment.id;
    final fileUrlChanged =
        widget.attachment.fileUrl != oldWidget.attachment.fileUrl;
    final newProgress = _resolveUploadProgress(widget.attachment);
    final progressChanged = (newProgress - _uploadProgress).abs() > 0.005;
    final newDuration = _extractInitialDuration(widget.attachment);
    final shouldUpdateDuration = newDuration != null &&
        (_duration == Duration.zero ||
            (newDuration - _duration).inMilliseconds.abs() >= 200);

    if (hasDifferentAttachment || fileUrlChanged) {
      _progressTimer?.cancel();
      _audioPlayer?.dispose();
      _audioPlayer = null;
      _isPlayerInitialized = false;
      _isPlaying = false;
      _isPaused = false;
      _position = Duration.zero;
    }

    if (progressChanged ||
        shouldUpdateDuration ||
        hasDifferentAttachment ||
        fileUrlChanged) {
      setState(() {
        _uploadProgress = newProgress;
        if (newDuration != null) {
          _duration = newDuration;
        }
        if (hasDifferentAttachment || fileUrlChanged) {
          _hasError = false;
          _isLoading = false;
        }
      });

      if (_uploadProgress >= 1.0) {
        _initializeAudio(forceReset: hasDifferentAttachment || fileUrlChanged);
      } else if (widget.attachment.downloadProgress != null) {
        _startProgressTimer();
      } else {
        _progressTimer?.cancel();
      }
    }
  }

  void _generateWaveformData() {
    final random = math.Random();
    _waveformData = List.generate(_waveformBars, (index) {
      // توليد موجات أكثر واقعية مثل WhatsApp
      if (index < 3 || index > _waveformBars - 3) {
        return 0.2 + random.nextDouble() * 0.2;
      } else if (index > _waveformBars ~/ 3 && index < 2 * _waveformBars ~/ 3) {
        return 0.5 + random.nextDouble() * 0.5;
      } else {
        return 0.3 + random.nextDouble() * 0.4;
      }
    });
  }

  void _startProgressTimer() {
    _progressTimer?.cancel();
    if (_uploadProgress >= 1.0) {
      _initializeAudio();
      return;
    }

    _progressTimer = Timer.periodic(const Duration(milliseconds: 120), (timer) {
      if (!mounted) {
        timer.cancel();
        return;
      }

      final targetProgress = widget.attachment.downloadProgress;
      final desiredProgress = targetProgress != null
          ? targetProgress.clamp(0.0, 1.0)
          : _uploadProgress + 0.01;

      if (_uploadProgress < 1.0) {
        setState(() {
          _uploadProgress = math.min(desiredProgress.toDouble(), 1.0);
        });
      }

      if (_uploadProgress >= 1.0) {
        timer.cancel();
        _initializeAudio();
      }
    });
  }

  Future<void> _initializeAudio({bool forceReset = false}) async {
    if (!mounted) return;
    if (_uploadProgress < 1.0) return;

    final playableUrl = _resolvePlayableUrl();
    if (playableUrl == null) {
      return;
    }

    if (_isPlayerInitialized && !forceReset) {
      return;
    }

    if (forceReset && _audioPlayer != null) {
      await _audioPlayer?.dispose();
      _audioPlayer = null;
    }

    _audioPlayer ??= AudioPlayer();

    try {
      if (mounted) {
        setState(() {
          _isLoading = true;
          _hasError = false;
        });
      }

      final resolvedUrl = _normalizePlayableUrl(playableUrl);
      final headers = _buildAuthHeaders() ?? {};

      await _audioPlayer!.setAudioSource(
        AudioSource.uri(
          Uri.parse(resolvedUrl),
          headers: headers.isEmpty ? null : headers,
        ),
      );

      _isPlayerInitialized = true;

      // Get duration if available
      final duration = await _audioPlayer!.durationStream.firstWhere(
        (d) => d != null,
        orElse: () => null,
      );

      if (duration != null && mounted) {
        setState(() {
          _duration = duration;
          _isLoading = false;
        });
      }

      // Listen to position changes
      _audioPlayer!.positionStream.listen((position) {
        if (mounted) {
          setState(() => _position = position);
        }
      });

      // Listen to player state
      _audioPlayer!.playerStateStream.listen((state) {
        if (mounted) {
          setState(() {
            _isPlaying = state.playing;
            _isPaused = !state.playing && _position.inSeconds > 0;

            if (state.processingState == ProcessingState.ready) {
              _isLoading = false;
              _hasError = false;
            }

            if (state.processingState == ProcessingState.completed) {
              _position = Duration.zero;
              _audioPlayer?.seek(Duration.zero);
              _audioPlayer?.pause();
              _playPauseAnimationController.reverse();
            } else if (state.processingState == ProcessingState.loading) {
              _isLoading = true;
            }
          });

          if (_isPlaying) {
            _waveAnimationController.repeat();
            _playPauseAnimationController.forward();
          } else {
            _waveAnimationController.stop();
            _playPauseAnimationController.reverse();
          }
        }
      });

      // Listen to speed changes
      _audioPlayer!.speedStream.listen((speed) {
        if (mounted) {
          setState(() => _playbackSpeed = speed);
        }
      });
    } catch (e) {
      if (mounted) {
        setState(() {
          _hasError = true;
          _isLoading = false;
          _isPlayerInitialized = false;
        });
      }
    }
  }

  double _resolveUploadProgress(Attachment attachment) {
    final progress = attachment.downloadProgress;
    final fileUrl = attachment.fileUrl.trim();
    final fallbackUrl = attachment.url.trim();
    final hasRemoteUrl = fileUrl.isNotEmpty || fallbackUrl.isNotEmpty;

    if (progress != null) {
      if (progress >= 1.0) {
        return 1.0;
      }
      if (progress <= 0 && hasRemoteUrl) {
        return 1.0;
      }
      return progress.clamp(0.0, 1.0);
    }

    return hasRemoteUrl ? 1.0 : 0.0;
  }

  Duration? _extractInitialDuration(Attachment attachment) {
    num? seconds = attachment.duration;

    seconds ??= _tryParseNum(attachment.metadata?['duration']);
    seconds ??= _tryParseNum(attachment.metadata?['durationSeconds']);
    seconds ??= _tryParseNum(attachment.metadata?['length']);
    seconds ??= _tryParseNum(attachment.metadata?['audioDuration']);

    num? milliseconds = _tryParseNum(attachment.metadata?['durationMs']) ??
        _tryParseNum(attachment.metadata?['durationMilliseconds']);

    if ((seconds == null || seconds <= 0) &&
        milliseconds != null &&
        milliseconds > 0) {
      seconds = milliseconds / 1000;
    }

    if (seconds == null || seconds <= 0) {
      return null;
    }

    if (seconds > 3600 * 24) {
      // Likely in milliseconds already
      return Duration(milliseconds: seconds.round());
    }

    return Duration(milliseconds: (seconds * 1000).round());
  }

  double? _tryParseNum(dynamic value) {
    if (value == null) return null;
    if (value is num) return value.toDouble();
    if (value is String) {
      return double.tryParse(value.trim());
    }
    return null;
  }

  String? _resolvePlayableUrl() {
    final fileUrl = widget.attachment.fileUrl.trim();
    if (fileUrl.isNotEmpty) {
      return fileUrl;
    }

    final url = widget.attachment.url.trim();
    if (url.isNotEmpty) {
      return url;
    }

    final filePath = widget.attachment.filePath.trim();
    if (filePath.isNotEmpty) {
      final uri = Uri.tryParse(filePath);
      if (uri != null && uri.hasScheme) {
        return filePath;
      }
      return Uri.file(filePath).toString();
    }

    return null;
  }

  String _normalizePlayableUrl(String playableUrl) {
    final lower = playableUrl.toLowerCase();
    if (lower.startsWith('http://') || lower.startsWith('https://')) {
      return playableUrl;
    }
    if (lower.startsWith('file://')) {
      return playableUrl;
    }
    return ImageUtils.resolveUrl(playableUrl);
  }

  Map<String, String>? _buildAuthHeaders() {
    try {
      final local = sl<LocalStorageService>();
      final token = local.getData(StorageConstants.accessToken) as String?;
      if (token != null && token.isNotEmpty) {
        return {'Authorization': 'Bearer $token'};
      }
    } catch (_) {}
    return null;
  }

  void _togglePlayback() async {
    if (_isLoading || _hasError || _uploadProgress < 1.0) return;

    HapticFeedback.lightImpact();

    if (_isPlaying) {
      await _audioPlayer?.pause();
    } else {
      await _audioPlayer?.play();
    }
  }

  void _changePlaybackSpeed() async {
    if (_audioPlayer == null) return;

    HapticFeedback.selectionClick();

    // Cycle through speeds: 1x -> 1.5x -> 2x -> 1x
    double newSpeed;
    if (_playbackSpeed == 1.0) {
      newSpeed = 1.5;
    } else if (_playbackSpeed == 1.5) {
      newSpeed = 2.0;
    } else {
      newSpeed = 1.0;
    }

    await _audioPlayer!.setSpeed(newSpeed);
  }

  void _seek(double value) async {
    if (_audioPlayer == null || _duration.inMilliseconds == 0) return;

    final position = Duration(
      milliseconds: (value * _duration.inMilliseconds).toInt(),
    );
    await _audioPlayer!.seek(position);
  }

  @override
  void dispose() {
    _progressTimer?.cancel();
    _playPauseAnimationController.dispose();
    _waveAnimationController.dispose();
    _audioPlayer?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.only(
        left: 8,
        right: 12,
        top: 6,
        bottom: 8,
      ),
      child: Column(
        children: [
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Avatar or Mic icon (WhatsApp style)
              _buildAvatarSection(),
              const SizedBox(width: 8),
              // Main content
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Sender name if not me
                    if (!widget.isMe && widget.senderName != null) ...[
                      Text(
                        widget.senderName!,
                        style: AppTextStyles.caption.copyWith(
                          color: const Color(0xFF06CF9C),
                          fontSize: 11,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 4),
                    ],
                    // Audio controls and waveform
                    Row(
                      children: [
                        // Play/Pause button
                        _buildPlayPauseButton(),
                        const SizedBox(width: 8),
                        // Waveform and progress
                        Expanded(
                          child: _uploadProgress < 1.0
                              ? _buildUploadProgress()
                              : _buildWaveformSection(),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
          // Duration and speed controls
          if (_uploadProgress >= 1.0) _buildBottomControls(),
        ],
      ),
    );
  }

  Widget _buildAvatarSection() {
    const size = 34.0;

    if (widget.isMe) {
      // Microphone icon for sent messages
      return Container(
        width: size,
        height: size,
        decoration: const BoxDecoration(
          shape: BoxShape.circle,
          color: Color(0xFF128C7E),
        ),
        child: const Icon(
          Icons.mic,
          color: Colors.white,
          size: 18,
        ),
      );
    } else if (widget.senderAvatar != null && widget.senderAvatar!.isNotEmpty) {
      // Sender avatar
      return ClipOval(
        child: CachedImageWidget(
          imageUrl: widget.senderAvatar!,
          width: size,
          height: size,
          fit: BoxFit.cover,
          removeContainer: true,
        ),
      );
    } else {
      // Default avatar with initial
      final initial = widget.senderName?.isNotEmpty == true
          ? widget.senderName![0].toUpperCase()
          : 'U';

      return Container(
        width: size,
        height: size,
        decoration: const BoxDecoration(
          shape: BoxShape.circle,
          color: Color(0xFF667781),
        ),
        child: Center(
          child: Text(
            initial,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
      );
    }
  }

  Widget _buildPlayPauseButton() {
    final isUploading = _uploadProgress < 1.0;
    final iconColor =
        widget.isMe ? const Color(0xFF8696A0) : const Color(0xFF8696A0);

    return GestureDetector(
      onTap: isUploading || _hasError || _isLoading ? null : _togglePlayback,
      child: Container(
        width: 36,
        height: 36,
        decoration: const BoxDecoration(
          shape: BoxShape.circle,
          color: Colors.transparent,
        ),
        child: Stack(
          alignment: Alignment.center,
          children: [
            if (isUploading)
              SizedBox(
                width: 28,
                height: 28,
                child: CircularProgressIndicator(
                  value: _uploadProgress,
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(iconColor),
                  backgroundColor: iconColor.withValues(alpha: 0.2),
                ),
              )
            else if (_isLoading)
              SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(iconColor),
                ),
              )
            else if (_hasError)
              const Icon(
                Icons.error_outline_rounded,
                color: Color(0xFFEF4444),
                size: 24,
              )
            else
              AnimatedIcon(
                icon: AnimatedIcons.play_pause,
                progress: _playPauseAnimation,
                color: iconColor,
                size: 28,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildUploadProgress() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        LinearProgressIndicator(
          value: _uploadProgress,
          backgroundColor: widget.waveformColor.withValues(alpha: 0.2),
          valueColor: AlwaysStoppedAnimation<Color>(widget.waveformColor),
          minHeight: 2,
        ),
        const SizedBox(height: 4),
        Text(
          'جاري الرفع... ${(_uploadProgress * 100).toInt()}%',
          style: AppTextStyles.caption.copyWith(
            color: widget.waveformColor.withValues(alpha: 0.7),
            fontSize: 10,
          ),
        ),
      ],
    );
  }

  Widget _buildWaveformSection() {
    final progress = _duration.inMilliseconds > 0
        ? _position.inMilliseconds / _duration.inMilliseconds
        : 0.0;

    return GestureDetector(
      onTapDown: (details) {
        final RenderBox box = context.findRenderObject() as RenderBox;
        final localX = details.localPosition.dx;
        final width = box.size.width - 98; // Account for button and padding
        final seekValue = (localX / width).clamp(0.0, 1.0);
        _seek(seekValue);
      },
      onHorizontalDragUpdate: (details) {
        final RenderBox box = context.findRenderObject() as RenderBox;
        final localX = details.localPosition.dx;
        final width = box.size.width - 98;
        final seekValue = (localX / width).clamp(0.0, 1.0);
        _seek(seekValue);
      },
      child: SizedBox(
        height: 30,
        child: CustomPaint(
          painter: _WhatsAppWaveformPainter(
            waveformData: _waveformData,
            progress: progress,
            activeColor:
                widget.isMe ? const Color(0xFF054640) : const Color(0xFF06CF9C),
            inactiveColor: widget.isMe
                ? const Color(0xFF8696A0).withValues(alpha: 0.4)
                : const Color(0xFF8696A0).withValues(alpha: 0.3),
            isPlaying: _isPlaying,
            animationValue: _waveAnimationController.value,
          ),
          child: const SizedBox.expand(),
        ),
      ),
    );
  }

  Widget _buildBottomControls() {
    return Padding(
      padding: const EdgeInsets.only(top: 4, left: 42),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Current time / Duration
          Row(
            children: [
              Text(
                _formatDuration(
                    _isPlaying || _isPaused ? _position : _duration),
                style: AppTextStyles.caption.copyWith(
                  color: (widget.isMe
                          ? const Color(0xFF8696A0)
                          : const Color(0xFF8696A0))
                      .withValues(alpha: 0.9),
                  fontSize: 11,
                ),
              ),
              if (!_isPlaying && !_isPaused && _duration.inSeconds > 0) ...[
                Text(
                  ' / ',
                  style: AppTextStyles.caption.copyWith(
                    color: const Color(0xFF8696A0).withValues(alpha: 0.6),
                    fontSize: 11,
                  ),
                ),
                Text(
                  widget.attachment.formattedFileSize,
                  style: AppTextStyles.caption.copyWith(
                    color: const Color(0xFF8696A0).withValues(alpha: 0.6),
                    fontSize: 10,
                  ),
                ),
              ],
            ],
          ),
          // Playback speed button
          if (_isPlaying || _isPaused)
            GestureDetector(
              onTap: _changePlaybackSpeed,
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: const Color(0xFF8696A0).withValues(alpha: 0.15),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Text(
                  '${_playbackSpeed}x',
                  style: AppTextStyles.caption.copyWith(
                    color: const Color(0xFF8696A0),
                    fontSize: 10,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }

  String _formatDuration(Duration duration) {
    final minutes = duration.inMinutes;
    final seconds = duration.inSeconds % 60;
    return '$minutes:${seconds.toString().padLeft(2, '0')}';
  }
}

// WhatsApp-style waveform painter
class _WhatsAppWaveformPainter extends CustomPainter {
  final List<double> waveformData;
  final double progress;
  final Color activeColor;
  final Color inactiveColor;
  final bool isPlaying;
  final double animationValue;

  _WhatsAppWaveformPainter({
    required this.waveformData,
    required this.progress,
    required this.activeColor,
    required this.inactiveColor,
    required this.isPlaying,
    required this.animationValue,
  });

  @override
  void paint(Canvas canvas, Size size) {
    const barWidth = 2.0; // عرض العمود كما في WhatsApp
    const barSpacing = 2.0; // المسافة بين الأعمدة
    const totalBarWidth = barWidth + barSpacing;
    final barCount = waveformData.length;
    final maxBarHeight = size.height * 0.8;

    for (int i = 0; i < barCount; i++) {
      final x = i * totalBarWidth;
      final normalizedIndex = i / barCount;

      // حساب ارتفاع العمود
      double heightMultiplier = waveformData[i];

      // إضافة تأثير حركي للعمود الحالي أثناء التشغيل
      if (isPlaying) {
        final distanceFromProgress = (normalizedIndex - progress).abs();
        if (distanceFromProgress < 0.05) {
          final pulse = math.sin(animationValue * math.pi * 2) * 0.15;
          heightMultiplier = (heightMultiplier + pulse).clamp(0.2, 1.0);
        }
      }

      final barHeight = maxBarHeight * heightMultiplier;
      final y = (size.height - barHeight) / 2;

      // رسم العمود
      final paint = Paint()
        ..color = normalizedIndex <= progress ? activeColor : inactiveColor
        ..strokeWidth = barWidth
        ..strokeCap = StrokeCap.round;

      canvas.drawLine(
        Offset(x + barWidth / 2, y),
        Offset(x + barWidth / 2, y + barHeight),
        paint,
      );
    }

    // رسم مؤشر التقدم (دائرة صغيرة)
    if (progress > 0 && progress < 1) {
      final indicatorX = progress * (barCount * totalBarWidth);
      final indicatorPaint = Paint()
        ..color = activeColor
        ..style = PaintingStyle.fill;

      canvas.drawCircle(
        Offset(indicatorX, size.height / 2),
        3,
        indicatorPaint,
      );
    }
  }

  @override
  bool shouldRepaint(covariant _WhatsAppWaveformPainter oldDelegate) {
    return oldDelegate.progress != progress ||
        oldDelegate.isPlaying != isPlaying ||
        oldDelegate.animationValue != animationValue;
  }
}

----- FILE: ./chat_app_bar.dart -----
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:ui';
import 'dart:math' as math;
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_dimensions.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/conversation.dart';

class ChatAppBar extends StatefulWidget implements PreferredSizeWidget {
  final Conversation conversation;
  final String currentUserId;
  final VoidCallback onBackPressed;
  final VoidCallback onInfoPressed;
  final VoidCallback? onCallPressed;
  final VoidCallback? onVideoCallPressed;

  const ChatAppBar({
    super.key,
    required this.conversation,
    required this.currentUserId,
    required this.onBackPressed,
    required this.onInfoPressed,
    this.onCallPressed,
    this.onVideoCallPressed,
  });

  @override
  Size get preferredSize => const Size.fromHeight(52); // Reduced from 56

  @override
  State<ChatAppBar> createState() => _ChatAppBarState();
}

class _ChatAppBarState extends State<ChatAppBar> 
    with SingleTickerProviderStateMixin {
  late AnimationController _glowController;
  late Animation<double> _glowAnimation;

  @override
  void initState() {
    super.initState();
    _glowController = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    )..repeat(reverse: true);
    
    _glowAnimation = Tween<double>(
      begin: 0.3,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _glowController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _glowController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final otherParticipant = widget.conversation.isDirectChat
        ? widget.conversation.getOtherParticipant(widget.currentUserId)
        : null;

    final displayName = widget.conversation.title ??
        otherParticipant?.name ??
        'محادثة';

    final displayImage = widget.conversation.avatar ??
        otherParticipant?.profileImage;

    final statusText = _getStatusText();

    return ClipRRect(
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 15, sigmaY: 15),
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [
                AppTheme.darkCard.withValues(alpha: 0.85),
                AppTheme.darkCard.withValues(alpha: 0.8),
              ],
            ),
            border: Border(
              bottom: BorderSide(
                color: AppTheme.darkBorder.withValues(alpha: 0.05),
                width: 0.5,
              ),
            ),
          ),
          child: SafeArea(
            child: Container(
              height: 52,
              padding: const EdgeInsets.symmetric(horizontal: 4),
              child: Row(
                children: [
                  // Back button - Premium minimal style
                  _buildMinimalIconButton(
                    icon: Icons.arrow_back_ios_new_rounded,
                    onPressed: widget.onBackPressed,
                    size: 16,
                  ),
                  
                  const SizedBox(width: 6),
                  
                  // User info - Compact and elegant
                  Expanded(
                    child: GestureDetector(
                      onTap: () {
                        HapticFeedback.lightImpact();
                        widget.onInfoPressed();
                      },
                      behavior: HitTestBehavior.opaque,
                      child: Row(
                        children: [
                          _buildPremiumAvatar(displayImage, displayName),
                          const SizedBox(width: 8),
                          Expanded(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  displayName,
                                  style: AppTextStyles.bodyMedium.copyWith(
                                    fontWeight: FontWeight.w600,
                                    fontSize: 13,
                                    color: AppTheme.textWhite.withValues(alpha: 0.9),
                                  ),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                if (statusText != null)
                                  AnimatedDefaultTextStyle(
                                    duration: const Duration(milliseconds: 200),
                                    style: AppTextStyles.caption.copyWith(
                                      color: _getStatusColor(),
                                      fontSize: 9,
                                    ),
                                    child: Text(
                                      statusText,
                                      maxLines: 1,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  
                  // Action buttons - Minimal style
                  if (widget.onCallPressed != null)
                    _buildMinimalIconButton(
                      icon: Icons.call_rounded,
                      onPressed: widget.onCallPressed!,
                      size: 18,
                    ),
                  if (widget.onVideoCallPressed != null)
                    _buildMinimalIconButton(
                      icon: Icons.videocam_rounded,
                      onPressed: widget.onVideoCallPressed!,
                      size: 18,
                    ),
                  _buildMinimalIconButton(
                    icon: Icons.more_vert_rounded,
                    onPressed: widget.onInfoPressed,
                    size: 18,
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildMinimalIconButton({
    required IconData icon,
    required VoidCallback onPressed,
    required double size,
  }) {
    return GestureDetector(
      onTap: () {
        HapticFeedback.lightImpact();
        onPressed();
      },
      child: Container(
        width: 32, // Reduced from 36
        height: 32,
        margin: const EdgeInsets.symmetric(horizontal: 2),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.white.withValues(alpha: 0.03),
              Colors.white.withValues(alpha: 0.01),
            ],
          ),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(
                          color: Colors.white.withValues(alpha: 0.05),
            width: 0.5,
          ),
        ),
        child: Icon(
          icon,
          size: size,
                          color: AppTheme.textWhite.withValues(alpha: 0.7),
        ),
      ),
    );
  }

  Widget _buildPremiumAvatar(String? imageUrl, String name) {
    return AnimatedBuilder(
      animation: _glowAnimation,
      builder: (context, child) {
        return Stack(
          children: [
            Container(
              width: 34, // Reduced from 36
              height: 34,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                gradient: LinearGradient(
                  colors: [
                                  AppTheme.primaryBlue.withValues(alpha: 0.08),
              AppTheme.primaryPurple.withValues(alpha: 0.04),
                  ],
                ),
                border: Border.all(
                  color: AppTheme.primaryBlue.withValues(alpha: 0.15),
                  width: 0.5,
                ),
                boxShadow: [
                  BoxShadow(
                    color: AppTheme.primaryBlue.withValues(alpha:
                      0.05 * _glowAnimation.value,
                    ),
                    blurRadius: 8,
                    spreadRadius: 0.5,
                  ),
                ],
              ),
              child: imageUrl != null
                  ? ClipOval(
                      child: CachedImageWidget(
                        imageUrl: imageUrl,
                        width: 34,
                        height: 34,
                        fit: BoxFit.cover,
                      ),
                    )
                  : Center(
                      child: Text(
                        _getInitials(name),
                        style: AppTextStyles.caption.copyWith(
                          color: AppTheme.primaryBlue.withValues(alpha: 0.8),
                          fontWeight: FontWeight.w600,
                          fontSize: 11,
                        ),
                      ),
                    ),
            ),
            if (widget.conversation.isDirectChat)
              Positioned(
                bottom: 0,
                right: 0,
                child: _buildMinimalOnlineIndicator(),
              ),
          ],
        );
      },
    );
  }

  Widget _buildMinimalOnlineIndicator() {
    final otherParticipant = widget.conversation.getOtherParticipant(widget.currentUserId);
    if (otherParticipant == null || !otherParticipant.isOnline) {
      return const SizedBox.shrink();
    }

    return AnimatedBuilder(
      animation: _glowAnimation,
      builder: (context, child) {
        return Container(
          width: 7, // Reduced from 8
          height: 7,
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                              AppTheme.success.withValues(alpha: 0.9),
              AppTheme.neonGreen.withValues(alpha: 0.7),
              ],
            ),
            shape: BoxShape.circle,
            border: Border.all(
              color: AppTheme.darkCard,
              width: 1.2,
            ),
            boxShadow: [
              BoxShadow(
                color: AppTheme.success.withValues(alpha:
                  0.3 + 0.1 * _glowAnimation.value,
                ),
                blurRadius: 3 + 2 * _glowAnimation.value,
                spreadRadius: 0.3,
              ),
            ],
          ),
        );
      },
    );
  }

  String? _getStatusText() {
    if (widget.conversation.isDirectChat) {
      final otherParticipant = widget.conversation.getOtherParticipant(widget.currentUserId);
      if (otherParticipant == null) return null;
      
      if (otherParticipant.isOnline) {
        return 'متصل';
      } else if (otherParticipant.lastSeen != null) {
        return _formatLastSeen(otherParticipant.lastSeen!);
      }
    } else {
      final onlineCount = widget.conversation.participants
          .where((p) => p.isOnline && p.id != widget.currentUserId)
          .length;
      if (onlineCount > 0) {
        return '$onlineCount متصل';
      }
    }
    return null;
  }

  Color _getStatusColor() {
    final otherParticipant = widget.conversation.isDirectChat
        ? widget.conversation.getOtherParticipant(widget.currentUserId)
        : null;
    
    if (otherParticipant?.isOnline == true) {
      return AppTheme.success.withValues(alpha: 0.8);
    }
    return AppTheme.textMuted.withValues(alpha: 0.6);
  }

  String _formatLastSeen(DateTime lastSeen) {
    final now = DateTime.now();
    final difference = now.difference(lastSeen);
    
    if (difference.inMinutes < 1) {
      return 'الآن';
    } else if (difference.inMinutes < 60) {
      return 'منذ ${difference.inMinutes}د';
    } else if (difference.inHours < 24) {
      return 'منذ ${difference.inHours}س';
    } else if (difference.inDays == 1) {
      return 'أمس';
    } else {
      return 'منذ ${difference.inDays}ي';
    }
  }

  String _getInitials(String name) {
    final parts = name.trim().split(' ');
    if (parts.isEmpty) return '';
    if (parts.length == 1) return parts.first[0].toUpperCase();
    return '${parts.first[0]}${parts.last[0]}'.toUpperCase();
  }
}
----- FILE: ./chat_fab.dart -----
// lib/features/chat/presentation/widgets/chat_fab.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:ui';
import 'dart:math' as math;
import '../../../../core/theme/app_theme.dart';

class ChatFAB extends StatefulWidget {
  final VoidCallback onPressed;

  const ChatFAB({
    super.key,
    required this.onPressed,
  });

  @override
  State<ChatFAB> createState() => _ChatFABState();
}

class _ChatFABState extends State<ChatFAB> with TickerProviderStateMixin {
  late AnimationController _scaleController;
  late AnimationController _rotationController;
  late AnimationController _pulseController;
  
  late Animation<double> _scaleAnimation;
  late Animation<double> _rotationAnimation;
  late Animation<double> _pulseAnimation;
  
  bool _isPressed = false;

  @override
  void initState() {
    super.initState();
    
    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );

    _rotationController = AnimationController(
      duration: const Duration(seconds: 10),
      vsync: this,
    );

    _pulseController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);

    _scaleAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _scaleController,
      curve: Curves.easeOutCubic,
    ));

    _rotationAnimation = Tween<double>(
      begin: 0,
      end: 2 * math.pi,
    ).animate(CurvedAnimation(
      parent: _rotationController,
      curve: Curves.linear,
    ));

    _pulseAnimation = Tween<double>(
      begin: 0.95,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _pulseController,
      curve: Curves.easeInOut,
    ));

    _scaleController.forward();
  }

  @override
  void dispose() {
    _scaleController.dispose();
    _rotationController.dispose();
    _pulseController.dispose();
    super.dispose();
  }

  void _handleTap() {
    HapticFeedback.lightImpact();
    _rotationController.forward(from: 0);
    widget.onPressed();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: Listenable.merge([
        _scaleAnimation,
        _pulseAnimation,
        _rotationAnimation,
      ]),
      builder: (context, child) {
        return Transform.scale(
          scale: _scaleAnimation.value * (_isPressed ? 0.95 : 1.0),
          child: GestureDetector(
            onTapDown: (_) => setState(() => _isPressed = true),
            onTapUp: (_) {
              setState(() => _isPressed = false);
              _handleTap();
            },
            onTapCancel: () => setState(() => _isPressed = false),
            child: Container(
              width: 48,
              height: 48,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  // Ultra subtle glow
                  AnimatedContainer(
                    duration: const Duration(milliseconds: 200),
                    width: 48,
                    height: 48,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: AppTheme.primaryBlue.withValues(alpha: _isPressed ? 0.3 : 0.15),
                          blurRadius: _isPressed ? 20 : 15,
                          spreadRadius: _isPressed ? 2 : 0,
                        ),
                      ],
                    ),
                  ),
                  
                  // Ultra minimal glass FAB
                  ClipOval(
                    child: BackdropFilter(
                      filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
                      child: Container(
                        width: 48,
                        height: 48,
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                            colors: [
                              AppTheme.primaryBlue.withValues(alpha: 0.8),
                              AppTheme.primaryPurple.withValues(alpha: 0.6),
                            ],
                          ),
                          shape: BoxShape.circle,
                          border: Border.all(
                            color: Colors.white.withValues(alpha: 0.1),
                            width: 0.5,
                          ),
                        ),
                        child: Center(
                          child: Transform.rotate(
                            angle: _rotationAnimation.value * 0.5,
                            child: Icon(
                              Icons.add_rounded,
                              color: Colors.white.withValues(alpha: 0.95),
                              size: 20,
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  
                  // Ultra subtle pulse ring
                  if (!_isPressed)
                    Transform.scale(
                      scale: _pulseAnimation.value,
                      child: Container(
                        width: 48,
                        height: 48,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          border: Border.all(
                            color: AppTheme.primaryBlue.withValues(alpha: 0.1 * (1 - _pulseAnimation.value)
                            ),
                            width: 1,
                          ),
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}
----- FILE: ./chat_search_bar.dart -----
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:ui';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';

class ChatSearchBar extends StatefulWidget {
  final Function(String) onSearch;
  final VoidCallback? onClear;
  final String? hintText;
  final bool autofocus;

  const ChatSearchBar({
    super.key,
    required this.onSearch,
    this.onClear,
    this.hintText,
    this.autofocus = false,
  });

  @override
  State<ChatSearchBar> createState() => _ChatSearchBarState();
}

class _ChatSearchBarState extends State<ChatSearchBar> 
    with SingleTickerProviderStateMixin {
  final TextEditingController _controller = TextEditingController();
  final FocusNode _focusNode = FocusNode();
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  Timer? _debounceTimer;
  bool _hasText = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _fadeAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutQuart,
    );
    
    _controller.addListener(_onTextChanged);
    _animationController.forward();
    
    if (widget.autofocus) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _focusNode.requestFocus();
      });
    }
  }

  @override
  void dispose() {
    _debounceTimer?.cancel();
    _controller.dispose();
    _focusNode.dispose();
    _animationController.dispose();
    super.dispose();
  }

  void _onTextChanged() {
    final hasText = _controller.text.isNotEmpty;
    if (hasText != _hasText) {
      setState(() {
        _hasText = hasText;
      });
    }

    _debounceTimer?.cancel();
    _debounceTimer = Timer(const Duration(milliseconds: 300), () {
      widget.onSearch(_controller.text);
    });
  }

  void _clearSearch() {
    HapticFeedback.selectionClick();
    _controller.clear();
    widget.onClear?.call();
    _focusNode.unfocus();
  }

  @override
  Widget build(BuildContext context) {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Container(
        height: 42, // Reduced from 48
        margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(12),
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    AppTheme.darkCard.withValues(alpha: 0.6),
                    AppTheme.darkCard.withValues(alpha: 0.4),
                  ],
                ),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: _focusNode.hasFocus
                      ? AppTheme.primaryBlue.withValues(alpha: 0.3)
                      : AppTheme.darkBorder.withValues(alpha: 0.2),
                  width: 0.5,
                ),
              ),
              child: Row(
                children: [
                  // Search icon with animation
                  AnimatedContainer(
                    duration: const Duration(milliseconds: 200),
                    padding: const EdgeInsets.symmetric(horizontal: 12),
                    child: Icon(
                      Icons.search_rounded,
                      color: _focusNode.hasFocus 
                          ? AppTheme.primaryBlue.withValues(alpha: 0.8)
                          : AppTheme.textMuted.withValues(alpha: 0.5),
                      size: 20,
                    ),
                  ),
                  
                  // Input field
                  Expanded(
                    child: TextField(
                      controller: _controller,
                      focusNode: _focusNode,
                      autofocus: widget.autofocus,
                      style: AppTextStyles.bodySmall.copyWith(
                        fontSize: 13,
                        color: AppTheme.textWhite,
                      ),
                      decoration: InputDecoration(
                        hintText: widget.hintText ?? 'البحث...',
                        hintStyle: AppTextStyles.bodySmall.copyWith(
                          color: AppTheme.textMuted.withValues(alpha: 0.4),
                          fontSize: 13,
                        ),
                        border: InputBorder.none,
                        contentPadding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      textInputAction: TextInputAction.search,
                      onSubmitted: widget.onSearch,
                    ),
                  ),
                  
                  // Clear button with animation
                  AnimatedSwitcher(
                    duration: const Duration(milliseconds: 200),
                    transitionBuilder: (child, animation) {
                      return ScaleTransition(
                        scale: animation,
                        child: FadeTransition(
                          opacity: animation,
                          child: child,
                        ),
                      );
                    },
                    child: _hasText
                        ? GestureDetector(
                            key: const ValueKey('clear'),
                            onTap: _clearSearch,
                            child: Container(
                              padding: const EdgeInsets.all(8),
                              margin: const EdgeInsets.only(right: 4),
                              decoration: BoxDecoration(
                                color: AppTheme.primaryBlue.withValues(alpha: 0.1),
                                shape: BoxShape.circle,
                              ),
                              child: Icon(
                                Icons.close_rounded,
                                color: AppTheme.textMuted.withValues(alpha: 0.6),
                                size: 14,
                              ),
                            ),
                          )
                        : const SizedBox(
                            key: ValueKey('empty'),
                            width: 8,
                          ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
----- FILE: ./conversation_item_widget.dart -----
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/conversation.dart';

class ConversationItemWidget extends StatelessWidget {
  final Conversation conversation;
  final String currentUserId;
  final List<String> typingUserIds;
  final VoidCallback onTap;
  final VoidCallback? onLongPress;

  const ConversationItemWidget({
    super.key,
    required this.conversation,
    required this.currentUserId,
    this.typingUserIds = const [],
    required this.onTap,
    this.onLongPress,
  });

  @override
  Widget build(BuildContext context) {
    final otherParticipant = conversation.isDirectChat
        ? conversation.getOtherParticipant(currentUserId)
        : null;

    final String displayName =
        (conversation.isDirectChat && otherParticipant != null)
            ? otherParticipant.name
            : (conversation.title ?? 'محادثة');

    final displayImage = conversation.avatar ?? otherParticipant?.profileImage;
    final isTyping = typingUserIds.isNotEmpty;

    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: () {
          HapticFeedback.selectionClick();
          onTap();
        },
        onLongPress: onLongPress != null
            ? () {
                HapticFeedback.lightImpact();
                onLongPress!();
              }
            : null,
        borderRadius: BorderRadius.circular(0),
        child: Container(
          padding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 10,
          ),
          decoration: BoxDecoration(
            gradient: conversation.hasUnreadMessages
                ? LinearGradient(
                    colors: [
                      AppTheme.primaryBlue.withValues(alpha: 0.03),
                      AppTheme.primaryPurple.withValues(alpha: 0.02),
                    ],
                  )
                : null,
            border: Border(
              bottom: BorderSide(
                color: AppTheme.darkBorder.withValues(alpha: 0.03),
                width: 0.5,
              ),
              left: conversation.hasUnreadMessages
                  ? BorderSide(
                      color: AppTheme.primaryBlue.withValues(alpha: 0.6),
                      width: 3,
                    )
                  : BorderSide.none,
            ),
          ),
          child: Row(
            children: [
              _buildUltraMinimalAvatar(displayImage, displayName),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            displayName,
                            style: AppTextStyles.bodyMedium.copyWith(
                              fontWeight: conversation.hasUnreadMessages
                                  ? FontWeight.w600
                                  : FontWeight.w500,
                              fontSize: 13,
                              color: AppTheme.textWhite.withValues(
                                  alpha: conversation.hasUnreadMessages
                                      ? 0.95
                                      : 0.8),
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                        if (conversation.isMuted)
                          Padding(
                            padding: const EdgeInsets.only(left: 6),
                            child: Icon(
                              Icons.notifications_off,
                              size: 10,
                              color: AppTheme.textMuted.withValues(alpha: 0.3),
                            ),
                          ),
                        const SizedBox(width: 8),
                        Text(
                          _formatTime(conversation.lastMessage?.createdAt ??
                              conversation.updatedAt),
                          style: AppTextStyles.caption.copyWith(
                            color: conversation.hasUnreadMessages
                                ? AppTheme.primaryBlue.withValues(alpha: 0.7)
                                : AppTheme.textMuted.withValues(alpha: 0.4),
                            fontSize: 10,
                            fontWeight: conversation.hasUnreadMessages
                                ? FontWeight.w600
                                : FontWeight.w400,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Row(
                      children: [
                        if (conversation.lastMessage != null &&
                            conversation.lastMessage!.senderId == currentUserId)
                          _buildUltraMinimalStatus(
                              conversation.lastMessage!.status),
                        Expanded(
                          child: isTyping
                              ? _buildUltraMinimalTyping()
                              : _buildUltraMinimalLastMessage(),
                        ),
                        if (conversation.hasUnreadMessages)
                          _buildUltraMinimalBadge(),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildUltraMinimalAvatar(String? imageUrl, String name) {
    return Stack(
      children: [
        Container(
          width: 42,
          height: 42,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            gradient: conversation.hasUnreadMessages
                ? LinearGradient(
                    colors: [
                      AppTheme.primaryBlue.withValues(alpha: 0.1),
                      AppTheme.primaryPurple.withValues(alpha: 0.05),
                    ],
                  )
                : null,
            color: !conversation.hasUnreadMessages
                ? AppTheme.darkCard.withValues(alpha: 0.05)
                : null,
            border: Border.all(
              color: conversation.hasUnreadMessages
                  ? AppTheme.primaryBlue.withValues(alpha: 0.2)
                  : AppTheme.darkBorder.withValues(alpha: 0.05),
              width: 0.5,
            ),
          ),
          child: ClipOval(
            child: imageUrl != null
                ? CachedImageWidget(
                    imageUrl: imageUrl,
                    width: 42,
                    height: 42,
                    fit: BoxFit.cover,
                  )
                : Center(
                    child: Text(
                      _getInitials(name),
                      style: AppTextStyles.bodySmall.copyWith(
                        color: conversation.hasUnreadMessages
                            ? AppTheme.primaryBlue.withValues(alpha: 0.7)
                            : AppTheme.textMuted.withValues(alpha: 0.5),
                        fontWeight: FontWeight.w600,
                        fontSize: 14,
                      ),
                    ),
                  ),
          ),
        ),
        if (conversation.isDirectChat &&
            conversation.getOtherParticipant(currentUserId)?.isOnline == true)
          Positioned(
            bottom: 1,
            right: 1,
            child: Container(
              width: 8,
              height: 8,
              decoration: BoxDecoration(
                color: AppTheme.success.withValues(alpha: 0.9),
                shape: BoxShape.circle,
                border: Border.all(
                  color: AppTheme.darkBackground,
                  width: 1.5,
                ),
              ),
            ),
          ),
      ],
    );
  }

  Widget _buildUltraMinimalStatus(String status) {
    IconData icon;
    Color color;
    double size = 12;

    switch (status) {
      case 'sent':
        icon = Icons.check;
        color = AppTheme.textMuted.withValues(alpha: 0.3);
        break;
      case 'delivered':
        icon = Icons.done_all;
        color = AppTheme.textMuted.withValues(alpha: 0.3);
        break;
      case 'read':
        icon = Icons.done_all;
        color = AppTheme.primaryBlue.withValues(alpha: 0.6);
        break;
      case 'failed':
        icon = Icons.error_outline;
        color = AppTheme.error.withValues(alpha: 0.6);
        size = 11;
        break;
      default:
        icon = Icons.schedule;
        color = AppTheme.textMuted.withValues(alpha: 0.2);
        size = 11;
    }

    return Padding(
      padding: const EdgeInsets.only(right: 4),
      child: Icon(
        icon,
        size: size,
        color: color,
      ),
    );
  }

  // FIX المشكلة 3: عرض صورة مصغرة بدلاً من رابط
  Widget _buildUltraMinimalLastMessage() {
    if (conversation.lastMessage == null) {
      return Text(
        'ابدأ المحادثة',
        style: AppTextStyles.caption.copyWith(
          color: AppTheme.textMuted.withValues(alpha: 0.3),
          fontStyle: FontStyle.italic,
          fontSize: 11,
        ),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      );
    }

    final lastMessage = conversation.lastMessage!;
    String messageText = '';
    Widget? prefix;
    Widget? thumbnail;

    // FIX: معالجة رسائل الصور بشكل صحيح
    final isImageMessage = lastMessage.messageType == 'image';
    final hasImageAttachments = lastMessage.attachments.isNotEmpty &&
        lastMessage.attachments.any((att) => att.isImage);

    if (isImageMessage || hasImageAttachments) {
      String? thumbnailUrl;

      // أولاً: حاول الحصول على الصورة من attachments
      if (hasImageAttachments) {
        final firstImage = lastMessage.attachments.firstWhere(
          (att) => att.isImage,
          orElse: () => lastMessage.attachments.first,
        );
        thumbnailUrl =
            firstImage.thumbnailUrl ?? firstImage.fileUrl ?? firstImage.url;
      }

      // ثانياً: إذا لم توجد attachments، تحقق من content (قد يحتوي على URL مباشر)
      if (thumbnailUrl == null &&
          lastMessage.content != null &&
          lastMessage.content!.isNotEmpty) {
        final content = lastMessage.content!;
        // تحقق إذا كان المحتوى يبدو كـ URL صورة
        if (content.startsWith('http') &&
            (content.contains('.jpg') ||
                content.contains('.jpeg') ||
                content.contains('.png') ||
                content.contains('.gif') ||
                content.contains('.webp') ||
                content.contains('image'))) {
          thumbnailUrl = content;
        }
      }

      // عرض الصورة المصغرة إذا وُجدت
      if (thumbnailUrl != null && thumbnailUrl.isNotEmpty) {
        thumbnail = Container(
          width: 32,
          height: 32,
          margin: const EdgeInsets.only(right: 4),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(6),
            border: Border.all(
              color: conversation.hasUnreadMessages
                  ? AppTheme.primaryBlue.withValues(alpha: 0.3)
                  : AppTheme.darkBorder.withValues(alpha: 0.2),
              width: 0.5,
            ),
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(5.5),
            child: CachedImageWidget(
              imageUrl: thumbnailUrl,
              fit: BoxFit.cover,
              removeContainer: true,
            ),
          ),
        );
      }

      // النص المرافق
      messageText = lastMessage.attachments.length > 1
          ? '${lastMessage.attachments.length} صور'
          : 'صورة';

      prefix = Icon(
        Icons.image,
        size: 12,
        color: AppTheme.textMuted.withValues(alpha: 0.3),
      );
    } else {
      // معالجة الأنواع الأخرى
      switch (lastMessage.messageType) {
        case 'text':
          messageText = lastMessage.content ?? '';
          // التحقق من وجود رد
          if (lastMessage.replyToMessageId != null) {
            prefix = Container(
              padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
              margin: const EdgeInsets.only(right: 4),
              decoration: BoxDecoration(
                color: AppTheme.primaryBlue.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(
                    Icons.reply,
                    size: 10,
                    color: AppTheme.primaryBlue.withValues(alpha: 0.7),
                  ),
                  const SizedBox(width: 2),
                  Text(
                    'رد',
                    style: AppTextStyles.caption.copyWith(
                      fontSize: 9,
                      color: AppTheme.primaryBlue.withValues(alpha: 0.7),
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
            );
          }
          break;
        case 'video':
          prefix = Icon(Icons.videocam,
              size: 12, color: AppTheme.textMuted.withValues(alpha: 0.3));
          messageText = 'فيديو';
          break;
        case 'audio':
          prefix = Icon(Icons.mic,
              size: 12, color: AppTheme.textMuted.withValues(alpha: 0.3));
          messageText = 'رسالة صوتية';
          break;
        case 'document':
          prefix = Icon(Icons.attach_file,
              size: 12, color: AppTheme.textMuted.withValues(alpha: 0.3));
          messageText = 'مستند';
          break;
        case 'location':
          prefix = Icon(Icons.location_on,
              size: 12, color: AppTheme.textMuted.withValues(alpha: 0.3));
          messageText = 'موقع';
          break;
        default:
          messageText = lastMessage.content ?? '';
      }
    }

    return Row(
      children: [
        if (thumbnail != null) thumbnail,
        if (prefix != null && thumbnail == null) ...[
          prefix,
          const SizedBox(width: 4),
        ],
        Expanded(
          child: Text(
            messageText,
            style: AppTextStyles.caption.copyWith(
              color: conversation.hasUnreadMessages
                  ? AppTheme.textWhite.withValues(alpha: 0.7)
                  : AppTheme.textMuted.withValues(alpha: 0.4),
              fontSize: 11,
              fontWeight: conversation.hasUnreadMessages
                  ? FontWeight.w500
                  : FontWeight.w400,
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ),
      ],
    );
  }

  Widget _buildUltraMinimalTyping() {
    return Row(
      children: [
        Text(
          'يكتب',
          style: AppTextStyles.caption.copyWith(
            color: AppTheme.primaryBlue.withValues(alpha: 0.6),
            fontStyle: FontStyle.italic,
            fontSize: 11,
          ),
        ),
        const SizedBox(width: 4),
        SizedBox(
          width: 12,
          height: 6,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: List.generate(3, (index) {
              return TweenAnimationBuilder<double>(
                tween: Tween(begin: 0.3, end: 1),
                duration: Duration(milliseconds: 300 + (index * 100)),
                curve: Curves.easeInOut,
                builder: (context, value, child) {
                  return Container(
                    width: 2,
                    height: 2,
                    decoration: BoxDecoration(
                      color:
                          AppTheme.primaryBlue.withValues(alpha: value * 0.6),
                      shape: BoxShape.circle,
                    ),
                  );
                },
                onEnd: () {},
              );
            }),
          ),
        ),
      ],
    );
  }

  Widget _buildUltraMinimalBadge() {
    return Container(
      padding: const EdgeInsets.symmetric(
        horizontal: 5,
        vertical: 2,
      ),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            AppTheme.primaryBlue.withValues(alpha: 0.8),
            AppTheme.primaryPurple.withValues(alpha: 0.6),
          ],
        ),
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: AppTheme.primaryBlue.withValues(alpha: 0.3),
            blurRadius: 4,
            offset: const Offset(0, 1),
          ),
        ],
      ),
      constraints: const BoxConstraints(
        minWidth: 14,
        minHeight: 14,
      ),
      child: Center(
        child: Text(
          conversation.unreadCount > 99
              ? '99+'
              : conversation.unreadCount.toString(),
          style: AppTextStyles.caption.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.w600,
            fontSize: 8,
          ),
        ),
      ),
    );
  }

  String _formatTime(DateTime dateTime) {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final yesterday = today.subtract(const Duration(days: 1));
    final messageDate = DateTime(
      dateTime.year,
      dateTime.month,
      dateTime.day,
    );

    if (messageDate == today) {
      return '${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
    } else if (messageDate == yesterday) {
      return 'أمس';
    } else if (now.difference(dateTime).inDays < 7) {
      final days = [
        'الأحد',
        'الإثنين',
        'الثلاثاء',
        'الأربعاء',
        'الخميس',
        'الجمعة',
        'السبت'
      ];
      return days[dateTime.weekday % 7];
    } else {
      return '${dateTime.day}/${dateTime.month}';
    }
  }

  String _getInitials(String name) {
    final parts = name.trim().split(' ');
    if (parts.isEmpty) return '؟';
    if (parts.length == 1) {
      return parts.first.isNotEmpty ? parts.first[0].toUpperCase() : '؟';
    }
    return '${parts.first[0]}${parts.last[0]}'.toUpperCase();
  }
}

----- FILE: ./conversation_loader.dart -----
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:bookn_cp_app/core/theme/app_theme.dart';
import 'package:bookn_cp_app/core/theme/app_text_styles.dart';
import 'package:bookn_cp_app/features/chat/presentation/bloc/chat_bloc.dart';
import 'package:bookn_cp_app/features/chat/presentation/pages/chat_page.dart';

class ConversationLoader extends StatefulWidget {
  final String conversationId;
  
  const ConversationLoader({super.key, required this.conversationId});
  
  @override
  State<ConversationLoader> createState() => ConversationLoaderState();
}

class ConversationLoaderState extends State<ConversationLoader> {
  @override
  void initState() {
    super.initState();
    _loadConversation();
  }
  
  void _loadConversation() {
    // حمل المحادثة من ChatBloc
    final chatBloc = context.read<ChatBloc>();
    final state = chatBloc.state;
    
    if (state is ChatLoaded) {
      final conversation = state.conversations.firstWhere(
        (c) => c.id == widget.conversationId,
        orElse: () => throw Exception('Conversation not found'),
      );
      
      // انتقل للصفحة مع المحادثة
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (_) => ChatPage(conversation: conversation),
          ),
        );
      });
    } else {
      // إذا لم تكن المحادثات محملة، حملها أولاً
      chatBloc.add(const LoadConversationsEvent());
    }
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.darkBackground,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryBlue),
            ),
            const SizedBox(height: 16),
            Text(
              'جاري تحميل المحادثة...',
              style: AppTextStyles.bodySmall.copyWith(
                color: AppTheme.textMuted,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
----- FILE: ./expandable_image_viewer.dart -----
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:ui';
import 'package:photo_view/photo_view.dart';
import 'package:photo_view/photo_view_gallery.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/attachment.dart';
import 'reaction_picker_widget.dart';

class ExpandableImageViewer extends StatefulWidget {
  final List<Attachment> images;
  final int initialIndex;
  final Function(String)? onReaction; // message-level reaction
  final void Function(Attachment)? onReply;
  // Optional: initial reactions by attachment id to render overlay per image
  final Map<String, String>? initialReactionsByAttachment;
  // Optional: per-attachment reaction callback to sync overlay with parent
  final void Function(Attachment, String)? onReactForAttachment;

  const ExpandableImageViewer({
    super.key,
    required this.images,
    this.initialIndex = 0,
    this.onReaction,
    this.onReply,
    this.initialReactionsByAttachment,
    this.onReactForAttachment,
  });

  @override
  State<ExpandableImageViewer> createState() => _ExpandableImageViewerState();
}

class _ExpandableImageViewerState extends State<ExpandableImageViewer> {
  late int _currentIndex;
  late final PageController _pageController;
  final Map<String, String> _imageReactions = {};
  bool _showReactionPicker = false;

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.initialIndex.clamp(0, widget.images.length - 1);
    _pageController = PageController(initialPage: _currentIndex);
    // Seed with initial per-attachment reactions if provided
    if (widget.initialReactionsByAttachment != null) {
      _imageReactions.addAll(widget.initialReactionsByAttachment!);
    }
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          GestureDetector(
            onDoubleTap: () {
              final current = widget.images[_currentIndex];
              setState(() {
                _imageReactions[current.id] = 'like';
              });
              // message-level reaction
              widget.onReaction?.call('like');
              // per-attachment overlay sync
              widget.onReactForAttachment?.call(current, 'like');
            },
            onLongPress: () {
              HapticFeedback.lightImpact();
              _showImageOptions();
            },
            child: PhotoViewGallery.builder(
              pageController: _pageController,
              itemCount: widget.images.length,
              onPageChanged: (index) => setState(() => _currentIndex = index),
              builder: (context, index) {
                final image = widget.images[index];
                return PhotoViewGalleryPageOptions.customChild(
                  child: CachedImageWidget(
                    imageUrl: image.fileUrl,
                    fit: BoxFit.contain,
                    removeContainer: true,
                  ),
                  initialScale: PhotoViewComputedScale.contained,
                  minScale: PhotoViewComputedScale.contained,
                  maxScale: PhotoViewComputedScale.covered * 3.0,
                  heroAttributes: PhotoViewHeroAttributes(tag: image.id),
                );
              },
              loadingBuilder: (context, event) => const Center(
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
              backgroundDecoration: const BoxDecoration(color: Colors.black),
            ),
          ),
          // Per-image reaction overlay (elegant, clear, appropriate size)
          Positioned(
            bottom: MediaQuery.of(context).padding.bottom + 24,
            left: 0,
            right: 0,
            child: _buildReactionOverlay(),
          ),

          // Reaction Picker Widget - ظاهر دائماً
          if (_showReactionPicker)
            Positioned(
              bottom: MediaQuery.of(context).padding.bottom + 80,
              left: 0,
              right: 0,
              child: Center(
                child: ReactionPickerWidget(
                  onReaction: (reaction) {
                    final current = widget.images[_currentIndex];
                    setState(() {
                      _imageReactions[current.id] = reaction;
                      _showReactionPicker = false;
                    });
                    // message-level reaction
                    widget.onReaction?.call(reaction);
                    // per-attachment overlay sync
                    widget.onReactForAttachment?.call(current, reaction);
                  },
                ),
              ),
            ),

          Positioned(
            top: MediaQuery.of(context).padding.top + 8,
            left: 8,
            child: IconButton(
              icon: const Icon(Icons.close, color: Colors.white),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ),
          Positioned(
            top: MediaQuery.of(context).padding.top + 12,
            right: 16,
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.15),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                '${_currentIndex + 1}/${widget.images.length}',
                style: const TextStyle(color: Colors.white),
              ),
            ),
          ),

          // زر إظهار الريآكشنات
          Positioned(
            bottom: MediaQuery.of(context).padding.bottom + 16,
            right: 16,
            child: GestureDetector(
              onTap: () {
                HapticFeedback.lightImpact();
                setState(() {
                  _showReactionPicker = !_showReactionPicker;
                });
              },
              child: Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: _showReactionPicker
                      ? Colors.white.withOpacity(0.25)
                      : Colors.white.withOpacity(0.15),
                  shape: BoxShape.circle,
                  border: Border.all(
                    color: Colors.white.withOpacity(0.3),
                    width: 1,
                  ),
                ),
                child: Icon(
                  _showReactionPicker ? Icons.close : Icons.favorite_rounded,
                  color: Colors.white,
                  size: 24,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showImageOptions() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (sheetContext) {
        return _ImageViewerOptionsSheet(
          onReact: (type) {
            final current = widget.images[_currentIndex];
            setState(() {
              _imageReactions[current.id] = type;
            });
            // message-level reaction
            widget.onReaction?.call(type);
            // per-attachment overlay sync back to parent grid/bubble
            widget.onReactForAttachment?.call(current, type);
          },
          onReply: widget.onReply,
          parentNavigatorContext: context,
          currentAttachment: widget.images[_currentIndex],
        );
      },
    );
  }

  Widget _buildReactionOverlay() {
    if (widget.images.isEmpty) return const SizedBox.shrink();
    final current = widget.images[_currentIndex];
    final reaction = _imageReactions[current.id];
    if (reaction == null) return const SizedBox.shrink();

    final emoji = _emojiForReaction(reaction);
    return Center(
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.12),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: Colors.white.withOpacity(0.25),
                width: 0.5,
              ),
            ),
            child: Text(
              emoji,
              style: const TextStyle(fontSize: 28),
            ),
          ),
        ),
      ),
    );
  }

  String _emojiForReaction(String type) {
    switch (type) {
      case 'like':
        return '👍';
      case 'love':
        return '❤️';
      case 'laugh':
        return '😂';
      case 'wow':
        return '😮';
      case 'sad':
        return '😢';
      case 'angry':
        return '😠';
      default:
        return '👍';
    }
  }
}

class _ImageViewerOptionsSheet extends StatelessWidget {
  final void Function(String) onReact;
  final void Function(Attachment)? onReply;
  final BuildContext parentNavigatorContext;
  final Attachment currentAttachment;
  const _ImageViewerOptionsSheet({
    required this.onReact,
    this.onReply,
    required this.parentNavigatorContext,
    required this.currentAttachment,
  });

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              _reactionChip(context, '👍', 'like', onReact),
              _reactionChip(context, '❤️', 'love', onReact),
              _reactionChip(context, '😂', 'laugh', onReact),
              _reactionChip(context, '😮', 'wow', onReact),
              _reactionChip(context, '😢', 'sad', onReact),
              _reactionChip(context, '😠', 'angry', onReact),
            ],
          ),
          const SizedBox(height: 12),
          Container(
            margin: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.6),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                if (onReply != null)
                  _actionTile(context, Icons.reply_rounded, 'رد', () {
                    // Close the options sheet first
                    Navigator.pop(context);
                    // Then close the viewer page
                    Navigator.pop(parentNavigatorContext);
                    // Finally notify parent to set reply and focus input
                    onReply!(currentAttachment);
                  }),
                _actionTile(context, Icons.download_rounded, 'حفظ', () {
                  Navigator.pop(context);
                }),
                _actionTile(context, Icons.share_rounded, 'مشاركة', () {
                  Navigator.pop(context);
                }),
              ],
            ),
          ),
          const SizedBox(height: 8),
        ],
      ),
    );
  }

  Widget _reactionChip(
    BuildContext context,
    String emoji,
    String type,
    void Function(String) onReact,
  ) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 6),
      child: GestureDetector(
        onTap: () {
          HapticFeedback.selectionClick();
          Navigator.pop(context);
          onReact(type);
        },
        child: Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            shape: BoxShape.circle,
          ),
          child: Text(emoji, style: const TextStyle(fontSize: 22)),
        ),
      ),
    );
  }

  Widget _actionTile(
    BuildContext context,
    IconData icon,
    String title,
    VoidCallback onTap,
  ) {
    return ListTile(
      onTap: onTap,
      leading: Icon(icon, color: Colors.white.withOpacity(0.9)),
      title: Text(title, style: const TextStyle(color: Colors.white)),
    );
  }
}

// No global key needed; we use the bottom sheet context to pop

----- FILE: ./image_gallery_screen.dart -----
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:photo_view/photo_view.dart';
import 'package:photo_view/photo_view_gallery.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/message.dart';
import 'reaction_picker_widget.dart';

class ImageGalleryScreen extends StatefulWidget {
  final Message message;
  final bool isMe;
  final VoidCallback? onReply;
  final VoidCallback? onEdit;
  final VoidCallback? onDelete;
  final Function(String)? onReaction;
  final int initialIndex;

  const ImageGalleryScreen({
    super.key,
    required this.message,
    required this.isMe,
    this.onReply,
    this.onEdit,
    this.onDelete,
    this.onReaction,
    this.initialIndex = 0,
  });

  @override
  State<ImageGalleryScreen> createState() => _ImageGalleryScreenState();
}

class _ImageGalleryScreenState extends State<ImageGalleryScreen>
    with SingleTickerProviderStateMixin {
  late PageController _pageController;
  late AnimationController _controlsAnimationController;
  late Animation<double> _controlsAnimation;

  int _currentIndex = 0;
  bool _showControls = true;
  bool _showReactions = false;

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.initialIndex;
    _pageController = PageController(initialPage: widget.initialIndex);

    _controlsAnimationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );

    _controlsAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controlsAnimationController,
      curve: Curves.easeInOut,
    ));

    _controlsAnimationController.forward();
  }

  @override
  void dispose() {
    _pageController.dispose();
    _controlsAnimationController.dispose();
    super.dispose();
  }

  void _toggleControls() {
    setState(() {
      _showControls = !_showControls;
      if (_showControls) {
        _controlsAnimationController.forward();
      } else {
        _controlsAnimationController.reverse();
      }
    });
  }

  void _showOptions() {
    HapticFeedback.lightImpact();
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => _ImageOptionsSheet(
        message: widget.message,
        isMe: widget.isMe,
        currentIndex: _currentIndex,
        onReply: () {
          Navigator.pop(context);
          Navigator.pop(context);
          widget.onReply?.call();
        },
        onEdit: widget.onEdit != null
            ? () {
                Navigator.pop(context);
                Navigator.pop(context);
                widget.onEdit!();
              }
            : null,
        onDelete: widget.onDelete != null
            ? () {
                Navigator.pop(context);
                Navigator.pop(context);
                widget.onDelete!();
              }
            : null,
        onSaveImage: () {
          Navigator.pop(context);
          _saveCurrentImage();
        },
        onShareImage: () {
          Navigator.pop(context);
          _shareCurrentImage();
        },
      ),
    );
  }

  void _saveCurrentImage() {
    // TODO: Implement save to gallery
    HapticFeedback.mediumImpact();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('تم حفظ الصورة'),
        duration: const Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
        backgroundColor: AppTheme.success.withValues(alpha: 0.9),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  void _shareCurrentImage() {
    // TODO: Implement share image
    HapticFeedback.mediumImpact();
  }

  @override
  Widget build(BuildContext context) {
    final images = widget.message.attachments.where((a) => a.isImage).toList();

    return Scaffold(
      backgroundColor: Colors.black,
      extendBodyBehindAppBar: true,
      body: GestureDetector(
        onTap: _toggleControls,
        child: Stack(
          children: [
            // Image Gallery
            PhotoViewGallery.builder(
              scrollPhysics: const BouncingScrollPhysics(),
              builder: (BuildContext context, int index) {
                return PhotoViewGalleryPageOptions.customChild(
                  child: CachedImageWidget(
                    imageUrl: images[index].fileUrl,
                    fit: BoxFit.contain,
                  ),
                  initialScale: PhotoViewComputedScale.contained,
                  minScale: PhotoViewComputedScale.contained,
                  maxScale: PhotoViewComputedScale.covered * 3,
                  heroAttributes: PhotoViewHeroAttributes(
                    tag: 'image_${widget.message.id}_$index',
                  ),
                );
              },
              itemCount: images.length,
              loadingBuilder: (context, event) => Center(
                child: SizedBox(
                  width: 40,
                  height: 40,
                  child: CircularProgressIndicator(
                    value: event == null
                        ? 0
                        : event.cumulativeBytesLoaded /
                            event.expectedTotalBytes!,
                    strokeWidth: 3,
                    valueColor: AlwaysStoppedAnimation<Color>(
                      AppTheme.primaryBlue,
                    ),
                  ),
                ),
              ),
              backgroundDecoration: const BoxDecoration(
                color: Colors.black,
              ),
              pageController: _pageController,
              onPageChanged: (index) {
                setState(() {
                  _currentIndex = index;
                });
              },
            ),

            // Top Bar
            FadeTransition(
              opacity: _controlsAnimation,
              child: _buildTopBar(images.length),
            ),

            // Bottom Bar
            FadeTransition(
              opacity: _controlsAnimation,
              child: _buildBottomBar(),
            ),

            // Reaction Picker
            if (_showReactions)
              Positioned(
                bottom: 100,
                left: 0,
                right: 0,
                child: Center(
                  child: ReactionPickerWidget(
                    onReaction: (reaction) {
                      widget.onReaction?.call(reaction);
                      setState(() {
                        _showReactions = false;
                      });
                    },
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildTopBar(int imageCount) {
    return Positioned(
      top: 0,
      left: 0,
      right: 0,
      child: ClipRect(
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
          child: Container(
            padding: EdgeInsets.only(
              top: MediaQuery.of(context).padding.top + 8,
              bottom: 12,
              left: 8,
              right: 8,
            ),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black.withValues(alpha: 0.7),
                  Colors.black.withValues(alpha: 0.0),
                ],
              ),
            ),
            child: Row(
              children: [
                // Back Button
                IconButton(
                  onPressed: () => Navigator.pop(context),
                  icon: Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.black.withValues(alpha: 0.3),
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.arrow_back_rounded,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                ),

                const SizedBox(width: 8),

                // Image Counter
                if (imageCount > 1)
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 6,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.black.withValues(alpha: 0.5),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      '${_currentIndex + 1} / $imageCount',
                      style: AppTextStyles.bodySmall.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),

                const Spacer(),

                // More Options
                IconButton(
                  onPressed: _showOptions,
                  icon: Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.black.withValues(alpha: 0.3),
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.more_vert_rounded,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildBottomBar() {
    return Positioned(
      bottom: 0,
      left: 0,
      right: 0,
      child: ClipRect(
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
          child: Container(
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).padding.bottom + 12,
              top: 12,
              left: 16,
              right: 16,
            ),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.bottomCenter,
                end: Alignment.topCenter,
                colors: [
                  Colors.black.withValues(alpha: 0.7),
                  Colors.black.withValues(alpha: 0.0),
                ],
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                // Reply
                _buildActionButton(
                  icon: Icons.reply_rounded,
                  label: 'رد',
                  onTap: () {
                    Navigator.pop(context);
                    widget.onReply?.call();
                  },
                ),

                // React
                if (widget.onReaction != null)
                  _buildActionButton(
                    icon: Icons.favorite_rounded,
                    label: 'تفاعل',
                    onTap: () {
                      HapticFeedback.lightImpact();
                      setState(() {
                        _showReactions = !_showReactions;
                      });
                    },
                  ),

                // Edit (only for own messages)
                if (widget.isMe && widget.onEdit != null)
                  _buildActionButton(
                    icon: Icons.edit_rounded,
                    label: 'تعديل',
                    onTap: () {
                      Navigator.pop(context);
                      widget.onEdit!();
                    },
                  ),

                // Delete (only for own messages)
                if (widget.isMe && widget.onDelete != null)
                  _buildActionButton(
                    icon: Icons.delete_rounded,
                    label: 'حذف',
                    onTap: () {
                      Navigator.pop(context);
                      widget.onDelete!();
                    },
                    color: AppTheme.error,
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
    Color? color,
  }) {
    final buttonColor = color ?? Colors.white;

    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(12),
      child: Container(
        padding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 10,
        ),
        decoration: BoxDecoration(
          color: Colors.black.withValues(alpha: 0.3),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: buttonColor.withValues(alpha: 0.2),
            width: 1,
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              color: buttonColor,
              size: 22,
            ),
            const SizedBox(height: 4),
            Text(
              label,
              style: AppTextStyles.caption.copyWith(
                color: buttonColor,
                fontSize: 11,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _ImageOptionsSheet extends StatelessWidget {
  final Message message;
  final bool isMe;
  final int currentIndex;
  final VoidCallback? onReply;
  final VoidCallback? onEdit;
  final VoidCallback? onDelete;
  final VoidCallback? onSaveImage;
  final VoidCallback? onShareImage;

  const _ImageOptionsSheet({
    required this.message,
    required this.isMe,
    required this.currentIndex,
    this.onReply,
    this.onEdit,
    this.onDelete,
    this.onSaveImage,
    this.onShareImage,
  });

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: const BorderRadius.vertical(
        top: Radius.circular(20),
      ),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [
                AppTheme.darkCard.withValues(alpha: 0.95),
                AppTheme.darkCard.withValues(alpha: 0.98),
              ],
            ),
            borderRadius: const BorderRadius.vertical(
              top: Radius.circular(20),
            ),
            border: Border.all(
              color: AppTheme.primaryBlue.withValues(alpha: 0.1),
              width: 1,
            ),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Handle bar
              Container(
                margin: const EdgeInsets.only(top: 12, bottom: 8),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: AppTheme.textMuted.withValues(alpha: 0.3),
                  borderRadius: BorderRadius.circular(2),
                ),
              ),

              const SizedBox(height: 8),

              // Save Image
              _buildOption(
                icon: Icons.download_rounded,
                title: 'حفظ الصورة',
                onTap: onSaveImage,
                color: AppTheme.success,
              ),

              // Share Image
              _buildOption(
                icon: Icons.share_rounded,
                title: 'مشاركة الصورة',
                onTap: onShareImage,
                color: AppTheme.primaryBlue,
              ),

              // Reply
              _buildOption(
                icon: Icons.reply_rounded,
                title: 'رد على الرسالة',
                onTap: onReply,
                color: AppTheme.primaryBlue,
              ),

              // Edit (only for own messages)
              if (isMe && onEdit != null)
                _buildOption(
                  icon: Icons.edit_rounded,
                  title: 'تعديل الرسالة',
                  onTap: onEdit,
                  color: AppTheme.warning,
                ),

              // Delete (only for own messages)
              if (isMe && onDelete != null)
                _buildOption(
                  icon: Icons.delete_rounded,
                  title: 'حذف الرسالة',
                  onTap: onDelete,
                  color: AppTheme.error,
                ),

              const SizedBox(height: 8),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildOption({
    required IconData icon,
    required String title,
    required VoidCallback? onTap,
    required Color color,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: color.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(10),
              ),
              child: Icon(
                icon,
                color: color,
                size: 20,
              ),
            ),
            const SizedBox(width: 14),
            Expanded(
              child: Text(
                title,
                style: AppTextStyles.bodyMedium.copyWith(
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
            Icon(
              Icons.arrow_forward_ios_rounded,
              size: 16,
              color: AppTheme.textMuted.withValues(alpha: 0.5),
            ),
          ],
        ),
      ),
    );
  }
}

----- FILE: ./image_message_bubble.dart -----
import 'dart:io';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/message.dart';
import '../../domain/entities/attachment.dart';
import '../models/image_upload_info.dart';
import 'message_status_indicator.dart';
import 'whatsapp_style_image_grid.dart';
import 'expandable_image_viewer.dart';
import '../bloc/chat_bloc.dart';
import 'reaction_picker_widget.dart';

class ImageMessageBubble extends StatefulWidget {
  final Message message;
  final bool isMe;
  final List<ImageUploadInfo>? uploadingImages;
  final void Function(Attachment)? onReply;
  final Function(String)? onReaction;
  final VoidCallback? onReplyTap; // FIX: إضافة دعم النقر على الرد

  const ImageMessageBubble({
    super.key,
    required this.message,
    required this.isMe,
    this.uploadingImages,
    this.onReply,
    this.onReaction,
    this.onReplyTap, // FIX: إضافة parameter
  });

  @override
  State<ImageMessageBubble> createState() => _ImageMessageBubbleState();
}

class _ImageMessageBubbleState extends State<ImageMessageBubble>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _fadeAnimation;
  bool _showReactions = false;
  final Map<String, String> _attachmentReactions = {};

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _scaleAnimation = Tween<double>(
      begin: 0.95,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutBack,
    ));

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOut,
    ));

    _animationController.forward();
    _loadExistingReactions();
  }

  void _loadExistingReactions() {
    if (widget.message.reactions.isNotEmpty &&
        widget.message.attachments.isNotEmpty) {
      for (var i = 0;
          i < widget.message.reactions.length &&
              i < widget.message.attachments.length;
          i++) {
        _attachmentReactions[widget.message.attachments[i].id] =
            widget.message.reactions[i].reactionType;
      }
    }
  }

  @override
  void didUpdateWidget(covariant ImageMessageBubble oldWidget) {
    super.didUpdateWidget(oldWidget);
    // FIX المشكلة 2: تحديث فوري عند تغيير الـ reactions
    if (oldWidget.message.reactions.length != widget.message.reactions.length) {
      _loadExistingReactions();
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: ScaleTransition(
        scale: _scaleAnimation,
        child: Align(
          alignment: widget.isMe ? Alignment.centerRight : Alignment.centerLeft,
          child: Container(
            margin: EdgeInsets.only(
              left: widget.isMe ? MediaQuery.of(context).size.width * 0.2 : 8,
              right: widget.isMe ? 8 : MediaQuery.of(context).size.width * 0.2,
              top: 4,
              bottom: 2,
            ),
            child: GestureDetector(
              onLongPress: _showOptions,
              onDoubleTap: _handleDoubleTap,
              child: _buildBubbleContent(),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildBubbleContent() {
    if (widget.uploadingImages != null && widget.uploadingImages!.isNotEmpty) {
      final allCompleted =
          widget.uploadingImages!.every((img) => img.isCompleted);
      if (allCompleted) {
        return const SizedBox.shrink();
      }
      return _buildUploadingBubble();
    }

    if (widget.message.attachments.isNotEmpty) {
      return _buildCompletedBubble();
    }

    if (widget.message.messageType == 'image' &&
        (widget.message.content != null &&
            widget.message.content!.isNotEmpty)) {
      return _buildSingleContentImage(widget.message.content!);
    }

    return const SizedBox.shrink();
  }

  Widget _buildUploadingBubble() {
    final images = widget.uploadingImages!;
    final screenWidth = MediaQuery.of(context).size.width;
    final maxWidth = screenWidth * 0.65;
    double bubbleWidth = maxWidth;

    return Container(
      width: bubbleWidth,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: widget.isMe
              ? AppTheme.primaryBlue.withValues(alpha: 0.2)
              : AppTheme.darkBorder.withValues(alpha: 0.1),
          width: 0.5,
        ),
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: Stack(
          children: [
            _buildImageGrid(images),
            _buildProgressOverlay(images),
          ],
        ),
      ),
    );
  }

  Widget _buildCompletedBubble() {
    final screenWidth = MediaQuery.of(context).size.width;
    final maxWidth = screenWidth * 0.65;
    double bubbleWidth = maxWidth;

    return BlocBuilder<ChatBloc, ChatState>(
      builder: (context, state) {
        // FIX المشكلة 2: تحديث الريآكشنات من الحالة الحالية
        if (state is ChatLoaded) {
          final List<Message> messages =
              (state.messages[widget.message.conversationId] ?? [])
                  .cast<Message>();
          final currentMessage = messages.firstWhere(
            (m) => m.id == widget.message.id,
            orElse: () => widget.message,
          );

          // مزامنة التفاعلات فوراً
          if (currentMessage.reactions.isNotEmpty) {
            for (var i = 0;
                i < currentMessage.reactions.length &&
                    i < currentMessage.attachments.length;
                i++) {
              final newReaction = currentMessage.reactions[i].reactionType;
              final attachmentId = currentMessage.attachments[i].id;
              if (_attachmentReactions[attachmentId] != newReaction) {
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  if (mounted) {
                    setState(() {
                      _attachmentReactions[attachmentId] = newReaction;
                    });
                  }
                });
              }
            }
          }
        }

        final bubble = Container(
          width: bubbleWidth,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: widget.isMe
                  ? AppTheme.primaryBlue.withValues(alpha: 0.1)
                  : AppTheme.darkBorder.withValues(alpha: 0.05),
              width: 0.5,
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // FIX: إضافة بطاقة الرد في رسائل الصور
              if (widget.message.replyToMessageId != null)
                Padding(
                  padding: const EdgeInsets.all(8),
                  child: _buildReplyPreviewForImage(),
                ),
              Stack(
                children: [
                  ClipRRect(
                    borderRadius: BorderRadius.circular(12),
                    child: GestureDetector(
                      onLongPress: widget.message.attachments.length == 1
                          ? _showOptions
                          : null,
                      onDoubleTap: _handleDoubleTap,
                      child: WhatsAppStyleImageGrid(
                        images: widget.message.attachments,
                        isMe: widget.isMe,
                        onReaction: (reactionType) {
                          widget.onReaction?.call(reactionType);
                        },
                        onReply: (attachment) {
                          if (widget.onReply != null) {
                            widget.onReply!(attachment);
                          }
                        },
                        reactionsByAttachment: _attachmentReactions,
                        onReactForAttachment: (attachment, reaction) {
                          // FIX المشكلة 2: تحديث فوري في الحالة المحلية
                          setState(() {
                            _attachmentReactions[attachment.id] = reaction;
                          });
                          // إرسال للـ Bloc
                          widget.onReaction?.call(reaction);
                        },
                      ),
                    ),
                  ),
                  Positioned(
                    bottom: 4,
                    right: 8,
                    child: _buildMessageFooter(),
                  ),
                ],
              ),
            ],
          ),
        );

        if (widget.message.reactions.isNotEmpty || _showReactions) {
          return Column(
            crossAxisAlignment:
                widget.isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              bubble,
              const SizedBox(height: 4),
              if (_showReactions)
                ReactionPickerWidget(
                  onReaction: (reaction) {
                    widget.onReaction?.call(reaction);
                    setState(() => _showReactions = false);
                  },
                )
              else
                _buildMinimalReactions(),
            ],
          );
        }

        return bubble;
      },
    );
  }

  Message? _findReplyMessage() {
    final replyId = widget.message.replyToMessageId;
    if (replyId == null) return null;

    final chatBloc = context.read<ChatBloc>();
    final chatState = chatBloc.state;
    if (chatState is! ChatLoaded) return null;

    final List<Message> messages =
        (chatState.messages[widget.message.conversationId] ?? [])
            .cast<Message>();

    for (final m in messages) {
      if (m.id == replyId) return m;
    }
    return null;
  }

  Widget _buildReplyPreviewForImage() {
    final replyMessage = _findReplyMessage();

    return GestureDetector(
      onTap: () {
        print('🔥 DEBUG: Reply card tapped in ImageMessageBubble!');
        print('🔥 DEBUG: onReplyTap is null? ${widget.onReplyTap == null}');
        print('🔥 DEBUG: replyToMessageId: ${widget.message.replyToMessageId}');

        if (widget.onReplyTap != null) {
          HapticFeedback.selectionClick();
          widget.onReplyTap!();
        }
      },
      child: Container(
        padding: const EdgeInsets.all(6),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: widget.isMe
                ? [
                    Colors.white.withValues(alpha: 0.12),
                    Colors.white.withValues(alpha: 0.06),
                  ]
                : [
                    AppTheme.primaryBlue.withValues(alpha: 0.06),
                    AppTheme.primaryBlue.withValues(alpha: 0.03),
                  ],
          ),
          borderRadius: BorderRadius.circular(8),
          border: Border(
            left: BorderSide(
              color: widget.isMe
                  ? Colors.white.withValues(alpha: 0.5)
                  : AppTheme.primaryBlue.withValues(alpha: 0.8),
              width: 2,
            ),
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  Icons.reply,
                  size: 12,
                  color: widget.isMe
                      ? Colors.white.withValues(alpha: 0.7)
                      : AppTheme.primaryBlue.withValues(alpha: 0.7),
                ),
                const SizedBox(width: 4),
                Text(
                  'رد على رسالة',
                  style: AppTextStyles.caption.copyWith(
                    color: widget.isMe
                        ? Colors.white.withValues(alpha: 0.8)
                        : AppTheme.primaryBlue.withValues(alpha: 0.8),
                    fontSize: 9,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 3),
            Text(
              replyMessage?.content ?? 'رسالة محذوفة',
              style: AppTextStyles.caption.copyWith(
                color: widget.isMe
                    ? Colors.white.withValues(alpha: 0.7)
                    : AppTheme.textMuted.withValues(alpha: 0.6),
                fontSize: 10,
                fontStyle:
                    replyMessage == null ? FontStyle.italic : FontStyle.normal,
              ),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSingleContentImage(String url) {
    final screenWidth = MediaQuery.of(context).size.width;
    final maxWidth = screenWidth * 0.65;
    final bubbleWidth = maxWidth;

    return GestureDetector(
      onTap: () => _openViewerForSingleContentImage(url),
      onLongPress: () => _openViewerForSingleContentImage(url),
      child: Container(
        width: bubbleWidth,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: widget.isMe
                ? AppTheme.primaryBlue.withValues(alpha: 0.1)
                : AppTheme.darkBorder.withValues(alpha: 0.05),
            width: 0.5,
          ),
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(12),
          child: AspectRatio(
            aspectRatio: 4 / 3,
            child: Stack(
              fit: StackFit.expand,
              children: [
                CachedImageWidget(
                  imageUrl: url,
                  fit: BoxFit.cover,
                  removeContainer: true,
                ),
                Positioned(
                  bottom: 4,
                  right: 8,
                  child: _buildMessageFooter(),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _openViewerForSingleContentImage(String url) {
    final attachment = Attachment(
      id: 'inline_${widget.message.id}',
      conversationId: widget.message.conversationId,
      fileName: url.split('/').isNotEmpty ? url.split('/').last : 'image.jpg',
      contentType: 'image/jpeg',
      fileSize: 0,
      filePath: '',
      fileUrl: url,
      url: url,
      uploadedBy: widget.message.senderId,
      createdAt: widget.message.createdAt,
    );

    // FIX المشكلة 2: callback فوري عند العودة
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) =>
            ExpandableImageViewer(
          images: [attachment],
          initialIndex: 0,
          onReaction: widget.onReaction,
          onReply: widget.onReply,
          initialReactionsByAttachment: _attachmentReactions,
          onReactForAttachment: (att, reaction) {
            // تحديث فوري
            if (mounted) {
              setState(() {
                _attachmentReactions[att.id] = reaction;
              });
            }
            widget.onReaction?.call(reaction);
          },
        ),
        transitionDuration: const Duration(milliseconds: 300),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(opacity: animation, child: child);
        },
      ),
    ).then((_) {
      // FIX المشكلة 2: إعادة بناء عند العودة لضمان التحديث
      if (mounted) {
        setState(() {});
      }
    });
  }

  Widget _buildImageGrid(List<ImageUploadInfo> images) {
    final count = images.length;

    if (count == 1) {
      return _buildSingleImageUploading(images.first);
    } else if (count == 2) {
      return _buildTwoImagesUploading(images);
    } else if (count == 3) {
      return _buildThreeImagesUploading(images);
    } else if (count == 4) {
      return _buildFourImagesUploading(images);
    } else {
      return _buildMoreImagesUploading(images);
    }
  }

  Widget _buildSingleImageUploading(ImageUploadInfo image) {
    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Stack(
        fit: StackFit.expand,
        children: [
          if (image.file != null)
            Image.file(
              image.file!,
              fit: BoxFit.cover,
              color: Colors.black.withValues(alpha: 0.2),
              colorBlendMode: BlendMode.darken,
            ),
          if (image.progress < 1.0)
            Center(
              child: _buildCircularProgress(image.progress),
            ),
        ],
      ),
    );
  }

  Widget _buildTwoImagesUploading(List<ImageUploadInfo> images) {
    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Row(
        children: [
          Expanded(child: _buildImageUploadTile(images[0])),
          const SizedBox(width: 2),
          Expanded(child: _buildImageUploadTile(images[1])),
        ],
      ),
    );
  }

  Widget _buildThreeImagesUploading(List<ImageUploadInfo> images) {
    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Row(
        children: [
          Expanded(
            flex: 2,
            child: _buildImageUploadTile(images[0]),
          ),
          const SizedBox(width: 2),
          Expanded(
            child: Column(
              children: [
                Expanded(child: _buildImageUploadTile(images[1])),
                const SizedBox(height: 2),
                Expanded(child: _buildImageUploadTile(images[2])),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFourImagesUploading(List<ImageUploadInfo> images) {
    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Column(
        children: [
          Expanded(
            child: Row(
              children: [
                Expanded(child: _buildImageUploadTile(images[0])),
                const SizedBox(width: 2),
                Expanded(child: _buildImageUploadTile(images[1])),
              ],
            ),
          ),
          const SizedBox(height: 2),
          Expanded(
            child: Row(
              children: [
                Expanded(child: _buildImageUploadTile(images[2])),
                const SizedBox(width: 2),
                Expanded(child: _buildImageUploadTile(images[3])),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMoreImagesUploading(List<ImageUploadInfo> images) {
    final displayImages = images.take(4).toList();
    final remainingCount = images.length - 4;

    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Column(
        children: [
          Expanded(
            child: Row(
              children: [
                Expanded(child: _buildImageUploadTile(displayImages[0])),
                const SizedBox(width: 2),
                Expanded(child: _buildImageUploadTile(displayImages[1])),
              ],
            ),
          ),
          const SizedBox(height: 2),
          Expanded(
            child: Row(
              children: [
                Expanded(child: _buildImageUploadTile(displayImages[2])),
                const SizedBox(width: 2),
                Expanded(
                  child: Stack(
                    fit: StackFit.expand,
                    children: [
                      _buildImageUploadTile(displayImages[3]),
                      if (remainingCount > 0)
                        Container(
                          color: Colors.black.withValues(alpha: 0.6),
                          child: Center(
                            child: Text(
                              '+$remainingCount',
                              style: AppTextStyles.heading2.copyWith(
                                color: Colors.white,
                                fontSize: 24,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImageUploadTile(ImageUploadInfo image) {
    return Stack(
      fit: StackFit.expand,
      children: [
        if (image.file != null)
          Image.file(
            image.file!,
            fit: BoxFit.cover,
            color: image.progress < 1.0
                ? Colors.black.withValues(alpha: 0.3)
                : null,
            colorBlendMode: image.progress < 1.0 ? BlendMode.darken : null,
          ),
        if (image.progress < 1.0)
          Container(
            color: Colors.black.withValues(alpha: 0.3),
            child: Center(
              child: _buildCircularProgress(image.progress),
            ),
          ),
        if (image.isFailed)
          Container(
            color: AppTheme.error.withValues(alpha: 0.3),
            child: Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(
                    Icons.error_outline,
                    color: Colors.white,
                    size: 24,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'فشل الرفع',
                    style: AppTextStyles.caption.copyWith(
                      color: Colors.white,
                      fontSize: 10,
                    ),
                  ),
                ],
              ),
            ),
          ),
        if (image.isCompleted && !image.isFailed)
          Positioned(
            top: 8,
            right: 8,
            child: Container(
              width: 24,
              height: 24,
              decoration: BoxDecoration(
                color: AppTheme.success.withValues(alpha: 0.9),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.check,
                color: Colors.white,
                size: 16,
              ),
            ),
          ),
      ],
    );
  }

  Widget _buildCircularProgress(double progress) {
    return Container(
      width: 48,
      height: 48,
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: Colors.black.withValues(alpha: 0.5),
        shape: BoxShape.circle,
      ),
      child: CircularProgressIndicator(
        value: progress,
        strokeWidth: 3,
        backgroundColor: Colors.white.withValues(alpha: 0.3),
        valueColor: AlwaysStoppedAnimation<Color>(
          Colors.white.withValues(alpha: 0.9),
        ),
      ),
    );
  }

  Widget _buildProgressOverlay(List<ImageUploadInfo> images) {
    final totalProgress = images.isEmpty
        ? 0.0
        : images.map((img) => img.progress).fold<double>(0.0, (a, b) => a + b) /
            images.length;

    final uploadingCount =
        images.where((img) => !img.isCompleted && !img.isFailed).length;
    final failedCount = images.where((img) => img.isFailed).length;

    if (uploadingCount == 0 && failedCount == 0) {
      return const SizedBox.shrink();
    }

    return Positioned(
      bottom: 0,
      left: 0,
      right: 0,
      child: ClipRRect(
        borderRadius: const BorderRadius.vertical(
          bottom: Radius.circular(12),
        ),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
          child: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.black.withValues(alpha: 0.0),
                  Colors.black.withValues(alpha: 0.6),
                ],
              ),
            ),
            child: Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.cloud_upload,
                            color: Colors.white.withValues(alpha: 0.9),
                            size: 14,
                          ),
                          const SizedBox(width: 6),
                          Text(
                            failedCount > 0
                                ? 'فشل رفع $failedCount صورة'
                                : 'جاري الرفع... ${(totalProgress * 100).toInt()}%',
                            style: AppTextStyles.caption.copyWith(
                              color: Colors.white.withValues(alpha: 0.9),
                              fontSize: 11,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      LinearProgressIndicator(
                        value: totalProgress,
                        minHeight: 2,
                        backgroundColor: Colors.white.withValues(alpha: 0.2),
                        valueColor: AlwaysStoppedAnimation<Color>(
                          failedCount > 0
                              ? AppTheme.error
                              : AppTheme.success.withValues(alpha: 0.8),
                        ),
                      ),
                    ],
                  ),
                ),
                if (failedCount > 0) ...[
                  const SizedBox(width: 8),
                  GestureDetector(
                    onTap: _retryFailedUploads,
                    child: Container(
                      padding: const EdgeInsets.all(6),
                      decoration: BoxDecoration(
                        color: AppTheme.error.withValues(alpha: 0.2),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Icon(
                        Icons.refresh,
                        color: Colors.white,
                        size: 16,
                      ),
                    ),
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildMessageFooter() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
      decoration: BoxDecoration(
        color: Colors.black.withValues(alpha: 0.4),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            _formatTime(widget.message.createdAt),
            style: AppTextStyles.caption.copyWith(
              color: Colors.white.withValues(alpha: 0.8),
              fontSize: 10,
            ),
          ),
          if (widget.isMe) ...[
            const SizedBox(width: 3),
            MessageStatusIndicator(
              status: widget.message.status,
              color: Colors.white.withValues(alpha: 0.8),
              size: 12,
            ),
          ],
        ],
      ),
    );
  }

  void _showOptions() {
    HapticFeedback.lightImpact();
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) {
        return _ImageMessageOptionsSheet(
          isMe: widget.isMe,
          onReply: widget.onReply == null || widget.message.attachments.isEmpty
              ? null
              : () => widget.onReply!(widget.message.attachments.first),
        );
      },
    );
  }

  void _handleDoubleTap() {
    HapticFeedback.lightImpact();
    setState(() {
      _showReactions = !_showReactions;
    });
  }

  void _retryFailedUploads() {
    HapticFeedback.mediumImpact();
    final uploads = widget.uploadingImages ?? const <ImageUploadInfo>[];
    final failed = uploads.where((u) => u.isFailed && u.file != null).toList();
    if (failed.isEmpty) return;

    for (final item in failed) {
      final filePath = item.file!.path;
      final uploadId = item.id;
      context
          .read<ChatBloc>()
          .uploadAttachmentWithProgress(
            conversationId: widget.message.conversationId,
            filePath: filePath,
            messageType: 'image',
            onProgress: (sent, total) {
              final ratio = total > 0 ? sent / total : 0.0;
              context.read<ChatBloc>().add(
                    UpdateImageUploadProgressEvent(
                      conversationId: widget.message.conversationId,
                      uploadId: uploadId,
                      progress: ratio,
                    ),
                  );
            },
          )
          .then((_) {
        context.read<ChatBloc>().add(
              UpdateImageUploadProgressEvent(
                conversationId: widget.message.conversationId,
                uploadId: uploadId,
                progress: 1.0,
                isCompleted: true,
              ),
            );
      }).catchError((e) {
        context.read<ChatBloc>().add(
              UpdateImageUploadProgressEvent(
                conversationId: widget.message.conversationId,
                uploadId: uploadId,
                isFailed: true,
                error: e.toString(),
              ),
            );
      });
    }
  }

  String _formatTime(DateTime dateTime) {
    return '${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  Widget _buildMinimalReactions() {
    final groupedReactions = <String, int>{};
    for (final reaction in widget.message.reactions) {
      groupedReactions[reaction.reactionType] =
          (groupedReactions[reaction.reactionType] ?? 0) + 1;
    }

    return Wrap(
      spacing: 2,
      runSpacing: 2,
      children: groupedReactions.entries.map((entry) {
        return Container(
          padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                AppTheme.darkCard.withValues(alpha: 0.5),
                AppTheme.darkCard.withValues(alpha: 0.3),
              ],
            ),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(
              color: AppTheme.darkBorder.withValues(alpha: 0.15),
              width: 0.5,
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(_getEmojiForReaction(entry.key),
                  style: const TextStyle(fontSize: 10)),
              if (entry.value > 1) ...[
                const SizedBox(width: 2),
                Text(
                  entry.value.toString(),
                  style: AppTextStyles.caption.copyWith(
                    fontSize: 8,
                    fontWeight: FontWeight.w600,
                    color: AppTheme.textWhite.withValues(alpha: 0.6),
                  ),
                ),
              ],
            ],
          ),
        );
      }).toList(),
    );
  }

  String _getEmojiForReaction(String reactionType) {
    switch (reactionType) {
      case 'like':
        return '👍';
      case 'love':
        return '❤️';
      case 'laugh':
        return '😂';
      case 'sad':
        return '😢';
      case 'angry':
        return '😠';
      case 'wow':
        return '😮';
      default:
        return '👍';
    }
  }
}

class _ImageMessageOptionsSheet extends StatelessWidget {
  final bool isMe;
  final VoidCallback? onReply;

  const _ImageMessageOptionsSheet({required this.isMe, this.onReply});

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [
                AppTheme.darkCard.withValues(alpha: 0.85),
                AppTheme.darkCard.withValues(alpha: 0.9),
              ],
            ),
            borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
            border: Border.all(
              color: AppTheme.darkBorder.withValues(alpha: 0.08),
              width: 0.5,
            ),
          ),
          child: SafeArea(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  width: 28,
                  height: 3,
                  margin: const EdgeInsets.symmetric(vertical: 8),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        AppTheme.darkBorder.withValues(alpha: 0.2),
                        AppTheme.darkBorder.withValues(alpha: 0.08),
                      ],
                    ),
                    borderRadius: BorderRadius.circular(1.5),
                  ),
                ),
                if (onReply != null)
                  _buildOption(
                    context,
                    icon: Icons.reply_rounded,
                    title: 'رد',
                    onTap: () {
                      Navigator.pop(context);
                      onReply!.call();
                    },
                  ),
                _buildOption(
                  context,
                  icon: Icons.download_rounded,
                  title: 'حفظ الصورة',
                  onTap: () {
                    Navigator.pop(context);
                  },
                ),
                if (isMe)
                  _buildOption(
                    context,
                    icon: Icons.delete_rounded,
                    title: 'حذف',
                    onTap: () {
                      Navigator.pop(context);
                    },
                    isDestructive: true,
                  ),
                const SizedBox(height: 6),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildOption(
    BuildContext context, {
    required IconData icon,
    required String title,
    required VoidCallback onTap,
    bool isDestructive = false,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),
        child: Row(
          children: [
            Container(
              width: 28,
              height: 28,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: isDestructive
                      ? [
                          AppTheme.error.withValues(alpha: 0.12),
                          AppTheme.error.withValues(alpha: 0.06),
                        ]
                      : [
                          AppTheme.primaryBlue.withValues(alpha: 0.08),
                          AppTheme.primaryPurple.withValues(alpha: 0.04),
                        ],
                ),
                borderRadius: BorderRadius.circular(6),
              ),
              child: Icon(
                icon,
                color: isDestructive
                    ? AppTheme.error.withValues(alpha: 0.8)
                    : AppTheme.primaryBlue.withValues(alpha: 0.8),
                size: 16,
              ),
            ),
            const SizedBox(width: 10),
            Text(
              title,
              style: AppTextStyles.bodyMedium.copyWith(
                color: isDestructive
                    ? AppTheme.error.withValues(alpha: 0.8)
                    : AppTheme.textWhite.withValues(alpha: 0.8),
                fontSize: 13,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

----- FILE: ./image_preview_screen.dart -----
import 'dart:io';
import 'dart:ui';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_editor_plus/image_editor_plus.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';

class ImagePreviewScreen extends StatefulWidget {
  final List<File> images;
  final Function(List<File>) onSend;

  const ImagePreviewScreen({
    super.key,
    required this.images,
    required this.onSend,
  });

  @override
  State<ImagePreviewScreen> createState() => _ImagePreviewScreenState();
}

class _ImagePreviewScreenState extends State<ImagePreviewScreen>
    with TickerProviderStateMixin {
  late PageController _pageController;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  int _currentIndex = 0;
  List<File> _editedImages = [];
  final TextEditingController _captionController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _editedImages = List.from(widget.images);
    _pageController = PageController();

    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOut,
    ));

    _animationController.forward();
  }

  @override
  void dispose() {
    _pageController.dispose();
    _animationController.dispose();
    _captionController.dispose();
    super.dispose();
  }

  Future<void> _editImage(int index) async {
    HapticFeedback.lightImpact();
    // Read image bytes before building the route to avoid using 'await' in builder
    final bytes = await _editedImages[index].readAsBytes();

    final editedImage = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ImageEditor(
          image: bytes,
        ),
      ),
    );

    if (editedImage != null && editedImage is Uint8List) {
      final tempFile = File(_editedImages[index].path);
      await tempFile.writeAsBytes(editedImage);
      setState(() {
        _editedImages[index] = tempFile;
      });
    }
  }

  void _removeImage(int index) {
    HapticFeedback.mediumImpact();

    if (_editedImages.length == 1) {
      Navigator.pop(context);
      return;
    }

    setState(() {
      _editedImages.removeAt(index);
      if (_currentIndex >= _editedImages.length) {
        _currentIndex = _editedImages.length - 1;
      }
      _pageController.jumpToPage(_currentIndex);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          // Images viewer
          FadeTransition(
            opacity: _fadeAnimation,
            child: PageView.builder(
              controller: _pageController,
              onPageChanged: (index) {
                setState(() {
                  _currentIndex = index;
                });
              },
              itemCount: _editedImages.length,
              itemBuilder: (context, index) {
                return InteractiveViewer(
                  minScale: 0.5,
                  maxScale: 4.0,
                  child: Center(
                    child: Image.file(
                      _editedImages[index],
                      fit: BoxFit.contain,
                    ),
                  ),
                );
              },
            ),
          ),

          // Top bar
          Positioned(
            top: 0,
            left: 0,
            right: 0,
            child: _buildTopBar(),
          ),

          // Thumbnails
          Positioned(
            bottom: 100,
            left: 0,
            right: 0,
            child: _buildThumbnails(),
          ),

          // Bottom controls
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: _buildBottomControls(),
          ),
        ],
      ),
    );
  }

  Widget _buildTopBar() {
    return ClipRect(
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: Container(
          padding: EdgeInsets.only(
            top: MediaQuery.of(context).padding.top + 8,
            left: 16,
            right: 16,
            bottom: 8,
          ),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [
                Colors.black.withValues(alpha: 0.6),
                Colors.black.withValues(alpha: 0.3),
                Colors.transparent,
              ],
            ),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              // Back button
              GestureDetector(
                onTap: () {
                  HapticFeedback.lightImpact();
                  Navigator.pop(context);
                },
                child: Container(
                  width: 36,
                  height: 36,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Icon(
                    Icons.arrow_back,
                    color: Colors.white,
                    size: 20,
                  ),
                ),
              ),

              // Image counter
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 6,
                ),
                decoration: BoxDecoration(
                  color: Colors.white.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Text(
                  '${_currentIndex + 1} / ${_editedImages.length}',
                  style: AppTextStyles.bodySmall.copyWith(
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),

              // Action buttons
              Row(
                children: [
                  // Edit button
                  GestureDetector(
                    onTap: () => _editImage(_currentIndex),
                    child: Container(
                      width: 36,
                      height: 36,
                      decoration: BoxDecoration(
                        color: Colors.white.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Icon(
                        Icons.edit_outlined,
                        color: Colors.white,
                        size: 20,
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  // Delete button
                  GestureDetector(
                    onTap: () => _removeImage(_currentIndex),
                    child: Container(
                      width: 36,
                      height: 36,
                      decoration: BoxDecoration(
                        color: AppTheme.error.withValues(alpha: 0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        Icons.delete_outline,
                        color: AppTheme.error,
                        size: 20,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildThumbnails() {
    if (_editedImages.length <= 1) return const SizedBox.shrink();

    return Container(
      height: 60,
      margin: const EdgeInsets.symmetric(horizontal: 16),
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _editedImages.length,
        itemBuilder: (context, index) {
          final isSelected = index == _currentIndex;

          return GestureDetector(
            onTap: () {
              HapticFeedback.lightImpact();
              _pageController.animateToPage(
                index,
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut,
              );
            },
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              width: 60,
              margin: const EdgeInsets.only(right: 8),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: isSelected
                      ? AppTheme.primaryBlue
                      : Colors.white.withValues(alpha: 0.3),
                  width: isSelected ? 2 : 1,
                ),
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(7),
                child: Image.file(
                  _editedImages[index],
                  fit: BoxFit.cover,
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildBottomControls() {
    return ClipRect(
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: Container(
          padding: EdgeInsets.only(
            bottom: MediaQuery.of(context).padding.bottom + 16,
            left: 16,
            right: 16,
            top: 16,
          ),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.bottomCenter,
              end: Alignment.topCenter,
              colors: [
                Colors.black.withValues(alpha: 0.6),
                Colors.black.withValues(alpha: 0.3),
                Colors.transparent,
              ],
            ),
          ),
          child: Row(
            children: [
              // Caption input
              Expanded(
                child: Container(
                  height: 44,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(22),
                    border: Border.all(
                      color: Colors.white.withValues(alpha: 0.2),
                      width: 0.5,
                    ),
                  ),
                  child: TextField(
                    controller: _captionController,
                    style: AppTextStyles.bodySmall.copyWith(
                      color: Colors.white,
                    ),
                    decoration: InputDecoration(
                      hintText: 'إضافة تعليق...',
                      hintStyle: AppTextStyles.bodySmall.copyWith(
                        color: Colors.white.withValues(alpha: 0.5),
                      ),
                      border: InputBorder.none,
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                    ),
                  ),
                ),
              ),

              const SizedBox(width: 12),

              // Send button
              GestureDetector(
                onTap: () {
                  HapticFeedback.lightImpact();
                  widget.onSend(_editedImages);
                },
                child: Container(
                  width: 56,
                  height: 44,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        AppTheme.primaryBlue,
                        AppTheme.primaryPurple,
                      ],
                    ),
                    shape: BoxShape.circle,
                    boxShadow: [
                      BoxShadow(
                        color: AppTheme.primaryBlue.withValues(alpha: 0.4),
                        blurRadius: 12,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: const Icon(
                    Icons.send_rounded,
                    color: Colors.white,
                    size: 22,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

----- FILE: ./media_grid_widget.dart -----
import 'package:flutter/material.dart';
import 'dart:ui';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/message.dart';

class MediaGridWidget extends StatelessWidget {
  final List<Message> messages;
  final Function(Message) onMediaTap;

  const MediaGridWidget({
    super.key,
    required this.messages,
    required this.onMediaTap,
  });

  @override
  Widget build(BuildContext context) {
    return GridView.builder(
      padding: const EdgeInsets.all(8), // Reduced from 12
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 3,
        crossAxisSpacing: 4, // Reduced from 8
        mainAxisSpacing: 4,
      ),
      itemCount: messages.length,
      physics: const BouncingScrollPhysics(),
      itemBuilder: (context, index) {
        final message = messages[index];
        return _MediaItem(
          message: message,
          index: index,
          onTap: () => onMediaTap(message),
        );
      },
    );
  }
}

class _MediaItem extends StatefulWidget {
  final Message message;
  final int index;
  final VoidCallback onTap;

  const _MediaItem({
    required this.message,
    required this.index,
    required this.onTap,
  });

  @override
  State<_MediaItem> createState() => _MediaItemState();
}

class _MediaItemState extends State<_MediaItem> 
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  bool _isPressed = false;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: Duration(milliseconds: 300 + (widget.index * 50)),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOutBack,
    ));
    
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    String? imageUrl;
    bool isVideo = false;

    if (widget.message.messageType == 'image' && 
        widget.message.attachments.isNotEmpty) {
      imageUrl = widget.message.attachments.first.fileUrl;
    } else if (widget.message.messageType == 'video' && 
               widget.message.attachments.isNotEmpty) {
      imageUrl = widget.message.attachments.first.thumbnailUrl;
      isVideo = true;
    }

    if (imageUrl == null) return const SizedBox.shrink();

    return ScaleTransition(
      scale: _scaleAnimation,
      child: GestureDetector(
        onTapDown: (_) => setState(() => _isPressed = true),
        onTapUp: (_) {
          setState(() => _isPressed = false);
          widget.onTap();
        },
        onTapCancel: () => setState(() => _isPressed = false),
        child: AnimatedScale(
          scale: _isPressed ? 0.95 : 1.0,
          duration: const Duration(milliseconds: 150),
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(8), // Reduced from 10
              boxShadow: [
                BoxShadow(
                  color: AppTheme.shadowDark.withValues(alpha: 0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: Stack(
                fit: StackFit.expand,
                children: [
                  // Image
                  CachedImageWidget(
                    imageUrl: imageUrl,
                    fit: BoxFit.cover,
                  ),
                  
                  // Gradient overlay for video
                  if (isVideo)
                    Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.topCenter,
                          end: Alignment.bottomCenter,
                          colors: [
                            Colors.transparent,
                            Colors.black.withValues(alpha: 0.3),
                          ],
                        ),
                      ),
                    ),
                  
                  // Play button for video
                  if (isVideo)
                    Center(
                      child: ClipRRect(
                        borderRadius: BorderRadius.circular(18),
                        child: BackdropFilter(
                          filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
                          child: Container(
                            width: 36, // Reduced from 40
                            height: 36,
                            decoration: BoxDecoration(
                              gradient: LinearGradient(
                                colors: [
                                  Colors.white.withValues(alpha: 0.2),
                                  Colors.white.withValues(alpha: 0.1),
                                ],
                              ),
                              shape: BoxShape.circle,
                              border: Border.all(
                                color: Colors.white.withValues(alpha: 0.3),
                                width: 0.5,
                              ),
                            ),
                            child: const Icon(
                              Icons.play_arrow_rounded,
                              color: Colors.white,
                              size: 20,
                            ),
                          ),
                        ),
                      ),
                    ),
                  
                  // Shimmer effect on load
                  if (_controller.isAnimating)
                    Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                          colors: [
                            Colors.white.withValues(alpha: 0.0),
                            Colors.white.withValues(alpha: 0.1),
                            Colors.white.withValues(alpha: 0.0),
                          ],
                          stops: const [0.0, 0.5, 1.0],
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
----- FILE: ./message_bubble_widget.dart -----
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/message.dart';
import '../../domain/entities/attachment.dart';
import '../bloc/chat_bloc.dart';
import 'message_status_indicator.dart';
import 'reaction_picker_widget.dart';
import 'attachment_preview_widget.dart';
import 'audio_message_widget.dart';

class MessageBubbleWidget extends StatefulWidget {
  final Message message;
  final bool isMe;
  final Message? previousMessage;
  final Message? nextMessage;
  final VoidCallback? onReply;
  final VoidCallback? onEdit;
  final VoidCallback? onDelete;
  final Function(String)? onReaction;
  final VoidCallback? onReplyTap;

  const MessageBubbleWidget({
    super.key,
    required this.message,
    required this.isMe,
    this.previousMessage,
    this.nextMessage,
    this.onReply,
    this.onEdit,
    this.onDelete,
    this.onReaction,
    this.onReplyTap,
  });

  @override
  State<MessageBubbleWidget> createState() => _MessageBubbleWidgetState();
}

class _MessageBubbleWidgetState extends State<MessageBubbleWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _fadeAnimation;
  bool _showReactions = false;

  // WhatsApp Colors
  Color get _bubbleColor {
    if (widget.isMe) {
      return AppTheme.isDark
          ? const Color(0xFF005C4B) // WhatsApp dark green
          : const Color(0xFFDCF8C6); // WhatsApp light green
    } else {
      return AppTheme.isDark
          ? const Color(0xFF1F2C34) // WhatsApp dark gray
          : const Color(0xFFFFFFFF); // White
    }
  }

  Color get _textColor {
    if (widget.isMe) {
      return AppTheme.isDark ? Colors.white : const Color(0xFF1F2C34);
    } else {
      return AppTheme.isDark
          ? const Color(0xFFE9EDEF)
          : const Color(0xFF1F2C34);
    }
  }

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _scaleAnimation = Tween<double>(
      begin: 0.95,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutBack,
    ));

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOut,
    ));

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  bool get _isFirstInGroup {
    if (widget.previousMessage == null) return true;
    return widget.previousMessage!.senderId != widget.message.senderId ||
        widget.message.createdAt
                .difference(widget.previousMessage!.createdAt)
                .inMinutes >
            5;
  }

  bool get _isLastInGroup {
    if (widget.nextMessage == null) return true;
    return widget.nextMessage!.senderId != widget.message.senderId ||
        widget.nextMessage!.createdAt
                .difference(widget.message.createdAt)
                .inMinutes >
            5;
  }

  Message? _findReplyMessage() {
    final replyId = widget.message.replyToMessageId;
    if (replyId == null) return null;

    final chatBloc = context.read<ChatBloc>();
    final chatState = chatBloc.state;
    if (chatState is! ChatLoaded) return null;

    final List<Message> messages =
        (chatState.messages[widget.message.conversationId] ?? [])
            .cast<Message>();

    for (final m in messages) {
      if (m.id == replyId) return m;
    }
    return null;
  }

  String _cleanContent(String? content) {
    if (content == null) return '';
    if (content.startsWith('::attref=')) {
      final endIdx = content.indexOf('::', '::attref='.length);
      if (endIdx > '::attref='.length) {
        return content.substring(endIdx + 2).trim();
      }
    }
    return content.trim();
  }

  @override
  Widget build(BuildContext context) {
    // Check if this is an audio message
    final bool isAudioMessage = widget.message.messageType == 'audio' ||
        (widget.message.attachments.isNotEmpty &&
            widget.message.attachments.first.isAudio);

    return FadeTransition(
      opacity: _fadeAnimation,
      child: ScaleTransition(
        scale: _scaleAnimation,
        child: Padding(
          padding: EdgeInsets.only(
            top: _isFirstInGroup ? 8 : 2,
            bottom: _isLastInGroup ? 8 : 2,
            left: widget.isMe ? MediaQuery.of(context).size.width * 0.15 : 12,
            right: widget.isMe ? 12 : MediaQuery.of(context).size.width * 0.15,
          ),
          child: Column(
            crossAxisAlignment:
                widget.isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
            children: [
              GestureDetector(
                onLongPress: _showOptions,
                onDoubleTap: _handleDoubleTap,
                child: Container(
                  constraints: BoxConstraints(
                    maxWidth: MediaQuery.of(context).size.width * 0.75,
                    minWidth: isAudioMessage ? 250 : 0,
                  ),
                  child: CustomPaint(
                    painter: _BubblePainter(
                      color: _bubbleColor,
                      isMe: widget.isMe,
                      hasNip: _isLastInGroup,
                    ),
                    child: Container(
                      padding: EdgeInsets.only(
                        left: widget.isMe ? 8 : 12,
                        right: widget.isMe ? 12 : 8,
                        top: 6,
                        bottom: 6,
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          if (widget.message.replyToMessageId != null)
                            _buildReplyPreview(),
                          if (isAudioMessage)
                            _buildAudioMessage()
                          else
                            _buildMessageContent(),
                          const SizedBox(height: 2),
                          _buildMessageFooter(),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
              if (widget.message.reactions.isNotEmpty || _showReactions)
                Padding(
                  padding: const EdgeInsets.only(top: 4),
                  child: _showReactions
                      ? ReactionPickerWidget(
                          onReaction: (reaction) {
                            widget.onReaction?.call(reaction);
                            setState(() => _showReactions = false);
                          },
                        )
                      : _buildMinimalReactions(),
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAudioMessage() {
    Attachment? audioAttachment;

    for (final attachment in widget.message.attachments) {
      if (attachment.isAudio ||
          attachment.contentType.startsWith('audio/') ||
          _isAudioExtension(attachment.fileName)) {
        audioAttachment = attachment;
        break;
      }
    }

    audioAttachment ??= widget.message.attachments.isNotEmpty
        ? widget.message.attachments.first
        : null;

    if (audioAttachment == null) {
      return Container(
        padding: const EdgeInsets.all(12),
        child: Row(
          children: [
            Icon(
              Icons.error_outline,
              color: _textColor.withValues(alpha: 0.5),
              size: 20,
            ),
            const SizedBox(width: 8),
            Text(
              'لا يمكن تحميل الملف الصوتي',
              style: AppTextStyles.bodySmall.copyWith(
                color: _textColor.withValues(alpha: 0.5),
                fontSize: 12,
              ),
            ),
          ],
        ),
      );
    }

    // احصل على معلومات المرسل من ChatBloc
    String? senderName;
    String? senderAvatar;

    if (!widget.isMe) {
      final chatBloc = context.read<ChatBloc>();
      final chatState = chatBloc.state;
      if (chatState is ChatLoaded) {
        // ابحث عن المحادثة الحالية
        final conversation = chatState.conversations.firstWhere(
          (c) => c.id == widget.message.conversationId,
          orElse: () => chatState.conversations.first,
        );

        // احصل على معلومات المرسل من المشاركين
        final sender = conversation.participants.firstWhere(
          (p) => p.id == widget.message.senderId,
          orElse: () => conversation.participants.first,
        );

        senderName = sender.name;
        senderAvatar = sender.profileImage;
      }
    }

    return AudioMessageWidget(
      attachment: audioAttachment,
      isMe: widget.isMe,
      bubbleColor: _bubbleColor,
      waveformColor: widget.isMe
          ? (AppTheme.isDark
              ? const Color(0xFF054640)
              : const Color(0xFF054640))
          : (AppTheme.isDark
              ? const Color(0xFF06CF9C)
              : const Color(0xFF06CF9C)),
      senderName: senderName ?? widget.message.senderName,
      senderAvatar: senderAvatar,
    );
  }

  Widget _buildReplyPreview() {
    final replyMessage = _findReplyMessage();

    return Padding(
      padding: const EdgeInsets.only(bottom: 6),
      child: GestureDetector(
        onTap: () {
          HapticFeedback.selectionClick();
          widget.onReplyTap?.call();
        },
        child: Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: widget.isMe
                ? const Color(0xFF00483B).withValues(alpha: 0.3)
                : const Color(0xFF000000).withValues(alpha: 0.08),
            borderRadius: BorderRadius.circular(6),
            border: Border(
              left: BorderSide(
                color: widget.isMe
                    ? const Color(0xFF7FC15E)
                    : AppTheme.primaryBlue,
                width: 3,
              ),
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                replyMessage?.senderName ?? 'Unknown',
                style: AppTextStyles.caption.copyWith(
                  color: widget.isMe
                      ? const Color(0xFF7FC15E)
                      : AppTheme.primaryBlue,
                  fontWeight: FontWeight.w600,
                  fontSize: 11,
                ),
              ),
              const SizedBox(height: 2),
              Text(
                _cleanContent(replyMessage?.content) ?? 'رسالة محذوفة',
                style: AppTextStyles.bodySmall.copyWith(
                  color: _textColor.withValues(alpha: 0.8),
                  fontSize: 12,
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildMessageContent() {
    if (widget.message.isDeleted) {
      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.block,
            size: 14,
            color: _textColor.withValues(alpha: 0.5),
          ),
          const SizedBox(width: 6),
          Text(
            'تم حذف هذه الرسالة',
            style: AppTextStyles.bodySmall.copyWith(
              color: _textColor.withValues(alpha: 0.5),
              fontStyle: FontStyle.italic,
              fontSize: 13,
            ),
          ),
        ],
      );
    }

    final displayContent = _cleanContent(widget.message.content);
    final nonImageAttachments = widget.message.attachments
        .where((a) => !a.isImage && !a.isAudio)
        .toList();

    if (displayContent.isEmpty && widget.message.attachments.isEmpty) {
      return const SizedBox.shrink();
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.min,
      children: [
        if (displayContent.isNotEmpty)
          Text(
            displayContent,
            style: AppTextStyles.bodyMedium.copyWith(
              color: _textColor,
              fontSize: 14,
              height: 1.4,
            ),
          ),
        if (nonImageAttachments.isNotEmpty && displayContent.isNotEmpty)
          const SizedBox(height: 8),
        ...nonImageAttachments.map((att) => Padding(
              padding: const EdgeInsets.only(top: 4),
              child: AttachmentPreviewWidget(
                attachment: att,
                isMe: widget.isMe,
                onTap: () {},
              ),
            )),
      ],
    );
  }

  Widget _buildMessageFooter() {
    return Row(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        if (widget.message.isEdited) ...[
          Text(
            'معدّل',
            style: AppTextStyles.caption.copyWith(
              color: _textColor.withValues(alpha: 0.5),
              fontSize: 10,
            ),
          ),
          const SizedBox(width: 4),
        ],
        Text(
          _formatTime(widget.message.createdAt),
          style: AppTextStyles.caption.copyWith(
            color: _textColor.withValues(alpha: 0.6),
            fontSize: 11,
          ),
        ),
        if (widget.isMe) ...[
          const SizedBox(width: 4),
          MessageStatusIndicator(
            status: widget.message.status,
            color: widget.message.status == 'read'
                ? const Color(0xFF53BDEB)
                : _textColor.withValues(alpha: 0.6),
            size: 14,
          ),
        ],
      ],
    );
  }

  Widget _buildMinimalReactions() {
    final groupedReactions = <String, int>{};
    for (final reaction in widget.message.reactions) {
      groupedReactions[reaction.reactionType] =
          (groupedReactions[reaction.reactionType] ?? 0) + 1;
    }

    return Wrap(
      spacing: 4,
      runSpacing: 4,
      children: groupedReactions.entries.map((entry) {
        return Container(
          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
          decoration: BoxDecoration(
            color: AppTheme.darkCard.withValues(alpha: 0.8),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: AppTheme.darkBorder.withValues(alpha: 0.3),
              width: 0.5,
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(_getEmojiForReaction(entry.key),
                  style: const TextStyle(fontSize: 12)),
              if (entry.value > 1) ...[
                const SizedBox(width: 3),
                Text(
                  entry.value.toString(),
                  style: AppTextStyles.caption.copyWith(
                    fontSize: 10,
                    fontWeight: FontWeight.w600,
                    color: AppTheme.textWhite.withValues(alpha: 0.7),
                  ),
                ),
              ],
            ],
          ),
        );
      }).toList(),
    );
  }

  void _showOptions() {
    HapticFeedback.lightImpact();
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) {
        return _MessageOptionsSheet(
          isMe: widget.isMe,
          onReply: widget.onReply,
          onEdit: widget.onEdit,
          onDelete: widget.onDelete,
        );
      },
    );
  }

  void _handleDoubleTap() {
    HapticFeedback.lightImpact();
    setState(() {
      _showReactions = !_showReactions;
    });
  }

  String _getEmojiForReaction(String reactionType) {
    switch (reactionType) {
      case 'like':
        return '👍';
      case 'love':
        return '❤️';
      case 'laugh':
        return '😂';
      case 'sad':
        return '😢';
      case 'angry':
        return '😠';
      case 'wow':
        return '😮';
      default:
        return '👍';
    }
  }

  String _formatTime(DateTime dateTime) {
    return '${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  bool _isAudioExtension(String? fileName) {
    if (fileName == null || fileName.trim().isEmpty) {
      return false;
    }

    final normalizedName =
        fileName.split('/').last.split('\\').last.split('?').first.trim();

    if (!normalizedName.contains('.')) {
      return false;
    }

    final extension = normalizedName
        .substring(normalizedName.lastIndexOf('.') + 1)
        .toLowerCase();

    const audioExtensions = <String>{
      'mp3',
      'wav',
      'aac',
      'm4a',
      'ogg',
      'oga',
      'opus',
      'flac',
      'amr',
      'wma',
      'aiff',
      'caf',
    };

    return audioExtensions.contains(extension);
  }
}

// Custom painter for WhatsApp-style bubble with tail
class _BubblePainter extends CustomPainter {
  final Color color;
  final bool isMe;
  final bool hasNip;

  _BubblePainter({
    required this.color,
    required this.isMe,
    required this.hasNip,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..style = PaintingStyle.fill;

    final path = Path();
    const radius = Radius.circular(12);
    const smallRadius = Radius.circular(6);

    if (isMe) {
      // Right-aligned bubble with tail
      path.addRRect(RRect.fromRectAndCorners(
        Rect.fromLTWH(0, 0, size.width - 8, size.height),
        topLeft: radius,
        topRight: hasNip ? smallRadius : radius,
        bottomLeft: radius,
        bottomRight: radius,
      ));

      if (hasNip) {
        // Add tail
        path.moveTo(size.width - 8, 10);
        path.lineTo(size.width, 0);
        path.lineTo(size.width - 8, 3);
      }
    } else {
      // Left-aligned bubble with tail
      path.addRRect(RRect.fromRectAndCorners(
        Rect.fromLTWH(8, 0, size.width - 8, size.height),
        topLeft: hasNip ? smallRadius : radius,
        topRight: radius,
        bottomLeft: radius,
        bottomRight: radius,
      ));

      if (hasNip) {
        // Add tail
        path.moveTo(8, 10);
        path.lineTo(0, 0);
        path.lineTo(8, 3);
      }
    }

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

// Bottom Sheet for message options
class _MessageOptionsSheet extends StatelessWidget {
  final bool isMe;
  final VoidCallback? onReply;
  final VoidCallback? onEdit;
  final VoidCallback? onDelete;

  const _MessageOptionsSheet({
    required this.isMe,
    this.onReply,
    this.onEdit,
    this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: AppTheme.isDark ? const Color(0xFF1F2C34) : Colors.white,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 36,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 12),
              decoration: BoxDecoration(
                color: AppTheme.isDark
                    ? const Color(0xFF8696A0)
                    : const Color(0xFFD1D7DB),
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            if (onReply != null)
              _buildOption(
                context,
                icon: Icons.reply_rounded,
                title: 'رد',
                onTap: () {
                  Navigator.pop(context);
                  onReply!();
                },
              ),
            if (isMe && onEdit != null)
              _buildOption(
                context,
                icon: Icons.edit_rounded,
                title: 'تعديل',
                onTap: () {
                  Navigator.pop(context);
                  onEdit!();
                },
              ),
            _buildOption(
              context,
              icon: Icons.copy_rounded,
              title: 'نسخ',
              onTap: () {
                Navigator.pop(context);
                // Copy logic
              },
            ),
            if (isMe && onDelete != null)
              _buildOption(
                context,
                icon: Icons.delete_rounded,
                title: 'حذف',
                onTap: () {
                  Navigator.pop(context);
                  onDelete!();
                },
                isDestructive: true,
              ),
            const SizedBox(height: 8),
          ],
        ),
      ),
    );
  }

  Widget _buildOption(
    BuildContext context, {
    required IconData icon,
    required String title,
    required VoidCallback onTap,
    bool isDestructive = false,
  }) {
    return InkWell(
      onTap: onTap,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
        child: Row(
          children: [
            Icon(
              icon,
              color: isDestructive
                  ? const Color(0xFFEF4444)
                  : (AppTheme.isDark
                      ? const Color(0xFFE9EDEF)
                      : const Color(0xFF667781)),
              size: 22,
            ),
            const SizedBox(width: 16),
            Text(
              title,
              style: AppTextStyles.bodyMedium.copyWith(
                color: isDestructive
                    ? const Color(0xFFEF4444)
                    : (AppTheme.isDark
                        ? const Color(0xFFE9EDEF)
                        : const Color(0xFF111B21)),
                fontSize: 15,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

----- FILE: ./message_input_widget.dart -----
import 'dart:io';
import 'dart:async';
import 'package:bookn_cp_app/features/chat/presentation/widgets/multi_image_picker_modal.dart';
import 'package:bookn_cp_app/features/chat/presentation/widgets/image_preview_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:ui';
import 'package:image_picker/image_picker.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:record/record.dart';
import 'package:photo_manager/photo_manager.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../domain/entities/message.dart';
import '../bloc/chat_bloc.dart';
import '../models/image_upload_info.dart';

class MessageInputWidget extends StatefulWidget {
  final TextEditingController controller;
  final FocusNode focusNode;
  final String conversationId;
  final String? replyToMessageId;
  final Message? editingMessage;
  final Function(String) onSend;
  final VoidCallback? onAttachment;
  final VoidCallback? onLocation;
  final VoidCallback? onCancelReply;
  final VoidCallback? onCancelEdit;

  const MessageInputWidget({
    super.key,
    required this.controller,
    required this.focusNode,
    required this.conversationId,
    this.replyToMessageId,
    this.editingMessage,
    required this.onSend,
    this.onAttachment,
    this.onLocation,
    this.onCancelReply,
    this.onCancelEdit,
  });

  @override
  State<MessageInputWidget> createState() => _MessageInputWidgetState();
}

class _MessageInputWidgetState extends State<MessageInputWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _sendButtonAnimation;
  late Animation<double> _recordAnimation;

  final AudioRecorder _audioRecorder = AudioRecorder();
  bool _isRecording = false;
  bool _showAttachmentOptions = false;
  bool _showEmojiPicker = false;
  String _recordingPath = '';
  DateTime? _recordStartAt;
  Timer? _recordTimer;
  String _recordElapsedText = '0:00';
  bool _recordCancelled = false;

  Timer? _progressTimer;
  double _currentDisplayedProgress = 0.0;
  double _targetProgress = 0.0;
  String? _currentUploadId;

  // Emoji categories - احترافي
  final Map<String, List<String>> _emojiCategories = {
    'وجوه': [
      '😀',
      '😃',
      '😄',
      '😁',
      '😆',
      '😅',
      '🤣',
      '😂',
      '🙂',
      '🙃',
      '😉',
      '😊',
      '😇',
      '🥰',
      '😍',
      '🤩',
      '😘',
      '😗',
      '😚',
      '😙',
      '😋',
      '😛',
      '😜',
      '🤪',
      '😝',
      '🤑',
      '🤗',
      '🤭',
      '🤫',
      '🤔',
    ],
    'إيماءات': [
      '🤐',
      '🤨',
      '😐',
      '😑',
      '😶',
      '😏',
      '😒',
      '🙄',
      '😬',
      '🤥',
      '😌',
      '😔',
      '😪',
      '🤤',
      '😴',
      '😷',
      '🤒',
      '🤕',
      '🤢',
      '🤮',
    ],
    'عواطف': [
      '❤️',
      '🧡',
      '💛',
      '💚',
      '💙',
      '💜',
      '🖤',
      '🤍',
      '🤎',
      '💔',
      '❣️',
      '💕',
      '💞',
      '💓',
      '💗',
      '💖',
      '💘',
      '💝',
      '💟',
      '☮️',
    ],
    'أيادي': [
      '👍',
      '👎',
      '👌',
      '✌️',
      '🤞',
      '🤟',
      '🤘',
      '🤙',
      '👈',
      '👉',
      '👆',
      '👇',
      '☝️',
      '✋',
      '🤚',
      '🖐',
      '🖖',
      '👋',
      '🤝',
      '🙏',
    ],
    'حيوانات': [
      '🐶',
      '🐱',
      '🐭',
      '🐹',
      '🐰',
      '🦊',
      '🐻',
      '🐼',
      '🐨',
      '🐯',
      '🦁',
      '🐮',
      '🐷',
      '🐸',
      '🐵',
      '🐔',
      '🐧',
      '🐦',
      '🐤',
      '🦆',
    ],
    'طعام': [
      '🍕',
      '🍔',
      '🍟',
      '🌭',
      '🍿',
      '🥓',
      '🥚',
      '🍳',
      '🥞',
      '🧇',
      '🧈',
      '🍞',
      '🥐',
      '🥖',
      '🥨',
      '🧀',
      '🥗',
      '🥙',
      '🌮',
      '🌯',
    ],
    'رياضة': [
      '⚽',
      '🏀',
      '🏈',
      '⚾',
      '🥎',
      '🎾',
      '🏐',
      '🏉',
      '🥏',
      '🎱',
      '🏓',
      '🏸',
      '🏒',
      '🏑',
      '🥍',
      '🏏',
      '🥅',
      '⛳',
      '🏹',
      '🎣',
    ],
    'رموز': [
      '✨',
      '⭐',
      '🌟',
      '💫',
      '✅',
      '❌',
      '❗',
      '❓',
      '💯',
      '🔥',
      '💥',
      '💢',
      '💦',
      '💨',
      '🕐',
      '⏰',
      '⏱',
      '⏲',
      '🔔',
      '📢',
    ],
  };

  String _selectedCategory = 'وجوه';
  final ScrollController _emojiScrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 250),
      vsync: this,
    );
    _sendButtonAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutBack,
    ));
    _recordAnimation = Tween<double>(
      begin: 0.9,
      end: 1.1,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));

    widget.controller.addListener(_onTextChanged);

    // إغلاق الإيموجي عند التركيز على حقل الإدخال
    widget.focusNode.addListener(() {
      if (widget.focusNode.hasFocus && _showEmojiPicker) {
        setState(() {
          _showEmojiPicker = false;
        });
      }
    });
  }

  @override
  void dispose() {
    _progressTimer?.cancel();
    _recordTimer?.cancel();
    _animationController.dispose();
    _emojiScrollController.dispose();
    super.dispose();
  }

  void _startSmoothProgress(String baseUploadId) {
    _currentUploadId = baseUploadId;
    _currentDisplayedProgress = 0.0;
    _targetProgress = 0.0;

    _progressTimer?.cancel();
    _progressTimer = Timer.periodic(const Duration(milliseconds: 50), (timer) {
      if (!mounted || _currentUploadId == null) {
        timer.cancel();
        return;
      }

      if (_currentDisplayedProgress < _targetProgress) {
        final gap = _targetProgress - _currentDisplayedProgress;
        _currentDisplayedProgress += gap * 0.1;
        if (_currentDisplayedProgress > _targetProgress) {
          _currentDisplayedProgress = _targetProgress;
        }

        final bloc = context.read<ChatBloc>();
        final baseId =
            _currentUploadId!.substring(0, _currentUploadId!.lastIndexOf('_'));

        final state = bloc.state;
        if (state is ChatLoaded) {
          final currentUploads = state.uploadingImages[widget.conversationId] ??
              const <ImageUploadInfo>[];
          for (final u in currentUploads) {
            bloc.add(UpdateImageUploadProgressEvent(
              conversationId: widget.conversationId,
              uploadId: u.id,
              progress: _currentDisplayedProgress,
            ));
          }
        }
      }

      if (_currentDisplayedProgress >= 1.0) {
        timer.cancel();
      }
    });
  }

  void _updateTargetProgress(double progress) {
    _targetProgress = progress;
  }

  void _stopSmoothProgress() {
    _progressTimer?.cancel();
    _currentDisplayedProgress = 0.0;
    _targetProgress = 0.0;
    _currentUploadId = null;
  }

  void _onTextChanged() {
    if (widget.controller.text.isNotEmpty && _sendButtonAnimation.value == 0) {
      _animationController.forward();
    } else if (widget.controller.text.isEmpty &&
        _sendButtonAnimation.value == 1) {
      _animationController.reverse();
    }
  }

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 15, sigmaY: 15),
        child: Container(
          padding: EdgeInsets.only(
            left: 8,
            right: 8,
            top: 4,
            bottom: MediaQuery.of(context).viewInsets.bottom > 0 ? 4 : 8,
          ),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [
                AppTheme.darkCard.withValues(alpha: 0.85),
                AppTheme.darkCard.withValues(alpha: 0.8),
              ],
            ),
            border: Border(
              top: BorderSide(
                color: AppTheme.darkBorder.withValues(alpha: 0.03),
                width: 0.5,
              ),
            ),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (_isRecording) _buildRecordingOverlay(),
              if (_showAttachmentOptions) _buildMinimalAttachmentOptions(),
              if (_showEmojiPicker) _buildProfessionalEmojiPicker(),
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  _buildMinimalAttachmentButton(),
                  const SizedBox(width: 5),
                  Expanded(child: _buildMinimalInputField()),
                  const SizedBox(width: 5),
                  _buildMinimalActionButton(),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildMinimalAttachmentOptions() {
    return Container(
      height: 64,
      margin: const EdgeInsets.only(bottom: 6),
      child: ListView(
        scrollDirection: Axis.horizontal,
        physics: const BouncingScrollPhysics(),
        children: [
          _MinimalAttachmentOption(
            icon: Icons.image_rounded,
            label: 'صورة',
            gradient: [
              AppTheme.primaryBlue.withValues(alpha: 0.8),
              AppTheme.primaryBlue.withValues(alpha: 0.6),
            ],
            onTap: () => _pickImage(ImageSource.gallery),
          ),
          _MinimalAttachmentOption(
            icon: Icons.camera_alt_rounded,
            label: 'كاميرا',
            gradient: [
              AppTheme.neonGreen.withValues(alpha: 0.8),
              AppTheme.neonGreen.withValues(alpha: 0.6),
            ],
            onTap: () => _pickImage(ImageSource.camera),
          ),
          _MinimalAttachmentOption(
            icon: Icons.videocam_rounded,
            label: 'فيديو',
            gradient: [
              AppTheme.error.withValues(alpha: 0.8),
              AppTheme.error.withValues(alpha: 0.6),
            ],
            onTap: _pickVideo,
          ),
          _MinimalAttachmentOption(
            icon: Icons.attach_file_rounded,
            label: 'ملف',
            gradient: [
              AppTheme.warning.withValues(alpha: 0.8),
              AppTheme.warning.withValues(alpha: 0.6),
            ],
            onTap: _pickFile,
          ),
          _MinimalAttachmentOption(
            icon: Icons.location_on_rounded,
            label: 'موقع',
            gradient: [
              AppTheme.primaryPurple.withValues(alpha: 0.8),
              AppTheme.primaryPurple.withValues(alpha: 0.6),
            ],
            onTap: () {
              setState(() {
                _showAttachmentOptions = false;
              });
              widget.onLocation?.call();
            },
          ),
        ],
      ),
    );
  }

  // Emoji Picker احترافي جداً
  Widget _buildProfessionalEmojiPicker() {
    return Container(
      height: 280,
      margin: const EdgeInsets.only(bottom: 6),
      decoration: BoxDecoration(
        gradient: LinearGradient(colors: [
          AppTheme.darkCard.withValues(alpha: 0.95),
          AppTheme.darkCard.withValues(alpha: 0.9),
        ]),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: AppTheme.darkBorder.withValues(alpha: 0.08),
          width: 0.5,
        ),
      ),
      child: Column(
        children: [
          // Categories tabs
          Container(
            height: 44,
            padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 4),
            decoration: BoxDecoration(
              border: Border(
                bottom: BorderSide(
                  color: AppTheme.darkBorder.withValues(alpha: 0.05),
                  width: 0.5,
                ),
              ),
            ),
            child: ListView(
              scrollDirection: Axis.horizontal,
              children: _emojiCategories.keys.map((category) {
                final isSelected = category == _selectedCategory;
                return GestureDetector(
                  onTap: () {
                    HapticFeedback.selectionClick();
                    setState(() {
                      _selectedCategory = category;
                    });
                  },
                  child: AnimatedContainer(
                    duration: const Duration(milliseconds: 200),
                    margin: const EdgeInsets.symmetric(horizontal: 3),
                    padding:
                        const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      gradient: isSelected
                          ? LinearGradient(colors: [
                              AppTheme.primaryBlue.withValues(alpha: 0.8),
                              AppTheme.primaryPurple.withValues(alpha: 0.6),
                            ])
                          : null,
                      color: !isSelected
                          ? AppTheme.darkCard.withValues(alpha: 0.3)
                          : null,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: isSelected
                            ? Colors.white.withValues(alpha: 0.2)
                            : AppTheme.darkBorder.withValues(alpha: 0.1),
                        width: 0.5,
                      ),
                    ),
                    child: Center(
                      child: Text(
                        category,
                        style: AppTextStyles.caption.copyWith(
                          color: isSelected
                              ? Colors.white
                              : AppTheme.textMuted.withValues(alpha: 0.6),
                          fontSize: 11,
                          fontWeight:
                              isSelected ? FontWeight.w600 : FontWeight.w400,
                        ),
                      ),
                    ),
                  ),
                );
              }).toList(),
            ),
          ),
          // Emojis grid
          Expanded(
            child: GridView.builder(
              controller: _emojiScrollController,
              padding: const EdgeInsets.all(8),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 8,
                mainAxisSpacing: 4,
                crossAxisSpacing: 4,
              ),
              itemCount: _emojiCategories[_selectedCategory]!.length,
              itemBuilder: (context, index) {
                final emoji = _emojiCategories[_selectedCategory]![index];
                return GestureDetector(
                  onTap: () {
                    HapticFeedback.selectionClick();
                    _insertEmoji(emoji);
                  },
                  child: Container(
                    decoration: BoxDecoration(
                      color: AppTheme.darkCard.withValues(alpha: 0.3),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Center(
                      child: Text(
                        emoji,
                        style: const TextStyle(fontSize: 24),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  void _insertEmoji(String emoji) {
    final text = widget.controller.text;
    final selection = widget.controller.selection;
    final base = selection.baseOffset;
    final extent = selection.extentOffset;

    if (base >= 0 &&
        extent >= 0 &&
        base <= text.length &&
        extent <= text.length) {
      final start = text.substring(0, base);
      final end = text.substring(extent);
      widget.controller.text = '$start$emoji$end';
      final newPos = base + emoji.length;
      widget.controller.selection = TextSelection.collapsed(offset: newPos);
    } else {
      widget.controller.text = '$text$emoji';
      widget.controller.selection =
          TextSelection.collapsed(offset: widget.controller.text.length);
    }
  }

  Widget _buildMinimalAttachmentButton() {
    return GestureDetector(
      onTap: () {
        HapticFeedback.lightImpact();
        setState(() {
          _showAttachmentOptions = !_showAttachmentOptions;
          if (_showAttachmentOptions) {
            _showEmojiPicker = false;
          }
        });
      },
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        width: 32,
        height: 32,
        decoration: BoxDecoration(
          gradient: _showAttachmentOptions
              ? LinearGradient(
                  colors: [
                    AppTheme.primaryBlue.withValues(alpha: 0.8),
                    AppTheme.primaryPurple.withValues(alpha: 0.7),
                  ],
                )
              : null,
          color: !_showAttachmentOptions
              ? AppTheme.darkCard.withValues(alpha: 0.4)
              : null,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(
            color: _showAttachmentOptions
                ? Colors.white.withValues(alpha: 0.15)
                : AppTheme.darkBorder.withValues(alpha: 0.15),
            width: 0.5,
          ),
        ),
        child: AnimatedRotation(
          duration: const Duration(milliseconds: 200),
          turns: _showAttachmentOptions ? 0.125 : 0,
          child: Icon(
            Icons.add_rounded,
            color: _showAttachmentOptions
                ? Colors.white
                : AppTheme.textMuted.withValues(alpha: 0.5),
            size: 18,
          ),
        ),
      ),
    );
  }

  Widget _buildMinimalInputField() {
    return Container(
      constraints: const BoxConstraints(
        minHeight: 32,
        maxHeight: 80,
      ),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            AppTheme.darkCard.withValues(alpha: 0.5),
            AppTheme.darkCard.withValues(alpha: 0.3),
          ],
        ),
        borderRadius: BorderRadius.circular(10),
        border: Border.all(
          color: widget.focusNode.hasFocus
              ? AppTheme.primaryBlue.withValues(alpha: 0.2)
              : AppTheme.darkBorder.withValues(alpha: 0.08),
          width: 0.5,
        ),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          Expanded(
            child: TextField(
              controller: widget.controller,
              focusNode: widget.focusNode,
              maxLines: null,
              textInputAction: TextInputAction.newline,
              style: AppTextStyles.bodySmall.copyWith(
                fontSize: 12,
                color: AppTheme.textWhite.withValues(alpha: 0.9),
                height: 1.3,
              ),
              decoration: InputDecoration(
                hintText: widget.editingMessage != null
                    ? 'تعديل الرسالة...'
                    : widget.replyToMessageId != null
                        ? 'اكتب ردك...'
                        : 'اكتب رسالة...',
                hintStyle: AppTextStyles.bodySmall.copyWith(
                  color: AppTheme.textMuted.withValues(alpha: 0.35),
                  fontSize: 12,
                ),
                border: InputBorder.none,
                contentPadding: const EdgeInsets.symmetric(
                  horizontal: 8,
                  vertical: 6,
                ),
                isDense: true,
              ),
              onSubmitted: (text) {
                if (text.trim().isNotEmpty) {
                  widget.onSend(text);
                }
              },
            ),
          ),
          GestureDetector(
            onTap: () {
              HapticFeedback.lightImpact();
              setState(() {
                _showEmojiPicker = !_showEmojiPicker;
                if (_showEmojiPicker) {
                  _showAttachmentOptions = false;
                  // إلغاء التركيز على حقل الإدخال
                  FocusScope.of(context).unfocus();
                } else {
                  // إعادة التركيز عند إغلاق الإيموجي
                  widget.focusNode.requestFocus();
                }
              });
            },
            child: Container(
              padding: const EdgeInsets.all(6),
              child: Icon(
                _showEmojiPicker
                    ? Icons.keyboard
                    : Icons.emoji_emotions_outlined,
                color: _showEmojiPicker
                    ? AppTheme.primaryBlue.withValues(alpha: 0.7)
                    : AppTheme.textMuted.withValues(alpha: 0.35),
                size: 16,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMinimalActionButton() {
    return AnimatedBuilder(
      animation: _sendButtonAnimation,
      builder: (context, child) {
        final showSend = _sendButtonAnimation.value > 0.5;

        return GestureDetector(
          onTap: () {
            if (_isRecording) {
              _stopRecording();
            } else if (showSend) {
              _sendMessage();
            } else {
              _startRecording();
            }
          },
          onLongPress: !showSend ? _startRecording : null,
          onLongPressEnd: !showSend ? (_) => _stopRecording() : null,
          onLongPressMoveUpdate: !showSend
              ? (details) {
                  // Slide left to cancel
                  if (!_recordCancelled && details.offsetFromOrigin.dx < -60) {
                    _cancelRecording();
                  }
                }
              : null,
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 200),
            width: 32,
            height: 32,
            decoration: BoxDecoration(
              gradient: showSend || _isRecording
                  ? LinearGradient(
                      colors: [
                        AppTheme.primaryBlue.withValues(alpha: 0.8),
                        AppTheme.primaryPurple.withValues(alpha: 0.7),
                      ],
                    )
                  : null,
              color: !showSend && !_isRecording
                  ? AppTheme.darkCard.withValues(alpha: 0.4)
                  : null,
              shape: BoxShape.circle,
              border: Border.all(
                color: showSend || _isRecording
                    ? Colors.white.withValues(alpha: 0.15)
                    : AppTheme.darkBorder.withValues(alpha: 0.15),
                width: 0.5,
              ),
              boxShadow: showSend || _isRecording
                  ? [
                      BoxShadow(
                        color: AppTheme.primaryBlue.withValues(alpha: 0.2),
                        blurRadius: 6,
                        offset: const Offset(0, 1),
                      ),
                    ]
                  : null,
            ),
            child: Center(
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 200),
                transitionBuilder: (child, animation) {
                  return ScaleTransition(
                    scale: animation,
                    child: FadeTransition(
                      opacity: animation,
                      child: child,
                    ),
                  );
                },
                child: _isRecording
                    ? _buildMinimalRecordingIndicator()
                    : Icon(
                        showSend ? Icons.send_rounded : Icons.mic_rounded,
                        color: showSend || _isRecording
                            ? Colors.white
                            : AppTheme.textMuted.withValues(alpha: 0.5),
                        size: 16,
                        key: ValueKey(showSend),
                      ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildMinimalRecordingIndicator() {
    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return Transform.scale(
          scale: _recordAnimation.value,
          child: Container(
            width: 10,
            height: 10,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  AppTheme.error.withValues(alpha: 0.8),
                  AppTheme.error.withValues(alpha: 0.6),
                ],
              ),
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: AppTheme.error.withValues(alpha: 0.4),
                  blurRadius: 6,
                  spreadRadius: 1,
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void _sendMessage() {
    final text = widget.controller.text.trim();
    if (text.isNotEmpty) {
      HapticFeedback.lightImpact();
      widget.onSend(text);
    }
  }

  Future<void> _startRecording() async {
    HapticFeedback.mediumImpact();

    final permission = await Permission.microphone.request();
    if (!permission.isGranted) return;

    if (await _audioRecorder.hasPermission()) {
      final directory = Directory.systemTemp;
      _recordingPath =
          '${directory.path}/audio_${DateTime.now().millisecondsSinceEpoch}.m4a';

      await _audioRecorder.start(
        const RecordConfig(),
        path: _recordingPath,
      );

      setState(() {
        _isRecording = true;
        _recordCancelled = false;
        _recordStartAt = DateTime.now();
        _recordElapsedText = '0:00';
      });

      _animationController.repeat(reverse: true);

      _recordTimer?.cancel();
      _recordTimer = Timer.periodic(const Duration(milliseconds: 200), (_) {
        if (!mounted || !_isRecording || _recordStartAt == null) return;
        final elapsed = DateTime.now().difference(_recordStartAt!);
        if (elapsed.inSeconds >= 180) {
          // حد أقصى 3 دقائق
          _stopRecording();
          return;
        }
        setState(() {
          final m = elapsed.inMinutes;
          final s = elapsed.inSeconds % 60;
          _recordElapsedText = '$m:${s.toString().padLeft(2, '0')}';
        });
      });
    }
  }

  Future<void> _stopRecording() async {
    if (!_isRecording) return;

    HapticFeedback.mediumImpact();
    _animationController.stop();

    final path = await _audioRecorder.stop();

    setState(() {
      _isRecording = false;
    });

    _recordTimer?.cancel();

    if (path != null) {
      if (_recordCancelled) {
        try {
          File(path).existsSync() ? File(path).deleteSync() : null;
        } catch (_) {}
      } else {
        _sendAudioMessage(path);
      }
    }
  }

  void _sendAudioMessage(String path) {
    try {
      final bloc = context.read<ChatBloc>();
      // Upload audio then send message referencing attachment
      bloc.add(UploadAttachmentEvent(
        conversationId: widget.conversationId,
        filePath: path,
        messageType: 'audio',
      ));
    } catch (_) {}
  }

  void _cancelRecording() {
    if (!_isRecording || _recordCancelled) return;
    HapticFeedback.lightImpact();
    setState(() {
      _recordCancelled = true;
    });
    // Stop immediately
    _stopRecording();
  }

  Widget _buildRecordingOverlay() {
    return Container(
      margin: const EdgeInsets.only(bottom: 6),
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 8),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            AppTheme.error.withValues(alpha: 0.15),
            AppTheme.error.withValues(alpha: 0.08),
          ],
        ),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: AppTheme.error.withValues(alpha: 0.25),
          width: 0.5,
        ),
      ),
      child: Row(
        children: [
          // pulsating red dot
          _buildMinimalRecordingIndicator(),
          const SizedBox(width: 8),
          Text(
            _recordElapsedText,
            style: AppTextStyles.bodyMedium.copyWith(
              color: AppTheme.textWhite.withValues(alpha: 0.9),
              fontSize: 12,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              _recordCancelled ? 'تم الإلغاء' : 'اسحب لليسار للإلغاء',
              style: AppTextStyles.caption.copyWith(
                color: AppTheme.textMuted.withValues(alpha: 0.7),
                fontSize: 11,
              ),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _pickImage(ImageSource source) async {
    if (source == ImageSource.gallery) {
      final state = await PhotoManager.requestPermissionExtend();
      if (state.isAuth || state == PermissionState.limited) {
        _showMultiImagePickerBottomSheet();
      } else {
        final systemPicked = await _pickImagesWithSystemPicker();
        if (systemPicked) return;

        try {
          await PhotoManager.openSetting();
        } catch (_) {
          await openAppSettings();
        }
        await Future.delayed(const Duration(milliseconds: 300));
        if (!mounted) return;
        final retry = await PhotoManager.requestPermissionExtend();
        if (retry.isAuth || retry == PermissionState.limited) {
          _showMultiImagePickerBottomSheet();
        } else {
          final picked = await _pickImagesWithSystemPicker();
          if (!picked && mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(
                  'لا يزال الوصول إلى الصور مرفوضًا. يرجى السماح من الإعدادات.',
                  style: AppTextStyles.bodySmall.copyWith(color: Colors.white),
                ),
                backgroundColor: AppTheme.error.withValues(alpha: 0.9),
              ),
            );
          }
        }
      }
    } else {
      final picker = ImagePicker();
      final image = await picker.pickImage(
        source: source,
        maxWidth: 1920,
        maxHeight: 1920,
        imageQuality: 85,
      );

      if (image != null) {
        _showImagePreviewScreen([File(image.path)]);
      }
    }
  }

  void _showMultiImagePickerBottomSheet() {
    setState(() {
      _showAttachmentOptions = false;
      _showEmojiPicker = false;
    });

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => MultiImagePickerModal(
        onImagesSelected: (images) {
          _sendMultipleImages(images);
        },
        maxImages: 10,
      ),
    );
  }

  Future<bool> _pickImagesWithSystemPicker() async {
    try {
      final picker = ImagePicker();
      final picks = await picker.pickMultiImage(
        maxWidth: 1920,
        maxHeight: 1920,
        imageQuality: 85,
      );
      if (picks.isNotEmpty) {
        if (!mounted) return true;
        final images = picks.map((x) => File(x.path)).toList();
        _showImagePreviewScreen(images);
        return true;
      }
    } catch (_) {}
    return false;
  }

  void _showImagePreviewScreen(List<File> images) {
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) =>
            ImagePreviewScreen(
          images: images,
          onSend: (editedImages) {
            Navigator.pop(context);
            _sendMultipleImages(editedImages);
          },
        ),
        transitionDuration: const Duration(milliseconds: 300),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(
            opacity: animation,
            child: ScaleTransition(
              scale: Tween<double>(
                begin: 0.95,
                end: 1.0,
              ).animate(animation),
              child: child,
            ),
          );
        },
      ),
    );
  }

  void _sendMultipleImages(List<File> images) {
    if (images.isEmpty) return;

    final tempMessageId = DateTime.now().millisecondsSinceEpoch.toString();
    final uploadInfos = <ImageUploadInfo>[];
    for (int i = 0; i < images.length; i++) {
      uploadInfos.add(ImageUploadInfo(
        id: '${tempMessageId}_$i',
        file: images[i],
        progress: 0.0,
      ));
    }

    context.read<ChatBloc>().add(StartImageUploadsEvent(
          conversationId: widget.conversationId,
          uploads: uploadInfos,
        ));

    _uploadImagesWithProgress(images, tempMessageId, uploadInfos);
  }

  Future<void> _uploadImagesWithProgress(
    List<File> images,
    String tempMessageId,
    List<ImageUploadInfo> uploadInfos,
  ) async {
    final bloc = context.read<ChatBloc>();

    try {
      for (int i = 0; i < images.length; i++) {
        _startSmoothProgress(uploadInfos[i].id);
        final filePath = images[i].path;
        final uploadId = uploadInfos[i].id;
        await bloc
            .uploadAttachmentWithProgress(
          conversationId: widget.conversationId,
          filePath: filePath,
          messageType: 'image',
          replyToMessageId: widget.replyToMessageId,
          replyToAttachmentId:
              (images.length == 1) ? 'inline_${tempMessageId}_$i' : null,
          onProgress: (sent, total) {
            final t = total > 0 ? total : images[i].lengthSync();
            final p = t > 0 ? sent / t : 0.0;
            bloc.add(UpdateImageUploadProgressEvent(
              conversationId: widget.conversationId,
              uploadId: uploadId,
              progress: p,
            ));
            _updateTargetProgress(p);
          },
        )
            .then((_) async {
          bloc.add(UpdateImageUploadProgressEvent(
            conversationId: widget.conversationId,
            uploadId: uploadId,
            progress: 1.0,
            isCompleted: true,
          ));
        }).whenComplete(() {
          _stopSmoothProgress();
        });
      }

      if (mounted) {
        bloc.add(
            FinishImageUploadsEvent(conversationId: widget.conversationId));
      }
    } catch (e) {
      for (int i = 0; i < images.length; i++) {
        final uploadId = '${tempMessageId}_$i';
        bloc.add(UpdateImageUploadProgressEvent(
          conversationId: widget.conversationId,
          uploadId: uploadId,
          isFailed: true,
          error: e.toString(),
        ));
      }
    } finally {
      _stopSmoothProgress();
    }
  }

  Future<void> _pickVideo() async {
    final picker = ImagePicker();
    final video = await picker.pickVideo(
      source: ImageSource.gallery,
      maxDuration: const Duration(minutes: 5),
    );

    if (video != null) {
      setState(() {
        _showAttachmentOptions = false;
      });
      if (!mounted) return;
      context.read<ChatBloc>().add(
            UploadAttachmentEvent(
              conversationId: widget.conversationId,
              filePath: video.path,
              messageType: 'video',
            ),
          );
    }
  }

  void _pickFile() {
    setState(() {
      _showAttachmentOptions = false;
    });
  }
}

class _MinimalAttachmentOption extends StatelessWidget {
  final IconData icon;
  final String label;
  final List<Color> gradient;
  final VoidCallback onTap;

  const _MinimalAttachmentOption({
    required this.icon,
    required this.label,
    required this.gradient,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        HapticFeedback.lightImpact();
        onTap();
      },
      child: Container(
        width: 56,
        margin: const EdgeInsets.symmetric(horizontal: 3),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 38,
              height: 38,
              decoration: BoxDecoration(
                gradient: LinearGradient(colors: gradient),
                borderRadius: BorderRadius.circular(10),
                boxShadow: [
                  BoxShadow(
                    color: gradient.first.withValues(alpha: 0.2),
                    blurRadius: 6,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Icon(
                icon,
                color: Colors.white,
                size: 20,
              ),
            ),
            const SizedBox(height: 3),
            Text(
              label,
              style: AppTextStyles.caption.copyWith(
                fontSize: 9,
                color: AppTheme.textMuted.withValues(alpha: 0.6),
              ),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }
}

----- FILE: ./message_status_indicator.dart -----
import 'package:flutter/material.dart';
import '../../../../core/theme/app_theme.dart';

class MessageStatusIndicator extends StatelessWidget {
  final String status;
  final Color? color;
  final double size;

  const MessageStatusIndicator({
    super.key,
    required this.status,
    this.color,
    this.size = 14, // Reduced from 16
  });

  @override
  Widget build(BuildContext context) {
    IconData iconData;
    Color iconColor;
    double opacity = 1.0;

    switch (status) {
      case 'sending':
        iconData = Icons.schedule_rounded;
        iconColor = color ?? AppTheme.textMuted;
        opacity = 0.5;
        break;
      case 'sent':
        iconData = Icons.check_rounded;
        iconColor = color ?? AppTheme.textMuted;
        opacity = 0.6;
        break;
      case 'delivered':
        iconData = Icons.done_all_rounded;
        iconColor = color ?? AppTheme.textMuted;
        opacity = 0.7;
        break;
      case 'read':
        iconData = Icons.done_all_rounded;
        iconColor = color ?? AppTheme.primaryBlue;
        opacity = 0.9;
        break;
      case 'failed':
        iconData = Icons.error_outline_rounded;
        iconColor = AppTheme.error;
        opacity = 0.8;
        break;
      default:
        iconData = Icons.check_rounded;
        iconColor = color ?? AppTheme.textMuted;
        opacity = 0.5;
    }

    return Container(
      width: size + 2,
      height: size + 2,
      decoration: status == 'read'
          ? BoxDecoration(
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: AppTheme.primaryBlue.withValues(alpha: 0.2),
                  blurRadius: 4,
                  spreadRadius: 0.5,
                ),
              ],
            )
          : null,
      child: Icon(
        iconData,
        size: size,
        color: iconColor.withValues(alpha: opacity),
      ),
    );
  }
}
----- FILE: ./multi_image_picker_modal.dart -----
import 'dart:io';
import 'dart:ui';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:photo_manager/photo_manager.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import 'image_preview_screen.dart';

class MultiImagePickerModal extends StatefulWidget {
  final Function(List<File>) onImagesSelected;
  final int maxImages;

  const MultiImagePickerModal({
    super.key,
    required this.onImagesSelected,
    this.maxImages = 10,
  });

  @override
  State<MultiImagePickerModal> createState() => _MultiImagePickerModalState();
}

class _MultiImagePickerModalState extends State<MultiImagePickerModal>
    with TickerProviderStateMixin, WidgetsBindingObserver {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;

  final List<AssetEntity> _mediaList = [];
  final Map<String, AssetEntity> _selectedAssets = {};
  bool _isLoading = true;
  bool _hasPermission = false;
  int _currentPage = 0;
  bool _hasMore = true;

  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _initAnimations();
    _requestPermission();
    _scrollController.addListener(_onScroll);
  }

  void _initAnimations() {
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOut,
    ));

    _scaleAnimation = Tween<double>(
      begin: 0.95,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutBack,
    ));

    _animationController.forward();
  }

  @override
  void dispose() {
    // Stop change notifications if started
    try {
      PhotoManager.removeChangeCallback(_onPhotoLibraryChanged);
      PhotoManager.stopChangeNotify();
    } catch (_) {}
    WidgetsBinding.instance.removeObserver(this);
    _animationController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed) {
      _recheckPermissionAfterSettings();
    }
  }

  Future<void> _recheckPermissionAfterSettings() async {
    try {
      final permission = await PhotoManager.requestPermissionExtend();
      if (!mounted) return;
      if (permission.isAuth || permission == PermissionState.limited) {
        // If permission newly granted, reload media from scratch
        setState(() {
          _hasPermission = true;
          _isLoading = true;
          _mediaList.clear();
          _selectedAssets.clear();
          _currentPage = 0;
          _hasMore = true;
        });
        await _loadMedia();
      } else {
        setState(() {
          _hasPermission = false;
          _isLoading = false;
        });
      }
    } catch (_) {
      // No-op; keep current UI
    }
  }

  void _onScroll() {
    if (_scrollController.position.pixels ==
        _scrollController.position.maxScrollExtent) {
      _loadMoreMedia();
    }
  }

  Future<void> _requestPermission() async {
    final permission = await PhotoManager.requestPermissionExtend();
    if (permission.isAuth || permission == PermissionState.limited) {
      // Handle limited library access on iOS
      if (permission == PermissionState.limited) {
        PhotoManager.addChangeCallback(_onPhotoLibraryChanged);
        await PhotoManager.startChangeNotify();
      }
      setState(() => _hasPermission = true);
      await _loadMedia();
    } else {
      // On Android 13+, READ_MEDIA_IMAGES is required; request again gracefully
      // If still denied, keep the no-permission UI
      setState(() {
        _hasPermission = false;
        _isLoading = false;
      });
    }
  }

  void _onPhotoLibraryChanged(MethodCall call) {
    // Reload when user changes selected photos in limited access mode
    _mediaList.clear();
    _currentPage = 0;
    _hasMore = true;
    _loadMedia();
  }

  Future<void> _loadMedia() async {
    final List<AssetPathEntity> albums = await PhotoManager.getAssetPathList(
      type: RequestType.image,
      hasAll: true,
    );

    if (albums.isNotEmpty) {
      // Ensure we always use the special 'Recent' (All) album when present
      final AssetPathEntity target = albums.firstWhere(
        (a) => a.isAll,
        orElse: () => albums.first,
      );
      final mediaPage = await target.getAssetListPaged(
        page: _currentPage,
        size: 60,
      );

      setState(() {
        _mediaList.addAll(mediaPage);
        _isLoading = false;
        _hasMore = mediaPage.length == 60;
      });
    }
  }

  Future<void> _loadMoreMedia() async {
    if (!_hasMore || _isLoading) return;

    setState(() => _isLoading = true);
    _currentPage++;
    await _loadMedia();
  }

  void _toggleSelection(AssetEntity asset) {
    HapticFeedback.lightImpact();
    setState(() {
      if (_selectedAssets.containsKey(asset.id)) {
        _selectedAssets.remove(asset.id);
      } else {
        if (_selectedAssets.length < widget.maxImages) {
          _selectedAssets[asset.id] = asset;
        } else {
          _showMaxImagesAlert();
        }
      }
    });
  }

  void _showMaxImagesAlert() {
    HapticFeedback.mediumImpact();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          'يمكنك اختيار ${widget.maxImages} صور كحد أقصى',
          style: AppTextStyles.bodySmall.copyWith(color: Colors.white),
        ),
        backgroundColor: AppTheme.error.withValues(alpha: 0.9),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  Future<void> _proceedWithSelection() async {
    if (_selectedAssets.isEmpty) return;

    HapticFeedback.lightImpact();

    // Convert selected assets to files
    final List<File> files = [];
    for (final asset in _selectedAssets.values) {
      final file = await asset.file;
      if (file != null) {
        files.add(file);
      }
    }

    if (!mounted) return;

    // Navigate to preview screen
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) =>
            ImagePreviewScreen(
          images: files,
          onSend: (editedImages) {
            Navigator.pop(context); // Close preview
            Navigator.pop(context); // Close picker
            widget.onImagesSelected(editedImages);
          },
        ),
        transitionDuration: const Duration(milliseconds: 300),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(
            opacity: animation,
            child: ScaleTransition(
              scale: Tween<double>(
                begin: 0.95,
                end: 1.0,
              ).animate(animation),
              child: child,
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      height: MediaQuery.of(context).size.height * 0.85,
      decoration: BoxDecoration(
        color: AppTheme.darkBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        children: [
          _buildHeader(),
          Expanded(
            child: _hasPermission ? _buildMediaGrid() : _buildNoPermission(),
          ),
          if (_selectedAssets.isNotEmpty) _buildBottomBar(),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(
            color: AppTheme.darkBorder.withValues(alpha: 0.05),
            width: 0.5,
          ),
        ),
      ),
      child: Row(
        children: [
          // Cancel button
          GestureDetector(
            onTap: () {
              HapticFeedback.lightImpact();
              Navigator.pop(context);
            },
            child: Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: AppTheme.darkCard.withValues(alpha: 0.3),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                Icons.close,
                color: AppTheme.textWhite.withValues(alpha: 0.6),
                size: 20,
              ),
            ),
          ),
          const SizedBox(width: 16),

          // Title
          Text(
            'اختر الصور',
            style: AppTextStyles.heading3.copyWith(
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
          ),

          const Spacer(),

          // Selected count
          if (_selectedAssets.isNotEmpty)
            Container(
              padding: const EdgeInsets.symmetric(
                horizontal: 10,
                vertical: 4,
              ),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    AppTheme.primaryBlue.withValues(alpha: 0.8),
                    AppTheme.primaryPurple.withValues(alpha: 0.6),
                  ],
                ),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                '${_selectedAssets.length}',
                style: AppTextStyles.bodySmall.copyWith(
                  color: Colors.white,
                  fontWeight: FontWeight.w600,
                  fontSize: 12,
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildMediaGrid() {
    if (_isLoading && _mediaList.isEmpty) {
      return Center(
        child: CircularProgressIndicator(
          strokeWidth: 2,
          valueColor: AlwaysStoppedAnimation<Color>(
            AppTheme.primaryBlue.withValues(alpha: 0.6),
          ),
        ),
      );
    }

    return FadeTransition(
      opacity: _fadeAnimation,
      child: ScaleTransition(
        scale: _scaleAnimation,
        child: GridView.builder(
          controller: _scrollController,
          padding: const EdgeInsets.all(2),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 3,
            crossAxisSpacing: 2,
            mainAxisSpacing: 2,
          ),
          itemCount: _mediaList.length + (_isLoading ? 1 : 0),
          itemBuilder: (context, index) {
            if (index >= _mediaList.length) {
              return Center(
                child: SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(
                      AppTheme.primaryBlue.withValues(alpha: 0.4),
                    ),
                  ),
                ),
              );
            }

            final asset = _mediaList[index];
            final isSelected = _selectedAssets.containsKey(asset.id);
            final selectionOrder = isSelected
                ? _selectedAssets.keys.toList().indexOf(asset.id) + 1
                : null;

            return _MediaTile(
              asset: asset,
              isSelected: isSelected,
              selectionOrder: selectionOrder,
              onTap: () => _toggleSelection(asset),
            );
          },
        ),
      ),
    );
  }

  Widget _buildNoPermission() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.photo_library_outlined,
            size: 48,
            color: AppTheme.textMuted.withValues(alpha: 0.3),
          ),
          const SizedBox(height: 16),
          Text(
            'السماح بالوصول إلى الصور',
            style: AppTextStyles.bodyMedium.copyWith(
              color: AppTheme.textWhite.withValues(alpha: 0.7),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'يرجى السماح بالوصول إلى مكتبة الصور',
            style: AppTextStyles.bodySmall.copyWith(
              color: AppTheme.textMuted.withValues(alpha: 0.5),
            ),
          ),
          const SizedBox(height: 8),
          FutureBuilder<PermissionState>(
            future: PhotoManager.requestPermissionExtend(),
            builder: (context, snapshot) {
              final state = snapshot.data;
              if (state == null) return const SizedBox.shrink();
              final isLimited = state == PermissionState.limited;
              final text = isLimited
                  ? 'تم منح صلاحية محدودة - اختر صورًا مسموحًا بها'
                  : 'الوصول مرفوض - يرجى السماح من الإعدادات';
              return Text(
                text,
                style: AppTextStyles.caption.copyWith(
                  color: AppTheme.textMuted.withValues(alpha: 0.6),
                  fontSize: 10,
                ),
                textAlign: TextAlign.center,
              );
            },
          ),
          const SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Open settings
              GestureDetector(
                onTap: () async {
                  HapticFeedback.lightImpact();
                  try {
                    await PhotoManager.openSetting();
                  } catch (_) {
                    await openAppSettings();
                  }
                  // Give the system a moment, then re-check
                  await Future.delayed(const Duration(milliseconds: 300));
                  if (!mounted) return;
                  await _recheckPermissionAfterSettings();
                },
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 20,
                    vertical: 12,
                  ),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        AppTheme.primaryBlue.withValues(alpha: 0.8),
                        AppTheme.primaryPurple.withValues(alpha: 0.6),
                      ],
                    ),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Text(
                    'فتح الإعدادات',
                    style: AppTextStyles.bodySmall.copyWith(
                      color: Colors.white,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              // Manual retry
              GestureDetector(
                onTap: () async {
                  HapticFeedback.lightImpact();
                  await _recheckPermissionAfterSettings();
                },
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 12,
                  ),
                  decoration: BoxDecoration(
                    color: AppTheme.darkCard.withValues(alpha: 0.4),
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(
                      color: AppTheme.darkBorder.withValues(alpha: 0.1),
                      width: 0.5,
                    ),
                  ),
                  child: Text(
                    'تحقق الآن',
                    style: AppTextStyles.bodySmall.copyWith(
                      color: AppTheme.textWhite.withValues(alpha: 0.8),
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              // System photo picker fallback (no permission required on Android 13+/iOS)
              GestureDetector(
                onTap: () async {
                  HapticFeedback.lightImpact();
                  try {
                    final picker = ImagePicker();
                    final picks = await picker.pickMultiImage(
                      maxWidth: 1920,
                      maxHeight: 1920,
                      imageQuality: 85,
                    );
                    if (picks.isNotEmpty) {
                      if (!mounted) return;
                      Navigator.pop(context);
                      widget.onImagesSelected(
                        picks.map((x) => File(x.path)).toList(),
                      );
                    }
                  } catch (_) {}
                },
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 12,
                  ),
                  decoration: BoxDecoration(
                    color: AppTheme.darkCard.withValues(alpha: 0.4),
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(
                      color: AppTheme.primaryBlue.withValues(alpha: 0.2),
                      width: 0.5,
                    ),
                  ),
                  child: Text(
                    'منتقي النظام',
                    style: AppTextStyles.bodySmall.copyWith(
                      color: AppTheme.textWhite.withValues(alpha: 0.9),
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildBottomBar() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppTheme.darkCard.withValues(alpha: 0.3),
        border: Border(
          top: BorderSide(
            color: AppTheme.darkBorder.withValues(alpha: 0.05),
            width: 0.5,
          ),
        ),
      ),
      child: SafeArea(
        child: Row(
          children: [
            // Quick camera button
            GestureDetector(
              onTap: () async {
                HapticFeedback.lightImpact();
                final picker = ImagePicker();
                final photo = await picker.pickImage(
                  source: ImageSource.camera,
                  imageQuality: 90,
                );
                if (photo != null) {
                  Navigator.pop(context);
                  widget.onImagesSelected([File(photo.path)]);
                }
              },
              child: Container(
                width: 44,
                height: 44,
                decoration: BoxDecoration(
                  color: AppTheme.darkCard.withValues(alpha: 0.5),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: AppTheme.primaryBlue.withValues(alpha: 0.2),
                    width: 0.5,
                  ),
                ),
                child: Icon(
                  Icons.camera_alt_rounded,
                  color: AppTheme.primaryBlue.withValues(alpha: 0.7),
                  size: 22,
                ),
              ),
            ),

            const SizedBox(width: 12),

            // Continue button
            Expanded(
              child: GestureDetector(
                onTap: _proceedWithSelection,
                child: Container(
                  height: 44,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        AppTheme.primaryBlue.withValues(alpha: 0.8),
                        AppTheme.primaryPurple.withValues(alpha: 0.6),
                      ],
                    ),
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: AppTheme.primaryBlue.withValues(alpha: 0.3),
                        blurRadius: 12,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: Center(
                    child: Text(
                      'متابعة (${_selectedAssets.length})',
                      style: AppTextStyles.bodyMedium.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _MediaTile extends StatefulWidget {
  final AssetEntity asset;
  final bool isSelected;
  final int? selectionOrder;
  final VoidCallback onTap;

  const _MediaTile({
    required this.asset,
    required this.isSelected,
    this.selectionOrder,
    required this.onTap,
  });

  @override
  State<_MediaTile> createState() => _MediaTileState();
}

class _MediaTileState extends State<_MediaTile>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: 0.95,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown: (_) => _controller.forward(),
      onTapUp: (_) => _controller.reverse(),
      onTapCancel: () => _controller.reverse(),
      onTap: widget.onTap,
      child: AnimatedBuilder(
        animation: _scaleAnimation,
        builder: (context, child) {
          return Transform.scale(
            scale: _scaleAnimation.value,
            child: Stack(
              fit: StackFit.expand,
              children: [
                // Image thumbnail (via PhotoManager thumbnail bytes)
                FutureBuilder<Uint8List?>(
                  future: widget.asset
                      .thumbnailDataWithSize(const ThumbnailSize(200, 200)),
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return Container(color: AppTheme.darkCard);
                    }
                    final data = snapshot.data;
                    if (data == null || data.isEmpty) {
                      return Container(
                        color: AppTheme.darkCard,
                        child: Icon(
                          Icons.broken_image,
                          color: AppTheme.textMuted.withValues(alpha: 0.3),
                        ),
                      );
                    }
                    return Image.memory(
                      data,
                      fit: BoxFit.cover,
                    );
                  },
                ),

                // Selection overlay
                AnimatedContainer(
                  duration: const Duration(milliseconds: 200),
                  decoration: BoxDecoration(
                    gradient: widget.isSelected
                        ? LinearGradient(
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: [
                              AppTheme.primaryBlue.withValues(alpha: 0.3),
                              AppTheme.primaryPurple.withValues(alpha: 0.2),
                            ],
                          )
                        : null,
                    border: widget.isSelected
                        ? Border.all(
                            color: AppTheme.primaryBlue,
                            width: 2,
                          )
                        : null,
                  ),
                ),

                // Selection number
                if (widget.isSelected && widget.selectionOrder != null)
                  Positioned(
                    top: 8,
                    right: 8,
                    child: Container(
                      width: 24,
                      height: 24,
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [
                            AppTheme.primaryBlue,
                            AppTheme.primaryPurple,
                          ],
                        ),
                        shape: BoxShape.circle,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withValues(alpha: 0.3),
                            blurRadius: 4,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: Center(
                        child: Text(
                          '${widget.selectionOrder}',
                          style: AppTextStyles.caption.copyWith(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 11,
                          ),
                        ),
                      ),
                    ),
                  ),

                // Video duration if applicable
                if (widget.asset.type == AssetType.video)
                  Positioned(
                    bottom: 4,
                    left: 4,
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 6,
                        vertical: 2,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.black.withValues(alpha: 0.7),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          const Icon(
                            Icons.videocam,
                            color: Colors.white,
                            size: 12,
                          ),
                          const SizedBox(width: 2),
                          Text(
                            _formatDuration(widget.asset.duration),
                            style: AppTextStyles.caption.copyWith(
                              color: Colors.white,
                              fontSize: 10,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
              ],
            ),
          );
        },
      ),
    );
  }

  String _formatDuration(int seconds) {
    final minutes = seconds ~/ 60;
    final remainingSeconds = seconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${remainingSeconds.toString().padLeft(2, '0')}';
  }
}

----- FILE: ./online_status_indicator.dart -----
import 'package:flutter/material.dart';
import '../../../../core/theme/app_theme.dart';

class OnlineStatusIndicator extends StatefulWidget {
  final bool isOnline;
  final double size;
  final bool showBorder;
  final bool animate;

  const OnlineStatusIndicator({
    super.key,
    required this.isOnline,
    this.size = 10, // Reduced from 12
    this.showBorder = true,
    this.animate = true,
  });

  @override
  State<OnlineStatusIndicator> createState() => _OnlineStatusIndicatorState();
}

class _OnlineStatusIndicatorState extends State<OnlineStatusIndicator>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _pulseAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );
    
    _pulseAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
    
    if (widget.isOnline && widget.animate) {
      _controller.repeat();
    }
  }

  @override
  void didUpdateWidget(OnlineStatusIndicator oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.isOnline != oldWidget.isOnline) {
      if (widget.isOnline && widget.animate) {
        _controller.repeat();
      } else {
        _controller.stop();
      }
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _pulseAnimation,
      builder: (context, child) {
        return Stack(
          alignment: Alignment.center,
          children: [
            // Pulse effect for online status
            if (widget.isOnline && widget.animate)
              Container(
                width: widget.size + 6 * _pulseAnimation.value,
                height: widget.size + 6 * _pulseAnimation.value,
                decoration: BoxDecoration(
                  color: AppTheme.success.withValues(alpha: 0.3 * (1 - _pulseAnimation.value),
                  ),
                  shape: BoxShape.circle,
                ),
              ),
            
            // Main indicator
            Container(
              width: widget.size,
              height: widget.size,
              decoration: BoxDecoration(
                gradient: widget.isOnline
                    ? LinearGradient(
                        colors: [AppTheme.success, AppTheme.neonGreen],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      )
                    : null,
                color: !widget.isOnline 
                    ? AppTheme.textMuted.withValues(alpha: 0.3)
                    : null,
                shape: BoxShape.circle,
                border: widget.showBorder
                    ? Border.all(
                        color: Theme.of(context).cardColor,
                        width: 1.5,
                      )
                    : null,
                boxShadow: widget.isOnline
                    ? [
                        BoxShadow(
                          color: AppTheme.success.withValues(alpha: 0.4),
                          blurRadius: 4,
                          spreadRadius: 0.5,
                        ),
                      ]
                    : null,
              ),
            ),
          ],
        );
      },
    );
  }
}
----- FILE: ./participant_item_widget.dart -----
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:bookn_cp_app/features/chat/presentation/widgets/online_status_indicator.dart';
import 'dart:ui';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/conversation.dart';

class ParticipantItemWidget extends StatelessWidget {
  final ChatUser participant;
  final bool isAdmin;
  final bool isCurrentUser;
  final VoidCallback? onTap;
  final VoidCallback? onRemove;

  const ParticipantItemWidget({
    super.key,
    required this.participant,
    this.isAdmin = false,
    this.isCurrentUser = false,
    this.onTap,
    this.onRemove,
  });

  @override
  Widget build(BuildContext context) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap != null ? () {
          HapticFeedback.selectionClick();
          onTap!();
        } : null,
        borderRadius: BorderRadius.circular(10),
        child: Container(
          padding: const EdgeInsets.symmetric(
            horizontal: 12,
            vertical: 8,
          ),
          child: Row(
            children: [
              _buildCompactAvatar(),
              const SizedBox(width: 10),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildNameRow(),
                    if (participant.isOnline || participant.lastSeen != null)
                      _buildStatusText(),
                  ],
                ),
              ),
              if (onRemove != null)
                _buildRemoveButton(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCompactAvatar() {
    return Stack(
      children: [
        Container(
          width: 42, // Reduced from 48
          height: 42,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            gradient: LinearGradient(
              colors: [
                AppTheme.primaryBlue.withValues(alpha: 0.08),
                AppTheme.primaryPurple.withValues(alpha: 0.04),
              ],
            ),
            border: Border.all(
              color: participant.isOnline
                  ? AppTheme.success.withValues(alpha: 0.3)
                  : AppTheme.darkBorder.withValues(alpha: 0.1),
              width: 0.5,
            ),
          ),
          child: participant.profileImage != null
              ? ClipOval(
                  child: CachedImageWidget(
                    imageUrl: participant.profileImage!,
                    width: 42,
                    height: 42,
                    fit: BoxFit.cover,
                  ),
                )
              : Center(
                  child: Text(
                    _getInitials(participant.name),
                    style: AppTextStyles.bodyMedium.copyWith(
                      color: AppTheme.primaryBlue.withValues(alpha: 0.8),
                      fontWeight: FontWeight.w600,
                      fontSize: 14,
                    ),
                  ),
                ),
        ),
        if (participant.isOnline)
          Positioned(
            bottom: 0,
            right: 0,
            child: OnlineStatusIndicator(
              isOnline: true,
              size: 10,
              showBorder: true,
            ),
          ),
      ],
    );
  }

  Widget _buildNameRow() {
    return Row(
      children: [
        Expanded(
          child: Text(
            participant.name,
            style: AppTextStyles.bodyMedium.copyWith(
              fontWeight: FontWeight.w500,
              fontSize: 14,
            ),
          ),
        ),
        if (isCurrentUser)
          _buildMinimalBadge(
            label: 'أنت',
            gradient: [
              AppTheme.primaryBlue.withValues(alpha: 0.1),
              AppTheme.primaryPurple.withValues(alpha: 0.05),
            ],
            textColor: AppTheme.primaryBlue,
          ),
        if (isAdmin)
          Padding(
            padding: const EdgeInsets.only(left: 4),
            child: _buildMinimalBadge(
              label: 'مشرف',
              gradient: [
                AppTheme.warning.withValues(alpha: 0.1),
                const Color(0xFFF97316).withValues(alpha: 0.05),
              ],
              textColor: AppTheme.warning,
            ),
          ),
      ],
    );
  }

  Widget _buildMinimalBadge({
    required String label,
    required List<Color> gradient,
    required Color textColor,
  }) {
    return Container(
      padding: const EdgeInsets.symmetric(
        horizontal: 6,
        vertical: 2,
      ),
      decoration: BoxDecoration(
        gradient: LinearGradient(colors: gradient),
        borderRadius: BorderRadius.circular(6),
        border: Border.all(
          color: textColor.withValues(alpha: 0.2),
          width: 0.5,
        ),
      ),
      child: Text(
        label,
        style: AppTextStyles.caption.copyWith(
          color: textColor,
          fontWeight: FontWeight.w600,
          fontSize: 10,
        ),
      ),
    );
  }

  Widget _buildStatusText() {
    String statusText;
    Color statusColor;
    
    if (participant.isOnline) {
      statusText = 'متصل الآن';
      statusColor = AppTheme.success;
    } else if (participant.lastSeen != null) {
      statusText = 'آخر ظهور ${_formatLastSeen(participant.lastSeen!)}';
      statusColor = AppTheme.textMuted.withValues(alpha: 0.6);
    } else {
      return const SizedBox.shrink();
    }
    
    return Padding(
      padding: const EdgeInsets.only(top: 2),
      child: Text(
        statusText,
        style: AppTextStyles.caption.copyWith(
          color: statusColor,
          fontSize: 11,
        ),
      ),
    );
  }

  Widget _buildRemoveButton() {
    return GestureDetector(
      onTap: () {
        HapticFeedback.lightImpact();
        onRemove!();
      },
      child: Container(
        width: 32,
        height: 32,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              AppTheme.error.withValues(alpha: 0.1),
              AppTheme.error.withValues(alpha: 0.05),
            ],
          ),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Icon(
          Icons.remove_circle_outline_rounded,
          color: AppTheme.error.withValues(alpha: 0.8),
          size: 18,
        ),
      ),
    );
  }

  String _getInitials(String name) {
    final parts = name.trim().split(' ');
    if (parts.isEmpty) return '';
    if (parts.length == 1) return parts.first[0].toUpperCase();
    return '${parts.first[0]}${parts.last[0]}'.toUpperCase();
  }

  String _formatLastSeen(DateTime lastSeen) {
    final now = DateTime.now();
    final difference = now.difference(lastSeen);
    
    if (difference.inMinutes < 1) {
      return 'الآن';
    } else if (difference.inMinutes < 60) {
      return 'منذ ${difference.inMinutes}د';
    } else if (difference.inHours < 24) {
      return 'منذ ${difference.inHours}س';
    } else if (difference.inDays == 1) {
      return 'أمس';
    } else {
      return 'منذ ${difference.inDays}ي';
    }
  }
}
----- FILE: ./pinned_admins_widget.dart -----
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../domain/entities/conversation.dart';

// في ملف pinned_admins_widget.dart، حدث callback onUserTap:

class PinnedAdminsWidget extends StatelessWidget {
  final List<ChatUser> adminUsers;
  final Set<ChatUser> selectedUsers;
  final Function(ChatUser) onUserTap;
  final ScrollController? scrollController;

  const PinnedAdminsWidget({
    super.key,
    required this.adminUsers,
    required this.selectedUsers,
    required this.onUserTap,
    this.scrollController,
  });

  @override
  Widget build(BuildContext context) {
    if (adminUsers.isEmpty) {
      return const SizedBox.shrink();
    }

    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            AppTheme.primaryBlue.withValues(alpha: 0.03),
            AppTheme.primaryPurple.withValues(alpha: 0.02),
          ],
        ),
        border: Border(
          bottom: BorderSide(
            color: AppTheme.darkBorder.withValues(alpha: 0.08),
            width: 0.5,
          ),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 12, 16, 8),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(6),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        Colors.amber.withValues(alpha: 0.2),
                        Colors.orange.withValues(alpha: 0.1),
                      ],
                    ),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Icon(
                    Icons.shield_rounded,
                    size: 14,
                    color: Colors.amber,
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  'إدارة التطبيق',
                  style: AppTextStyles.bodySmall.copyWith(
                    color: AppTheme.textMuted,
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const Spacer(),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 8,
                    vertical: 3,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.amber.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${adminUsers.length}',
                    style: AppTextStyles.caption.copyWith(
                      color: Colors.amber,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
          
          // Admins horizontal list
          SizedBox(
            height: 100,
            child: ListView.builder(
              controller: scrollController,
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.fromLTRB(12, 0, 12, 12),
              itemCount: adminUsers.length,
              itemBuilder: (context, index) {
                final admin = adminUsers[index];
                final isSelected = selectedUsers.contains(admin);
                
                return _AdminItemWidget(
                  admin: admin,
                  isSelected: isSelected,
                  onTap: () => onUserTap(admin), // استخدام callback مباشرة
                  index: index,
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class _AdminItemWidget extends StatefulWidget {
  final ChatUser admin;
  final bool isSelected;
  final VoidCallback onTap;
  final int index;

  const _AdminItemWidget({
    required this.admin,
    required this.isSelected,
    required this.onTap,
    required this.index,
  });

  @override
  State<_AdminItemWidget> createState() => _AdminItemWidgetState();
}

class _AdminItemWidgetState extends State<_AdminItemWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: Duration(milliseconds: 400 + (widget.index * 50)),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 0.5,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOutBack,
    ));
    
    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    ));
    
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return Transform.scale(
          scale: _scaleAnimation.value,
          child: Opacity(
            opacity: _fadeAnimation.value,
            child: GestureDetector(
              onTap: () {
                HapticFeedback.selectionClick();
                widget.onTap();
              },
              child: Container(
                width: 72,
                margin: const EdgeInsets.only(right: 8),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // Avatar with premium effect
                    Stack(
                      alignment: Alignment.center,
                      children: [
                        // Glow effect
                        if (widget.isSelected)
                          Container(
                            width: 56,
                            height: 56,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              boxShadow: [
                                BoxShadow(
                                  color: AppTheme.primaryBlue.withValues(alpha: 0.4),
                                  blurRadius: 16,
                                  spreadRadius: 2,
                                ),
                              ],
                            ),
                          ),
                        
                        // Avatar container
                        AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          width: 52,
                          height: 52,
                          decoration: BoxDecoration(
                            gradient: widget.isSelected
                                ? LinearGradient(
                                    colors: [
                                      AppTheme.primaryBlue,
                                      AppTheme.primaryPurple,
                                    ],
                                  )
                                : LinearGradient(
                                    colors: [
                                      Colors.amber.withValues(alpha: 0.2),
                                      Colors.orange.withValues(alpha: 0.15),
                                    ],
                                  ),
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: widget.isSelected
                                  ? Colors.white.withValues(alpha: 0.3)
                                  : Colors.amber.withValues(alpha: 0.3),
                              width: 1.5,
                            ),
                          ),
                          child: Center(
                            child: Text(
                              _getInitials(widget.admin.name),
                              style: AppTextStyles.bodyMedium.copyWith(
                                color: widget.isSelected
                                    ? Colors.white
                                    : Colors.amber,
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                              ),
                            ),
                          ),
                        ),
                        
                        // Crown badge
                        Positioned(
                          top: 0,
                          right: 0,
                          child: Container(
                            width: 20,
                            height: 20,
                            decoration: BoxDecoration(
                              gradient: const LinearGradient(
                                colors: [Colors.amber, Colors.orange],
                              ),
                              shape: BoxShape.circle,
                              border: Border.all(
                                color: AppTheme.darkCard,
                                width: 2,
                              ),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.amber.withValues(alpha: 0.5),
                                  blurRadius: 8,
                                  spreadRadius: 1,
                                ),
                              ],
                            ),
                            child: const Icon(
                              Icons.star_rounded,
                              size: 12,
                              color: Colors.white,
                            ),
                          ),
                        ),
                        
                        // Selection checkmark
                        if (widget.isSelected)
                          Positioned(
                            bottom: 0,
                            left: 0,
                            child: Container(
                              width: 20,
                              height: 20,
                              decoration: BoxDecoration(
                                color: AppTheme.success,
                                shape: BoxShape.circle,
                                border: Border.all(
                                  color: AppTheme.darkCard,
                                  width: 2,
                                ),
                              ),
                              child: const Icon(
                                Icons.check_rounded,
                                size: 12,
                                color: Colors.white,
                              ),
                            ),
                          ),
                      ],
                    ),
                    
                    const SizedBox(height: 6),
                    
                    // Name
                    Text(
                      widget.admin.name.split(' ').first,
                      style: AppTextStyles.caption.copyWith(
                        color: widget.isSelected
                            ? AppTheme.primaryBlue
                            : AppTheme.textWhite,
                        fontSize: 11,
                        fontWeight: widget.isSelected
                            ? FontWeight.w600
                            : FontWeight.w500,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                      textAlign: TextAlign.center,
                    ),
                    
                    // Status
                    if (widget.admin.isOnline)
                      Container(
                        margin: const EdgeInsets.only(top: 2),
                        padding: const EdgeInsets.symmetric(
                          horizontal: 6,
                          vertical: 1,
                        ),
                        decoration: BoxDecoration(
                          color: AppTheme.success.withValues(alpha: 0.1),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          'متصل',
                          style: AppTextStyles.caption.copyWith(
                            color: AppTheme.success,
                            fontSize: 9,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  String _getInitials(String name) {
    final parts = name.trim().split(' ').where((e) => e.isNotEmpty).toList();
    if (parts.isEmpty) return '?';
    if (parts.length == 1) {
      return parts.first.substring(0, parts.first.length.clamp(0, 2)).toUpperCase();
    }
    return (parts[0].substring(0, 1) + parts[1].substring(0, 1)).toUpperCase();
  }
}
----- FILE: ./reaction_picker_widget.dart -----
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:ui';
import '../../../../core/theme/app_theme.dart';

class ReactionPickerWidget extends StatefulWidget {
  final Function(String) onReaction;

  const ReactionPickerWidget({
    super.key,
    required this.onReaction,
  });

  @override
  State<ReactionPickerWidget> createState() => _ReactionPickerWidgetState();
}

class _ReactionPickerWidgetState extends State<ReactionPickerWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late List<Animation<double>> _scaleAnimations;
  late Animation<double> _containerAnimation;

  final List<ReactionItem> reactions = [
    ReactionItem(emoji: '👍', type: 'like'),
    ReactionItem(emoji: '❤️', type: 'love'),
    ReactionItem(emoji: '😂', type: 'laugh'),
    ReactionItem(emoji: '😮', type: 'wow'),
    ReactionItem(emoji: '😢', type: 'sad'),
    ReactionItem(emoji: '😠', type: 'angry'),
  ];

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _containerAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutBack,
    );

    _scaleAnimations = List.generate(reactions.length, (index) {
      return Tween<double>(
        begin: 0.0,
        end: 1.0,
      ).animate(
        CurvedAnimation(
          parent: _animationController,
          curve: Interval(
            index * 0.08,
            0.4 + index * 0.1,
            curve: Curves.easeOutBack,
          ),
        ),
      );
    });

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _containerAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _containerAnimation.value,
          child: Container(
            margin: const EdgeInsets.only(top: 4),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: BackdropFilter(
                filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 8,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        AppTheme.darkCard.withValues(alpha: 0.7),
                        AppTheme.darkCard.withValues(alpha: 0.5),
                      ],
                    ),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: AppTheme.darkBorder.withValues(alpha: 0.2),
                      width: 0.5,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: AppTheme.shadowDark.withValues(alpha: 0.15),
                        blurRadius: 12,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: List.generate(reactions.length, (index) {
                      return AnimatedBuilder(
                        animation: _scaleAnimations[index],
                        builder: (context, child) {
                          return Transform.scale(
                            scale: _scaleAnimations[index].value,
                            child: _MinimalReactionButton(
                              reaction: reactions[index],
                              onTap: () {
                                HapticFeedback.selectionClick();
                                widget.onReaction(reactions[index].type);
                              },
                            ),
                          );
                        },
                      );
                    }),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}

class _MinimalReactionButton extends StatefulWidget {
  final ReactionItem reaction;
  final VoidCallback onTap;

  const _MinimalReactionButton({
    required this.reaction,
    required this.onTap,
  });

  @override
  State<_MinimalReactionButton> createState() => 
      _MinimalReactionButtonState();
}

class _MinimalReactionButtonState extends State<_MinimalReactionButton>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  bool _isPressed = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 150),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: 1.3,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown: (_) {
        setState(() => _isPressed = true);
        _animationController.forward();
      },
      onTapUp: (_) {
        setState(() => _isPressed = false);
        _animationController.reverse();
        widget.onTap();
      },
      onTapCancel: () {
        setState(() => _isPressed = false);
        _animationController.reverse();
      },
      child: AnimatedBuilder(
        animation: _scaleAnimation,
        builder: (context, child) {
          return Transform.scale(
            scale: _scaleAnimation.value,
            child: Container(
              padding: const EdgeInsets.all(6),
              decoration: _isPressed
                  ? BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          AppTheme.primaryBlue.withValues(alpha: 0.1),
                          AppTheme.primaryPurple.withValues(alpha: 0.05),
                        ],
                      ),
                      shape: BoxShape.circle,
                    )
                  : null,
              child: Text(
                widget.reaction.emoji,
                style: const TextStyle(fontSize: 20), // Reduced from 24
              ),
            ),
          );
        },
      ),
    );
  }
}

class ReactionItem {
  final String emoji;
  final String type;

  ReactionItem({
    required this.emoji,
    required this.type,
  });
}
----- FILE: ./typing_indicator_widget.dart -----
import 'package:flutter/material.dart';
import 'dart:ui';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../domain/entities/conversation.dart';

class TypingIndicatorWidget extends StatefulWidget {
  final List<String> typingUserIds;
  final Conversation conversation;

  const TypingIndicatorWidget({
    super.key,
    required this.typingUserIds,
    required this.conversation,
  });

  @override
  State<TypingIndicatorWidget> createState() => _TypingIndicatorWidgetState();
}

class _TypingIndicatorWidgetState extends State<TypingIndicatorWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late List<Animation<double>> _dotAnimations;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    )..repeat();

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: const Interval(0.0, 0.2, curve: Curves.easeOut),
    ));

    _dotAnimations = List.generate(3, (index) {
      return Tween<double>(
        begin: 0.0,
        end: 1.0,
      ).animate(
        CurvedAnimation(
          parent: _animationController,
          curve: Interval(
            index * 0.15,
            0.5 + index * 0.15,
            curve: Curves.easeInOut,
          ),
        ),
      );
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (widget.typingUserIds.isEmpty) {
      return const SizedBox.shrink();
    }

    final typingUsers = widget.conversation.participants
        .where((p) => widget.typingUserIds.contains(p.id))
        .toList();

    final typingText = _getTypingText(typingUsers);

    return FadeTransition(
      opacity: _fadeAnimation,
      child: Container(
        margin: const EdgeInsets.only(
          left: 0,
          right: 40, // Reduced from 48
          bottom: 4,
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: BackdropFilter(
                filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 10,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        AppTheme.darkCard.withValues(alpha: 0.7),
                        AppTheme.darkCard.withValues(alpha: 0.5),
                      ],
                    ),
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(
                      color: AppTheme.darkBorder.withValues(alpha: 0.1),
                      width: 0.5,
                    ),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      _buildMinimalDots(),
                      const SizedBox(width: 6),
                      Text(
                        typingText,
                        style: AppTextStyles.caption.copyWith(
                          color: AppTheme.textMuted.withValues(alpha: 0.7),
                          fontStyle: FontStyle.italic,
                          fontSize: 11,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMinimalDots() {
    return SizedBox(
      width: 24, // Reduced from 30
      height: 8, // Reduced from 10
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: List.generate(3, (index) {
          return AnimatedBuilder(
            animation: _dotAnimations[index],
            builder: (context, child) {
              return Transform.translate(
                offset: Offset(0, -3 * _dotAnimations[index].value),
                child: Container(
                  width: 5, // Reduced from 6
                  height: 5,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        AppTheme.primaryBlue.withValues(alpha: 0.3 + 0.5 * _dotAnimations[index].value,),
                        AppTheme.primaryPurple.withValues(alpha: 0.2 + 0.4 * _dotAnimations[index].value,),
                      ],
                    ),
                    shape: BoxShape.circle,
                    boxShadow: [
                      BoxShadow(
                        color: AppTheme.primaryBlue.withValues(alpha: 0.2 * _dotAnimations[index].value,),
                        blurRadius: 4,
                        spreadRadius: 0.5,
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        }),
      ),
    );
  }

  String _getTypingText(List<ChatUser> typingUsers) {
    if (typingUsers.isEmpty) return '';
    
    if (typingUsers.length == 1) {
      return '${typingUsers.first.name} يكتب';
    } else if (typingUsers.length == 2) {
      return '${typingUsers.first.name} و${typingUsers.last.name} يكتبان';
    } else {
      return 'عدة أشخاص يكتبون';
    }
  }
}
----- FILE: ./upload_progress_overlay.dart -----
import 'dart:io';
import 'dart:ui';
import 'package:flutter/material.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_text_styles.dart';

class UploadProgressOverlay extends StatefulWidget {
  final List<UploadTask> tasks;
  final VoidCallback? onCancel;

  const UploadProgressOverlay({
    super.key,
    required this.tasks,
    this.onCancel,
  });

  @override
  State<UploadProgressOverlay> createState() => _UploadProgressOverlayState();
}

class _UploadProgressOverlayState extends State<UploadProgressOverlay>
    with TickerProviderStateMixin {
  late AnimationController _slideController;
  late AnimationController _pulseController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _pulseAnimation;

  @override
  void initState() {
    super.initState();

    _slideController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _pulseController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));

    _pulseAnimation = Tween<double>(
      begin: 0.95,
      end: 1.05,
    ).animate(CurvedAnimation(
      parent: _pulseController,
      curve: Curves.easeInOut,
    ));

    _slideController.forward();
  }

  @override
  void dispose() {
    _slideController.dispose();
    _pulseController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final completedTasks = widget.tasks.where((t) => t.isCompleted).length;
    final failedTasks = widget.tasks.where((t) => t.isFailed).length;
    final totalProgress = widget.tasks.fold<double>(
          0,
          (sum, task) => sum + task.progress,
        ) /
        widget.tasks.length;

    return SlideTransition(
      position: _slideAnimation,
      child: Align(
        alignment: Alignment.bottomCenter,
        child: Container(
          margin: const EdgeInsets.all(16),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(16),
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
              child: Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      AppTheme.darkCard.withValues(alpha: 0.9),
                      AppTheme.darkCard.withValues(alpha: 0.7),
                    ],
                  ),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: AppTheme.primaryBlue.withValues(alpha: 0.1),
                    width: 0.5,
                  ),
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // Header
                    Row(
                      children: [
                        AnimatedBuilder(
                          animation: _pulseAnimation,
                          builder: (context, child) {
                            return Transform.scale(
                              scale: _pulseAnimation.value,
                              child: Container(
                                width: 32,
                                height: 32,
                                decoration: BoxDecoration(
                                  gradient: LinearGradient(
                                    colors: [
                                      AppTheme.primaryBlue
                                          .withValues(alpha: 0.2),
                                      AppTheme.primaryPurple
                                          .withValues(alpha: 0.1),
                                    ],
                                  ),
                                  shape: BoxShape.circle,
                                ),
                                child: Icon(
                                  Icons.cloud_upload_rounded,
                                  color: AppTheme.primaryBlue
                                      .withValues(alpha: 0.8),
                                  size: 18,
                                ),
                              ),
                            );
                          },
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'جاري رفع الصور',
                                style: AppTextStyles.bodyMedium.copyWith(
                                  fontWeight: FontWeight.w600,
                                  fontSize: 14,
                                ),
                              ),
                              Text(
                                '$completedTasks من ${widget.tasks.length} مكتمل',
                                style: AppTextStyles.caption.copyWith(
                                  color:
                                      AppTheme.textMuted.withValues(alpha: 0.6),
                                  fontSize: 11,
                                ),
                              ),
                            ],
                          ),
                        ),
                        if (widget.onCancel != null)
                          GestureDetector(
                            onTap: widget.onCancel,
                            child: Container(
                              width: 28,
                              height: 28,
                              decoration: BoxDecoration(
                                color: AppTheme.error.withValues(alpha: 0.1),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Icon(
                                Icons.close,
                                color: AppTheme.error.withValues(alpha: 0.7),
                                size: 16,
                              ),
                            ),
                          ),
                      ],
                    ),

                    const SizedBox(height: 12),

                    // Overall progress
                    _buildOverallProgress(totalProgress),

                    const SizedBox(height: 12),

                    // Individual tasks
                    ...widget.tasks.map((task) => _buildTaskProgress(task)),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildOverallProgress(double progress) {
    return Container(
      height: 4,
      decoration: BoxDecoration(
        color: AppTheme.darkSurface.withValues(alpha: 0.3),
        borderRadius: BorderRadius.circular(2),
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(2),
        child: LinearProgressIndicator(
          value: progress,
          backgroundColor: Colors.transparent,
          valueColor: AlwaysStoppedAnimation<Color>(
            AppTheme.primaryBlue.withValues(alpha: 0.8),
          ),
        ),
      ),
    );
  }

  Widget _buildTaskProgress(UploadTask task) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      child: Row(
        children: [
          // Thumbnail
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(8),
              border: Border.all(
                color: task.isFailed
                    ? AppTheme.error.withValues(alpha: 0.3)
                    : task.isCompleted
                        ? AppTheme.success.withValues(alpha: 0.3)
                        : AppTheme.primaryBlue.withValues(alpha: 0.2),
                width: 1,
              ),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(7),
              child: task.thumbnail != null
                  ? Image.file(
                      task.thumbnail!,
                      fit: BoxFit.cover,
                    )
                  : Container(
                      color: AppTheme.darkCard,
                      child: Icon(
                        Icons.image,
                        color: AppTheme.textMuted.withValues(alpha: 0.3),
                        size: 20,
                      ),
                    ),
            ),
          ),

          const SizedBox(width: 12),

          // Progress info
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        task.fileName,
                        style: AppTextStyles.caption.copyWith(
                          fontSize: 11,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    if (task.isFailed)
                      Icon(
                        Icons.error_outline,
                        color: AppTheme.error.withValues(alpha: 0.7),
                        size: 14,
                      )
                    else if (task.isCompleted)
                      Icon(
                        Icons.check_circle,
                        color: AppTheme.success.withValues(alpha: 0.7),
                        size: 14,
                      )
                    else
                      Text(
                        '${(task.progress * 100).toInt()}%',
                        style: AppTextStyles.caption.copyWith(
                          color: AppTheme.primaryBlue.withValues(alpha: 0.7),
                          fontSize: 10,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                  ],
                ),
                const SizedBox(height: 4),
                Container(
                  height: 2,
                  decoration: BoxDecoration(
                    color: AppTheme.darkSurface.withValues(alpha: 0.2),
                    borderRadius: BorderRadius.circular(1),
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(1),
                    child: LinearProgressIndicator(
                      value: task.progress,
                      backgroundColor: Colors.transparent,
                      valueColor: AlwaysStoppedAnimation<Color>(
                        task.isFailed
                            ? AppTheme.error.withValues(alpha: 0.6)
                            : task.isCompleted
                                ? AppTheme.success.withValues(alpha: 0.6)
                                : AppTheme.primaryBlue.withValues(alpha: 0.6),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class UploadTask {
  final String id;
  final String fileName;
  final File? thumbnail;
  double progress;
  bool isCompleted;
  bool isFailed;
  String? error;

  UploadTask({
    required this.id,
    required this.fileName,
    this.thumbnail,
    this.progress = 0.0,
    this.isCompleted = false,
    this.isFailed = false,
    this.error,
  });
}

----- FILE: ./whatsapp_style_image_grid.dart -----
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../core/theme/app_text_styles.dart';
import '../../../../core/widgets/cached_image_widget.dart';
import '../../domain/entities/attachment.dart';
import 'expandable_image_viewer.dart';

class WhatsAppStyleImageGrid extends StatelessWidget {
  final List<Attachment> images;
  final bool isMe;
  final VoidCallback? onTap;
  // Optional callbacks to propagate actions to parent (message-level)
  final Function(String)? onReaction;
  final void Function(Attachment)? onReply;
  // Optional: per-attachment reaction state to reflect overlay in viewer
  final Map<String, String>? reactionsByAttachment;
  // Optional: callback when a reaction is set for a specific attachment
  final void Function(Attachment, String)? onReactForAttachment;

  const WhatsAppStyleImageGrid({
    super.key,
    required this.images,
    required this.isMe,
    this.onTap,
    this.onReaction,
    this.onReply,
    this.reactionsByAttachment,
    this.onReactForAttachment,
  });

  @override
  Widget build(BuildContext context) {
    if (images.isEmpty) return const SizedBox.shrink();

    final imageCount = images.length;

    return GestureDetector(
      onTap: () {
        HapticFeedback.lightImpact();
        _openImageViewer(context, 0);
      },
      onLongPress: () {
        HapticFeedback.lightImpact();
        _openImageViewer(context, 0);
      },
      child: _buildGrid(imageCount),
    );
  }

  Widget _buildGrid(int count) {
    switch (count) {
      case 1:
        return _buildSingleImage(images.first);
      case 2:
        return _buildTwoImages();
      case 3:
        return _buildThreeImages();
      case 4:
        return _buildFourImages();
      default:
        return _buildMoreImages();
    }
  }

  Widget _buildSingleImage(Attachment image) {
    // Keep a visually pleasant default ratio and ensure tap opens viewer.
    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Builder(
        builder: (context) => GestureDetector(
          onTap: () {
            HapticFeedback.lightImpact();
            _openImageViewer(context, 0);
          },
          onLongPress: () {
            HapticFeedback.lightImpact();
            _openImageViewer(context, 0);
          },
          child: Stack(
            fit: StackFit.expand,
            children: [
              CachedImageWidget(
                imageUrl: image.fileUrl,
                fit: BoxFit.cover,
                removeContainer: true,
              ),
              if (_hasOverlayFor(image)) _buildReactionOverlay(image),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTwoImages() {
    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Row(
        children: [
          Expanded(
            child: _buildImageTile(images[0], 0),
          ),
          const SizedBox(width: 2),
          Expanded(
            child: _buildImageTile(images[1], 1),
          ),
        ],
      ),
    );
  }

  Widget _buildThreeImages() {
    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Row(
        children: [
          Expanded(
            flex: 2,
            child: _buildImageTile(images[0], 0),
          ),
          const SizedBox(width: 2),
          Expanded(
            child: Column(
              children: [
                Expanded(
                  child: _buildImageTile(images[1], 1),
                ),
                const SizedBox(height: 2),
                Expanded(
                  child: _buildImageTile(images[2], 2),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFourImages() {
    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Column(
        children: [
          Expanded(
            child: Row(
              children: [
                Expanded(
                  child: _buildImageTile(images[0], 0),
                ),
                const SizedBox(width: 2),
                Expanded(
                  child: _buildImageTile(images[1], 1),
                ),
              ],
            ),
          ),
          const SizedBox(height: 2),
          Expanded(
            child: Row(
              children: [
                Expanded(
                  child: _buildImageTile(images[2], 2),
                ),
                const SizedBox(width: 2),
                Expanded(
                  child: _buildImageTile(images[3], 3),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMoreImages() {
    final displayImages = images.take(4).toList();
    final remainingCount = images.length - 4;

    return AspectRatio(
      aspectRatio: 4 / 3,
      child: Column(
        children: [
          Expanded(
            child: Row(
              children: [
                Expanded(
                  child: _buildImageTile(displayImages[0], 0),
                ),
                const SizedBox(width: 2),
                Expanded(
                  child: _buildImageTile(displayImages[1], 1),
                ),
              ],
            ),
          ),
          const SizedBox(height: 2),
          Expanded(
            child: Row(
              children: [
                Expanded(
                  child: _buildImageTile(displayImages[2], 2),
                ),
                const SizedBox(width: 2),
                Expanded(
                  child: Stack(
                    fit: StackFit.expand,
                    children: [
                      _buildImageTile(displayImages[3], 3),
                      if (remainingCount > 0)
                        Container(
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [
                                Colors.black.withValues(alpha: 0.7),
                                Colors.black.withValues(alpha: 0.5),
                              ],
                            ),
                          ),
                          child: Center(
                            child: Text(
                              '+$remainingCount',
                              style: AppTextStyles.heading2.copyWith(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                                fontSize: 24,
                              ),
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImageTile(Attachment image, int index) {
    return Builder(
      builder: (context) => GestureDetector(
        onTap: () {
          HapticFeedback.lightImpact();
          _openImageViewer(context, index);
        },
        onLongPress: () {
          HapticFeedback.lightImpact();
          _openImageViewer(context, index);
        },
        child: Stack(
          fit: StackFit.expand,
          children: [
            CachedImageWidget(
              imageUrl: image.fileUrl,
              fit: BoxFit.cover,
              removeContainer: true,
            ),
            if (_hasOverlayFor(image)) _buildReactionOverlay(image),
          ],
        ),
      ),
    );
  }

  bool _hasOverlayFor(Attachment image) {
    final map = reactionsByAttachment;
    if (map == null) return false;
    final r = map[image.id];
    return r != null && r.isNotEmpty;
  }

  Widget _buildReactionOverlay(Attachment image) {
    final type = reactionsByAttachment?[image.id] ?? '';
    final emoji = _emojiFor(type);
    return Positioned(
      right: 6,
      bottom: 6,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.45),
          borderRadius: BorderRadius.circular(10),
          border: Border.all(color: Colors.white.withOpacity(0.2), width: 0.5),
        ),
        child: Text(emoji, style: const TextStyle(fontSize: 12)),
      ),
    );
  }

  String _emojiFor(String type) {
    switch (type) {
      case 'like':
        return '👍';
      case 'love':
        return '❤️';
      case 'laugh':
        return '😂';
      case 'wow':
        return '😮';
      case 'sad':
        return '😢';
      case 'angry':
        return '😠';
      default:
        return '👍';
    }
  }

  void _openImageViewer(BuildContext context, int initialIndex) {
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) =>
            ExpandableImageViewer(
          images: images,
          initialIndex: initialIndex,
          onReaction: onReaction,
          onReply: onReply,
          initialReactionsByAttachment: reactionsByAttachment,
          onReactForAttachment: onReactForAttachment,
        ),
        transitionDuration: const Duration(milliseconds: 300),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(
            opacity: animation,
            child: child,
          );
        },
      ),
    );
  }
}

