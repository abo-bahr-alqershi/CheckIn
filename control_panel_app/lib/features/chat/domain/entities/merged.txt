----- FILE: ./attachment.dart -----
import 'package:equatable/equatable.dart';

class Attachment extends Equatable {
  final String id;
  final String conversationId;
  final String fileName;
  final String contentType; // MIME type
  final int fileSize;
  final String filePath;
  final String fileUrl;
  final String url;
  final String uploadedBy;
  final DateTime createdAt;
  final String? thumbnailUrl;
  final Map<String, dynamic>? metadata;
  // New optional fields used by UI
  final int? duration; // in seconds for audio/video
  final double? downloadProgress; // 0.0 - 1.0 (transient, not from backend)

  const Attachment({
    required this.id,
    required this.conversationId,
    required this.fileName,
    required this.contentType,
    required this.fileSize,
    required this.filePath,
    required this.fileUrl,
    required this.url,
    required this.uploadedBy,
    required this.createdAt,
    this.thumbnailUrl,
    this.metadata,
    this.duration,
    this.downloadProgress,
  });

  @override
  List<Object?> get props => [
        id,
        conversationId,
        fileName,
        contentType,
        fileSize,
        filePath,
        fileUrl,
        url,
        uploadedBy,
        createdAt,
        thumbnailUrl,
        metadata,
        duration,
        downloadProgress,
      ];

  // Helper methods
  String get fileExtension => fileName.split('.').last.toLowerCase();

  bool get isImage => contentType.startsWith('image/');
  bool get isVideo => contentType.startsWith('video/');
  bool get isAudio => contentType.startsWith('audio/');
  bool get isDocument => !isImage && !isVideo && !isAudio;

  String get formattedFileSize {
    if (fileSize < 1024) return '$fileSize B';
    if (fileSize < 1024 * 1024)
      return '${(fileSize / 1024).toStringAsFixed(1)} KB';
    if (fileSize < 1024 * 1024 * 1024)
      return '${(fileSize / (1024 * 1024)).toStringAsFixed(1)} MB';
    return '${(fileSize / (1024 * 1024 * 1024)).toStringAsFixed(1)} GB';
  }
}

class ChatSettings extends Equatable {
  final String id;
  final String userId;
  final bool notificationsEnabled;
  final bool soundEnabled;
  final bool showReadReceipts;
  final bool showTypingIndicator;
  final String theme; // "light", "dark", "auto"
  final String fontSize; // "small", "medium", "large"
  final bool autoDownloadMedia;
  final bool backupMessages;

  const ChatSettings({
    required this.id,
    required this.userId,
    this.notificationsEnabled = true,
    this.soundEnabled = true,
    this.showReadReceipts = true,
    this.showTypingIndicator = true,
    this.theme = 'auto',
    this.fontSize = 'medium',
    this.autoDownloadMedia = true,
    this.backupMessages = false,
  });

  @override
  List<Object> get props => [
        id,
        userId,
        notificationsEnabled,
        soundEnabled,
        showReadReceipts,
        showTypingIndicator,
        theme,
        fontSize,
        autoDownloadMedia,
        backupMessages,
      ];
}

----- FILE: ./conversation.dart -----
import 'package:equatable/equatable.dart';
import 'package:bookn_cp_app/features/chat/domain/entities/message.dart';

class Conversation extends Equatable {
  final String id;
  final String conversationType; // "direct" or "group"
  final String? title;
  final String? description;
  final String? avatar;
  final DateTime createdAt;
  final DateTime updatedAt;
  final Message? lastMessage;
  final int unreadCount;
  final bool isArchived;
  final bool isMuted;
  final String? propertyId;
  final List<ChatUser> participants;

  const Conversation({
    required this.id,
    required this.conversationType,
    this.title,
    this.description,
    this.avatar,
    required this.createdAt,
    required this.updatedAt,
    this.lastMessage,
    this.unreadCount = 0,
    this.isArchived = false,
    this.isMuted = false,
    this.propertyId,
    required this.participants,
  });

  @override
  List<Object?> get props => [
    id,
    conversationType,
    title,
    description,
    avatar,
    createdAt,
    updatedAt,
    lastMessage,
    unreadCount,
    isArchived,
    isMuted,
    propertyId,
    participants,
  ];

  // Helper methods
  bool get isDirectChat => conversationType == 'direct';
  bool get isGroupChat => conversationType == 'group';
  bool get hasUnreadMessages => unreadCount > 0;
  
  // Get other participant in direct chat
  ChatUser? getOtherParticipant(String currentUserId) {
    if (!isDirectChat || participants.length != 2) return null;
    return participants.firstWhere((p) => p.id != currentUserId);
  }
}

class ChatUser extends Equatable {
  final String id;
  final String name;
  final String email;
  final String? phone;
  final String? profileImage;
  final String userType; // "admin", "property_owner", "customer"
  final String status; // "online", "offline", "away", "busy"
  final DateTime? lastSeen;
  final String? propertyId;
  final bool isOnline;

  const ChatUser({
    required this.id,
    required this.name,
    required this.email,
    this.phone,
    this.profileImage,
    required this.userType,
    required this.status,
    this.lastSeen,
    this.propertyId,
    required this.isOnline,
  });

  @override
  List<Object?> get props => [
    id,
    name,
    email,
    phone,
    profileImage,
    userType,
    status,
    lastSeen,
    propertyId,
    isOnline,
  ];
}

----- FILE: ./message.dart -----
import 'package:equatable/equatable.dart';
import 'attachment.dart';

class Message extends Equatable {
  final String id;
  final String conversationId;
  final String senderId;
  final String messageType; // "text", "image", "audio", "video", "document", "location"
  final String? content;
  final Location? location;
  final String? replyToMessageId;
  final List<MessageReaction> reactions;
  final List<Attachment> attachments;
  final DateTime createdAt;
  final DateTime updatedAt;
  final String status; // "sent", "delivered", "read", "failed"
  final bool isEdited;
  final DateTime? editedAt;
  final DeliveryReceipt? deliveryReceipt;
  final bool isDeleted;
  final String? senderName;

  const Message({
    required this.id,
    required this.conversationId,
    required this.senderId,
    required this.messageType,
    this.content,
    this.location,
    this.replyToMessageId,
    this.reactions = const [],
    this.attachments = const [],
    required this.createdAt,
    required this.updatedAt,
    required this.status,
    this.isEdited = false,
    this.editedAt,
    this.deliveryReceipt,
    this.isDeleted = false,
    this.senderName,
  });

  @override
  List<Object?> get props => [
    id,
    conversationId,
    senderId,
    messageType,
    content,
    location,
    replyToMessageId,
    reactions,
    attachments,
    createdAt,
    updatedAt,
    status,
    isEdited,
    editedAt,
    deliveryReceipt,
    isDeleted,
    senderName,
  ];

  // Helper methods
  bool get isTextMessage => messageType == 'text';
  bool get isMediaMessage => ['image', 'video', 'audio'].contains(messageType);
  bool get hasAttachments => attachments.isNotEmpty;
  bool get isDelivered => status == 'delivered' || status == 'read';
  bool get isRead => status == 'read';
  bool get isFailed => status == 'failed';
}

class Location extends Equatable {
  final double latitude;
  final double longitude;
  final String? address;

  const Location({
    required this.latitude,
    required this.longitude,
    this.address,
  });

  @override
  List<Object?> get props => [latitude, longitude, address];
}

class MessageReaction extends Equatable {
  final String id;
  final String messageId;
  final String userId;
  final String reactionType; // "like", "love", "laugh", "sad", "angry", "wow"

  const MessageReaction({
    required this.id,
    required this.messageId,
    required this.userId,
    required this.reactionType,
  });

  @override
  List<Object?> get props => [id, messageId, userId, reactionType];
}

class DeliveryReceipt extends Equatable {
  final DateTime? deliveredAt;
  final DateTime? readAt;
  final List<String> readBy;

  const DeliveryReceipt({
    this.deliveredAt,
    this.readAt,
    this.readBy = const [],
  });

  @override
  List<Object?> get props => [deliveredAt, readAt, readBy];
}
extension LocationExtension on Location {
  Map<String, dynamic> toJson() {
    return {
      'latitude': latitude,
      'longitude': longitude,
      if (address != null) 'address': address,
    };
  }
}
